<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97d9ebbb7e3eca4970174e477e05531235c7756d" /><Meta Name="ms.sourcegitcommit" Value="2b78f05b0c6fa92adaf5e1dfe5a50388f952efe7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/02/2019" /><Meta Name="ms.locfileid" Value="71811030" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет текущее время, обычно выраженное как дата и время суток.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## <a name="quick-links-to-example-code"></a>Быстрые ссылки на примеры кода

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Эта статья содержит несколько примеров, использующих тип `DateTime`:

**Примеры инициализации**      
- [Вызов конструктора](#initialization-01)
- [Вызвать неявный конструктор без параметров](#initialization-02)
- [Присваивание из возвращаемого значения](#initialization-03)
- [Анализ строки, представляющей дату и время](#initialization-04)
- [Синтаксис Visual Basic для инициализации даты и времени](#initialization-05)

**Форматирование объектов `DateTime` в виде строк**  
- [Использовать формат даты и времени по умолчанию](#formatting-01)
- [Форматирование даты и времени с помощью определенного языка и региональных параметров](#formatting-02)
- [Форматирование даты и времени с помощью стандартной или настраиваемой строки формата](#formatting-03)
- [Указание строки формата и определенного языка и региональных параметров](#formatting-04)
- [Форматирование даты и времени с помощью стандарта ISO 8601 для веб-служб](#formatting-05)

**Синтаксический анализ строк как объектов `DateTime`**  
- [Чтобы преобразовать строку в дату и время, используйте `Parse` или `TryParse`.](#parsing-01)
- [Используйте `ParseExact` или `TryParseExact` для преобразования строки в известном формате](#parsing-02)
- [Преобразование из строкового представления ISO 8601 в дату и время](#parsing-03)

**разрешение @no__t 1**  
- [Изучение разрешения значений даты и времени](#resolution-01)
- [Сравнение равенства в пределах допустимого](#comparison-01)

**Культура и календари**  
- [Отображение значений даты и времени с помощью календарей, связанных с языком и региональными параметрами](#calendars-01)
- [Анализ строк в соответствии с календарем конкретного языка и региональных параметров](#calendars-02)
- [Инициализация даты и времени из календаря определенного языка и региональных параметров](#calendars-03)
- [Доступ к свойствам даты и времени с помощью календаря определенного языка и региональных параметров](#calendars-04)
- [Получение недели года с помощью календарей, связанных с культурой](#calendars-05)

**Сохраняемость**  
- [Сохранение значений даты и времени в виде строк в местном часовом поясе](#persistence-01)
- [Сохранение значений даты и времени в виде строк в культуре и инвариантном формате времени](#persistence-02)
- [Сохранение значений даты и времени в виде целых чисел](#persistence-03)
- [Сохранение значений даты и времени с помощью `XmlSerializer`](#persistence-04)
- [Сохранение значений даты и времени с помощью `BinaryFormatter`](#persistence-05)
- [Сохранение значений даты и времени с данными часового пояса](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>Быстрые ссылки на разделы с комментариями.

В этом разделе содержатся подразделы для многих распространенных применений структуры `DateTime`.
  
- [Инициализация объекта `DateTime`](#initializing-a-datetime-object)
- [Значения DateTime и их строковые представления](#datetime-values-and-their-string-representations)
- [Синтаксический анализ значений DateTime из строк](#parsing-datetime-values-from-strings)
- [Значения даты и времени](#datetime-values)
- [Операции с DateTime](#datetime-operations)
- [Разрешение даты и времени](#datetime-resolution)
- [Значения и календари даты и времени](#datetime-values-and-calendars)
- [Сохранение значений DateTime](#persisting-datetime-values)
- @no__t 0DateTime и TimeSpan @ no__t-0
- [Сравнение равенства в пределах допустимого диапазона](#comparing-for-equality-within-tolerance)
- [Вопросы COM-взаимодействия](#com-interop-considerations)
   
Тип значения <xref:System.DateTime> представляет значения даты и времени в диапазоне от 00:00:00 (полночь), 1 января 0001 г. Анно Домини (общая эра) до 11:59:59 вечера, 31 декабря 9999 г. н. э. эры в григорианском календаре.  
  
Значения времени измеряются в 100-наносекундных единицах, именуемых тактами. Конкретная дата — число тактов с 12:00 полуночи, 1 января 0001 г. н. э. эры в календаре <xref:System.Globalization.GregorianCalendar>. Число не включает такты, которые будут добавлены в високосные секунды. Например, значение квантов 31241376000000000L представляет дату Пятница, 1 января 01 г., 0100 12:00:00 полночь. Значение <xref:System.DateTime> всегда выражается в контексте явного или стандартного календаря.  
  
> [!NOTE]
>  Если вы работаете со значением тактов, которое нужно преобразовать в какой-то другой интервал времени, например в минуты или секунды, для выполнения преобразования следует использовать константу <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType> или <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>. Например, чтобы добавить число секунд, представленное указанным числом тактов, в компонент <xref:System.DateTime.Second%2A> значения <xref:System.DateTime>, можно использовать выражение `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Вы можете просмотреть источник всего набора примеров из этой статьи либо в [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) , либо [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) из репозитория документов на сайте GitHub.

> [!NOTE]
>  Альтернативой структуры <xref:System.DateTime> для работы со значениями даты и времени в определенных часовых поясах является структура <xref:System.DateTimeOffset>. Структура <xref:System.DateTimeOffset> хранит сведения о дате и времени в частном поле <xref:System.DateTime> и количестве минут, в течение которых дата и время отличаются от времени в формате UTC в частном поле <xref:System.Int16>. Это дает возможность @no__t значение 0 отражать время в определенном часовом поясе, в то время как значение <xref:System.DateTime> может однозначно отражать только время в формате UTC и часовой пояс местного часового пояса. Обсуждение использования структуры <xref:System.DateTime> или структуры <xref:System.DateTimeOffset> при работе со значениями даты и времени см. в разделе [Выбор между типами datetime, DateTimeOffset, TimeSpan и TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Инициализация объекта DateTime  

Можно присвоить начальное значение новому значению `DateTime` различными способами:

- Вызов конструктора, в котором указываются аргументы для значений или используется неявный конструктор без параметров.
- Присвоение значения `DateTime` возвращаемому значению свойства или метода.
- Анализ значения `DateTime` из его строкового представления.
- Использование функций языка Visual Basic для создания экземпляра `DateTime`. 

В следующих фрагментах кода показаны примеры каждого из них.

#### <a name="invoke-constructors"></a>Вызвать конструкторы

Вы вызываете любую из перегрузок конструктора <xref:System.DateTime>, задающих элементы значения даты и времени (например, год, месяц, день или число тактов). В следующем коде создается конкретная дата с помощью конструктора <xref:System.DateTime>, в котором указывается год, месяц, день, час, минута и секунда.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Если требуется, чтобы `DateTime` был инициализирован со значением по умолчанию, вызывается конструктор неявного параметра структуры `DateTime`. (Дополнительные сведения о неявном конструкторе без параметров типа значения см. в разделе [типы значений](~/docs/csharp/language-reference/keywords/value-types.md).) Некоторые компиляторы также поддерживают объявление значения <xref:System.DateTime> без явного присвоения ему значения. Создание значения без явной инициализации также приводит к созданию значения по умолчанию. В следующем примере показан <xref:System.DateTime> неявный конструктор без параметров C# в и Visual Basic, а также объявление <xref:System.DateTime> без назначения в Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Присваивание вычисленного значения

Объекту <xref:System.DateTime> можно присвоить значение даты и времени, возвращаемое свойством или методом. В следующем примере назначается текущая дата и время, текущая дата и время в формате UTC, а текущая дата — три новые переменные <xref:System.DateTime>.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Анализ строки, представляющей дату и время

Методы <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A> и <xref:System.DateTime.TryParseExact%2A> преобразуют строку в эквивалентное ему значение даты и времени. В следующих примерах используются методы <xref:System.DateTime.Parse%2A> и <xref:System.DateTime.ParseExact%2A> для синтаксического анализа строки и преобразования ее в значение <xref:System.DateTime>. Второй формат использует форму, поддерживаемую стандартом [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) для представления даты и времени в строковом формате. Это стандартное представление часто используется для перевода сведений о датах в веб-службы.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Методы <xref:System.DateTime.TryParse%2A> и <xref:System.DateTime.TryParseExact%2A> указывают, является ли строка допустимым представлением значения <xref:System.DateTime> и, если это так, выполняет преобразование.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Синтаксис, зависящий от языка для Visual Basic

Следующая инструкция Visual Basic инициализирует новое значение <xref:System.DateTime>.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Значения DateTime и их строковые представления  

На внутреннем уровне все значения <xref:System.DateTime> представлены в виде числа тактов (число 100-наносекундных интервалов), истекших с 12:00:00 полуночи 1 января 0001 года. Фактическое значение <xref:System.DateTime> не зависит от того, как это значение отображается при отображении. Внешний вид значения <xref:System.DateTime> является результатом операции форматирования, преобразующей значение в строковое представление.  
  
Внешний вид значений даты и времени зависит от языка и региональных параметров, международных стандартов, требований приложения и персональных предпочтений. Структура <xref:System.DateTime> обеспечивает гибкость при форматировании значений даты и времени с помощью перегрузок <xref:System.DateTime.ToString%2A>. Метод <xref:System.DateTime.ToString?displayProperty=nameWithType> по умолчанию возвращает строковое представление значения даты и времени, используя короткий формат даты и длинный шаблон времени для текущего языка и региональных параметров. В следующем примере используется метод <xref:System.DateTime.ToString?displayProperty=nameWithType> по умолчанию. Она отображает дату и время, используя краткий формат даты и длинный шаблон времени для текущего языка и региональных параметров. Язык и региональные параметры en-US — это текущий язык и региональные параметры на компьютере, на котором выполнялся пример.  
  
<a name="formatting-01"></a> [!code-csharp[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Может потребоваться форматирование дат в определенной культуре для поддержки веб-сценариев, в которых сервер может находиться в разных культурах клиента. Язык и региональные параметры задаются с помощью метода <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> для создания краткого представления даты и длинного времени в определенной культуре. В следующем примере используется метод <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> для вывода даты и времени с использованием краткого шаблона даты и длинного формата времени для языка и региональных параметров fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Другим приложениям могут потребоваться различные строковые представления даты. Метод <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> возвращает строковое представление, определенное стандартным или настраиваемым описателем формата, используя соглашения о форматировании текущего языка и региональных параметров. В следующем примере используется метод <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> для вывода полного шаблона даты и времени для языка и региональных параметров en-US, текущего языка и региональных параметров на компьютере, на котором выполнялся этот пример.  
  
<a name="formatting-03"></a> [!code-csharp[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Наконец, можно указать как язык и региональные параметры, так и формат с помощью метода <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>. В следующем примере используется метод <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> для вывода полного шаблона даты и времени для языка и региональных параметров fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Перегрузку <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> можно также использовать со строкой настраиваемого формата для указания других форматов. В следующем примере показано, как форматировать строку, используя стандартный формат [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) , часто используемый для веб-служб. Формат ISO 8601 не имеет соответствующей строки стандартного формата.

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Дополнительные сведения о форматировании значений <xref:System.DateTime> см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) и [строки настраиваемых форматов даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Синтаксический анализ значений DateTime из строк

При синтаксическом анализе преобразуется строковое представление даты и времени в значение <xref:System.DateTime>. Как правило, строки даты и времени имеют два разных варианта использования в приложениях:  
  
-   Дата и время принимают различные формы и отражают соглашения о текущей культуре или определенной культуре. Например, приложение позволяет пользователю, имеющему текущий язык и региональные параметры en-US, ввести значение даты "12/15/2013" или "15 декабря 2013". Он позволяет пользователю, чей текущий язык и региональные параметры — en-GB, ввести значение даты "15/12/2013" или "15 декабря 2013".  
  
-   Дата и время представлены в заранее определенном формате. Например, приложение сериализует дату как "20130103" независимо от языка и региональных параметров, на которых выполняется приложение. Для приложения может требоваться ввод дат в кратком формате даты текущего языка и региональных параметров.
  
Используйте метод <xref:System.DateTime.Parse%2A> или <xref:System.DateTime.TryParse%2A> для преобразования строки из одного из стандартных форматов даты и времени, используемых языком и региональными параметрами, в значение <xref:System.DateTime>. В следующем примере показано, как можно использовать <xref:System.DateTime.TryParse%2A> для преобразования строк даты в разных форматах, относящихся к культуре, в значение <xref:System.DateTime>. Он изменяет текущий язык и региональные параметры на английский (Великобритания) и вызывает метод <xref:System.DateTime.GetDateTimeFormats> для создания массива строк даты и времени. Затем каждый элемент массива передается в метод <xref:System.DateTime.TryParse%2A>. Выходные данные в примере показывают, что метод синтаксического анализа мог успешно преобразовать каждую из строк даты и времени, связанных с языком и региональными параметрами.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Используйте методы <xref:System.DateTime.ParseExact%2A> и <xref:System.DateTime.TryParseExact%2A> для преобразования строки, которая должна соответствовать определенному формату или формату, в значение <xref:System.DateTime>. Вы указываете одну или несколько строк формата даты и времени в качестве параметра для метода анализа. В следующем примере метод <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> используется для преобразования строк, которые должны быть в формате ГГГГММДД или в формате "ЧЧММСС", в значения <xref:System.DateTime>.  
  
<a name="parsing-02"></a> [!code-csharp[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Одним из распространенных способов использования <xref:System.DateTime.ParseExact%2A> является преобразование строкового представления из веб-службы, обычно в стандартном формате [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) . В следующем коде показана правильная строка формата для использования:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Если строка не может быть проанализирована, то методы <xref:System.DateTime.Parse%2A> и <xref:System.DateTime.ParseExact%2A> создают исключение. Методы <xref:System.DateTime.TryParse%2A> и <xref:System.DateTime.TryParseExact%2A> возвращают значение <xref:System.Boolean>, которое указывает, успешно ли выполнено преобразование. В сценариях, где важна производительность, следует использовать методы <xref:System.DateTime.TryParse%2A> или <xref:System.DateTime.TryParseExact%2A>. Операция синтаксического анализа для строк даты и времени обычно имеет высокую частоту сбоев, а обработка исключений является дорогостоящей. Используйте эти методы, если строки являются входными пользователями или получены из неизвестного источника. 
  
Дополнительные сведения о синтаксическом анализе значений даты и времени см. в разделе [синтаксический анализ строк даты и времени](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Значения даты и времени

Описания значений времени в типе <xref:System.DateTime> часто выражаются с помощью стандарта всемирного координированного времени (UTC). Время в формате UTC — это Международный распознанное имя времени по Гринвичу (GMT). Время в формате UTC — это время, измеряемое в виде долготы на ноль градусов, точку отсчета в формате UTC. Переход на летнее время неприменим к UTC.  
  
Местное время указывается относительно определенного часового пояса. Часовой пояс связан с смещением часового пояса. Смещение часового пояса — это сдвиг часового пояса, измеряемый в часах от точки отсчета UTC. Кроме того, локальное время может зависеть от перехода на летнее время, которое добавляет или вычитает корректировку интервала времени. Местное время рассчитывается путем добавления смещения часового пояса в время в формате UTC и корректировки на летнее время (при необходимости). Смещение часового пояса в точке источника UTC равно нулю.  
  
Время в формате UTC подходит для вычислений, сравнений и хранения дат и времени в файлах. Местное время подходит для просмотра в пользовательских интерфейсах классических приложений. Приложения, поддерживающие часовые пояса (например, многие веб-приложения), также должны работать с несколькими другими часовыми поясами.  
  
Если свойство <xref:System.DateTime.Kind%2A> объекта <xref:System.DateTime> равно <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, оно не указывается, является ли время представлено местным временем, временем в формате UTC или временем в каком-либо другом часовом поясе.  

### <a name="datetime-resolution"></a>Разрешение даты и времени
  
> [!NOTE]
>  В качестве альтернативы для выполнения арифметических операций с датами и временем по значениям <xref:System.DateTime> для измерения затраченного времени можно использовать класс <xref:System.Diagnostics.Stopwatch>.  
  
Свойство <xref:System.DateTime.Ticks%2A> выражает значения даты и времени в единицах 1 10-миллионной доли секунды. Свойство <xref:System.DateTime.Millisecond%2A> возвращает доли секунды в значении даты и времени. Использование повторных вызовов свойства <xref:System.DateTime.Now%2A?displayProperty=nameWithType> для измерения затраченного времени зависит от системных часов. Системные часы в системах Windows 7 и Windows 8 имеют разрешение около 15 миллисекунд. Это решение влияет на небольшие интервалы времени менее 100 миллисекунд. 
  
В следующем примере показана зависимость текущих значений даты и времени от разрешения системных часов. В этом примере внешний цикл повторяется 20 раз, а внутренний цикл служит для задержки внешнего цикла. Если значение счетчика внешнего цикла равно 10, вызов метода <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> вводит задержку в 5 миллисекунд. В следующем примере показано, сколько миллисекунд, возвращаемых свойством `DateTime.Now.Milliseconds`, изменяется только после вызова <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Операции с DateTime  

Вычисление с использованием структуры <xref:System.DateTime>, например <xref:System.DateTime.Add%2A> или <xref:System.DateTime.Subtract%2A>, не изменяет значение структуры. Вместо этого вычисление возвращает новую структуру <xref:System.DateTime>, значение которой является результатом вычисления.  
  
Операции преобразования между часовыми поясами (например, между временем UTC и местным временем, а также между одним часовым поясом и другим) принимают летнее время, а операции арифметического и сравнения не имеют.  
  
Сама структура <xref:System.DateTime> предоставляет ограниченную поддержку для преобразования из одного часового пояса в другой. Метод <xref:System.DateTime.ToLocalTime%2A> можно использовать для преобразования времени в формате UTC в местное время или с помощью метода <xref:System.DateTime.ToUniversalTime%2A> для преобразования местного времени в UTC. Однако полный набор методов преобразования часовых поясов доступен в классе <xref:System.TimeZoneInfo>. Вы преобразуете время в одном из мировых часовых поясов во время в любом часовом поясе, используя эти методы.  
  
Вычисления и сравнения объектов <xref:System.DateTime> имеют смысл только в том случае, если объекты представляют время в одном часовом поясе. Для представления часового пояса значения <xref:System.DateTime> можно использовать объект <xref:System.TimeZoneInfo>, хотя эти два являются слабо связанными. Объект <xref:System.DateTime> не имеет свойства, возвращающего объект, представляющий часовой пояс значения даты и времени. Свойство <xref:System.DateTime.Kind%2A> указывает, является ли `DateTime` представлением времени UTC, местным временем или не указано. В приложении, поддерживающем Часовые пояса, необходимо полагаться на какой-либо внешний механизм, чтобы определить часовой пояс, в котором был создан объект <xref:System.DateTime>. Можно использовать структуру, которая заключает в оболочку значение <xref:System.DateTime> и объект <xref:System.TimeZoneInfo>, представляющий часовой пояс <xref:System.DateTime>. Дополнительные сведения об использовании времени в формате UTC в вычислениях и сравнениях со значениями <xref:System.DateTime> см. в разделе [Выполнение арифметических операций с датами и временем](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Каждый член <xref:System.DateTime> неявно использует григорианский календарь для выполнения операции. Исключения — это методы, которые неявно определяют календарь. К ним относятся конструкторы, указывающие календарь, и методы с параметром, производным от <xref:System.IFormatProvider>, например <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Операции по членам типа <xref:System.DateTime> принимают такие сведения, как високосные годы и количество дней в месяце.  

## <a name="datetime-values-and-calendars"></a>Значения и календари даты и времени  

Библиотека классов .NET Framework содержит ряд классов календарей, которые являются производными от класса <xref:System.Globalization.Calendar>.  Они приведены ниже.  
  
-   Класс <xref:System.Globalization.ChineseLunisolarCalendar>.  
-   класс <xref:System.Globalization.EastAsianLunisolarCalendar>;  
-   класс <xref:System.Globalization.GregorianCalendar>;  
-   класс <xref:System.Globalization.HebrewCalendar>;  
-   класс <xref:System.Globalization.HijriCalendar>;  
-   класс <xref:System.Globalization.JapaneseCalendar>;  
-   класс <xref:System.Globalization.JapaneseLunisolarCalendar>;  
-   класс <xref:System.Globalization.JulianCalendar>;  
-   класс <xref:System.Globalization.KoreanCalendar>;  
-   класс <xref:System.Globalization.KoreanLunisolarCalendar>;  
-   класс <xref:System.Globalization.PersianCalendar>;  
-   класс <xref:System.Globalization.TaiwanCalendar>;  
-   класс <xref:System.Globalization.TaiwanLunisolarCalendar>;  
-   класс <xref:System.Globalization.ThaiBuddhistCalendar>;  
-   класс <xref:System.Globalization.UmAlQuraCalendar>;  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

Для каждого языка и региональных параметров используется календарь по умолчанию, определенный свойством <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> только для чтения. Каждый язык и региональные параметры могут поддерживать один или несколько календарей, определенных свойством <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> только для чтения. Календарь, который в настоящее время используется определенным объектом <xref:System.Globalization.CultureInfo>, определяется свойством <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>. Он должен быть одним из календарей, найденных в массиве <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>.  
  
Текущий календарь языка и региональных параметров используется во всех операциях форматирования для этого языка и региональных параметров. Например, календарь по умолчанию тайского языка и региональных параметров — это тайский календарь эры, представленный классом <xref:System.Globalization.ThaiBuddhistCalendar>.  Если объект <xref:System.Globalization.CultureInfo>, представляющий тайский язык и региональные параметры, используется в операции форматирования даты и времени, по умолчанию используется тайский буддистский календарь эры. Григорианский календарь используется только в том случае, если свойство <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> языка и региональных параметров изменилось, как показано в следующем примере:  

<a name="calendars-01"></a> [!code-csharp[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Текущий календарь языка и региональных параметров также используется во всех операциях синтаксического анализа для этой культуры, как показано в следующем примере.  
  
<a name="calendars-02"></a> [!code-csharp[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Вы создаете значение <xref:System.DateTime>, используя элементы даты и времени (номер года, месяца и дня) определенного календаря, вызывая [конструктор DateTime](xref:System.DateTime.%23ctor%2A) , который включает параметр `calendar` и передает ему объект <xref:System.Globalization.CultureInfo.Calendar%2A>, представляющий этот календарь. . В следующем примере используются элементы даты и времени из календаря <xref:System.Globalization.ThaiBuddhistCalendar>.  
  
<a name="calendars-03"></a> [!code-csharp[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> конструкторы, не включающие параметр `calendar`, предполагают, что элементы даты и времени выражаются как единицы в григорианском календаре.  
  
Все остальные свойства и методы <xref:System.DateTime> используют григорианский календарь. Например, свойство <xref:System.DateTime.Year%2A?displayProperty=nameWithType> возвращает год григорианского календаря, а метод <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> предполагает, что параметр `year` является годом в григорианском календаре.  Каждый элемент <xref:System.DateTime>, использующий григорианский календарь, имеет соответствующий элемент класса <xref:System.Globalization.CultureInfo.Calendar%2A>, который использует конкретный календарь. Например, метод <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> возвращает год в определенном календаре, а метод <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> интерпретирует параметр `year` как номер года в определенном календаре. В следующем примере используются как <xref:System.DateTime>, так и соответствующие члены класса <xref:System.Globalization.ThaiBuddhistCalendar>.  
  
<a name="calendars-04"></a> [!code-csharp[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Структура <xref:System.DateTime> включает свойство <xref:System.DateTime.DayOfWeek%2A>, которое возвращает день недели по григорианскому календарю. Он не включает элемент, позволяющий получить номер недели года. Чтобы получить неделю года, вызовите метод <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> отдельного календаря. Ниже приведен пример.  
  
<a name="calendars-05"></a> [!code-csharp[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Дополнительные сведения о датах и календарях см. в разделе [Работа с календарями](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Сохранение значений DateTime  

Значения <xref:System.DateTime> можно сохранять четырьмя способами:  
  
-   Вы [преобразуете их в строки](#persisting-values-as-strings) и сохраняете строки.  
-   [Их можно преобразовать в 64-разрядные целочисленные значения](#persisting-values-as-integers) (значение свойства <xref:System.DateTime.Ticks%2A>) и сохранить целые числа.  
-   Вы [сериализуете значения DateTime](#serializing-datetime-values).  
-   Вы [сериализуете значения DateTime вместе со сведениями о часовом поясе](#serializing-datetime-and-time-zone-data).  
  
Необходимо убедиться, что процедура, которая восстанавливает значения <xref:System.DateTime>, не теряет данные или создает исключение независимо от выбранного метода. значения <xref:System.DateTime> должны быть циклическими. То есть исходное значение и восстановленное значение должны быть одинаковыми. Если исходное значение <xref:System.DateTime> представляет собой одно мгновенное время, оно должно обозначать тот же момент времени, когда он восстанавливается.  
  
#### <a name="persisting-values-as-strings"></a>Сохранение значений в виде строк  

Для успешного восстановления значений <xref:System.DateTime>, сохраняемых в виде строк, следуйте следующим правилам.  
  
-   Сделайте те же предположения относительно форматирования, зависящего от языка и региональных параметров, при восстановлении строки, как при ее сохранении. Чтобы обеспечить возможность восстановления строки в системе, текущая культура которой отличается от языка и региональных параметров системы, в которой она была сохранена, вызовите перегрузку <xref:System.DateTime.ToString%2A>, чтобы сохранить строку с помощью соглашений инвариантного языка и региональных параметров. Вызовите перегрузку <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> или <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>, чтобы восстановить строку с помощью соглашений инвариантного языка и региональных параметров. Никогда не используйте перегрузки <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29> или <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>, которые используют правила языка и региональных параметров текущего потока.  
  
-   Если дата представляет собой один момент времени, убедитесь, что она представляет тот же момент времени, когда он будет восстановлен, даже в другом часовом поясе. Преобразуйте значение <xref:System.DateTime> в время в формате UTC перед сохранением. Кроме того, можно сериализовать значение вместе со сведениями о часовом поясе. Дополнительные сведения об этом подходе см. в разделе [Сериализация DateTime и данных часового пояса](#serializing-datetime-and-time-zone-data).  
  
 Наиболее распространенная ошибка, выполняемая при сохранении значений <xref:System.DateTime> в виде строк, заключается в использовании соглашений о форматировании по умолчанию или текущего языка и региональных параметров. Проблемы возникают, если при сохранении и восстановлении строк текущий язык и региональные параметры различаются. Эти проблемы показаны в следующем примере. Он сохраняет пять дат, используя соглашения о форматировании текущего языка и региональных параметров, в данном случае — Английский (США). Она восстанавливает даты с помощью соглашений о форматировании различных языков и региональных параметров, которые в данном случае имеют Английский (Великобритания). Поскольку соглашения о форматировании двух языков и региональных параметров различаются, две даты не могут быть восстановлены, а оставшиеся три даты неверно обрабатываются. Кроме того, если исходные значения даты и времени представляют одно и то же время, то восстановленные времена будут неправильными из-за потери сведений о часовом поясе.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Чтобы успешно выполнить цикл обработки <xref:System.DateTime> значений, выполните следующие действия.  
  
1.  Если значения представляют единственное время, преобразуйте их из местного времени в время в формате UTC, вызвав метод <xref:System.DateTime.ToUniversalTime%2A>.  
1.  Преобразуйте даты в строковые представления, вызвав перегрузку <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> или <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Используйте соглашения о форматировании инвариантного языка и региональных параметров, указав <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> в качестве аргумента `provider`. Укажите, что значение должно быть циклическим, используя строку стандартного формата "O" или "R".  
  
Чтобы восстановить сохраненные значения <xref:System.DateTime> без потери данных, выполните следующие действия.  
  
1.  Проанализируйте данные, вызвав перегрузку <xref:System.DateTime.ParseExact%2A> или <xref:System.DateTime.TryParseExact%2A>. Укажите <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> в качестве аргумента `provider` и используйте ту же строку стандартного формата, которая использовалась для аргумента `format` во время преобразования. Включите значение <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> в аргумент `styles`.  
1.  Если значения <xref:System.DateTime> представляют одно и то же время, вызовите метод <xref:System.DateTime.ToLocalTime%2A>, чтобы преобразовать проанализированную дату из времени в формате UTC в местное время.  
  
В следующем примере используются инвариантный язык и региональные параметры и строка стандартного формата "O", чтобы гарантировать, что значения <xref:System.DateTime> сохраняются и восстанавливаются на один и тот же момент времени независимо от системы, языка и региональных параметров или часового пояса исходной и целевой систем.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Сохранение значений в виде целых чисел  

Дату и время можно сохранить как значение <xref:System.Int64>, представляющее число тактов. В этом случае вам не нужно учитывать язык и региональные параметры систем, значения <xref:System.DateTime> которых сохраняются и восстанавливаются.  
  
Чтобы сохранить значение <xref:System.DateTime> в виде целого числа:  
  
-   Если значения <xref:System.DateTime> представляют одно и то же время во времени, преобразуйте их в формат UTC, вызвав метод <xref:System.DateTime.ToUniversalTime%2A>.  
-   Получите число тактов, представленное значением <xref:System.DateTime> из свойства <xref:System.DateTime.Ticks%2A>.  
  
Чтобы восстановить значение <xref:System.DateTime>, которое сохранено как целое число:  
  
1.  Создайте экземпляр нового объекта <xref:System.DateTime>, передав значение <xref:System.Int64> в конструктор <xref:System.DateTime.%23ctor%28System.Int64%29>.  
1.  Если значение <xref:System.DateTime> представляет один момент времени, преобразуйте его из времени в формате UTC в местное время, вызвав метод <xref:System.DateTime.ToLocalTime%2A>.  
  
В следующем примере массив значений <xref:System.DateTime> сохраняется как целые числа в системе в США. тихоокеанском стандартном часовом поясе США. Она восстанавливается в системе в часовом поясе UTC. Файл, содержащий целые числа, включает значение <xref:System.Int32>, показывающее общее количество <xref:System.Int64> значений, сразу после него.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

<a name="serializing-datetime-values"></a>
#### <a name="serializing-datetime-values"></a>Сериализация значений даты и времени  

Значения <xref:System.DateTime> можно сохранить с помощью сериализации в поток или файл, а затем восстановить их путем десериализации. <xref:System.DateTime> данные сериализуются в определенном формате объекта. Объекты восстанавливаются при десериализации. Модуль форматирования или сериализатор, например <xref:System.Xml.Serialization.XmlSerializer> или <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, обрабатывает процесс сериализации и десериализации. Дополнительные сведения о сериализации и типах сериализации, поддерживаемых .NET Framework, см. в разделе [сериализация](~/docs/standard/serialization/index.md).
  
В следующем примере класс <xref:System.Xml.Serialization.XmlSerializer> используется для сериализации и десериализации значений <xref:System.DateTime>. Значения представляют собой все дни високосного года в двадцать-первых столетии. Выходные данные представляют результат, если пример выполняется в системе, текущий язык и региональные параметры которого — английский (Великобритания). Поскольку вы десериализуете сам объект <xref:System.DateTime>, код не должен управлять культурными различиями в форматах даты и времени.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Предыдущий пример не содержит сведений о времени. Если значение <xref:System.DateTime> представляет момент времени и выражается как местное время, преобразуйте его из местного времени в время в формате UTC перед сериализацией, вызвав метод <xref:System.DateTime.ToUniversalTime%2A>. После десериализации преобразуйте его из времени в формате UTC в местное время, вызвав метод <xref:System.DateTime.ToLocalTime%2A>. В следующем примере класс <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> используется для сериализации данных <xref:System.DateTime> в системе в США. Стандартный часовой пояс и десериализация в системе в США Центральная стандартная зона.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

<a name="serializing-datetime-and-time-zone-data"></a>
#### <a name="serializing-datetime-and-time-zone-data"></a>Сериализация данных DateTime и часовых поясов  

В предыдущих примерах предполагается, что значения <xref:System.DateTime> выражаются как местное время. Код преобразует значения между временем в формате UTC и местным временем, чтобы они отражали один и тот же момент времени в исходной и целевой системах. значения <xref:System.DateTime> могут также отражать некоторое время в часовом поясе, отличном от Local и UTC. Так как структура <xref:System.DateTime> не учитывает часовой пояс, необходимо сериализовать как значение <xref:System.DateTime>, так и объект <xref:System.TimeZoneInfo>, представляющий его часовой пояс. Создайте тип, поля которого содержат значения <xref:System.DateTime> и его часовой пояс. В следующем примере определяется структура `DateWithTimeZone`.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Структура `DateWithTimeZone` используется в следующих двух примерах, которые сериализуются и десериализует массив объектов `DateWithTimeZone`. Вы можете просмотреть источник всего набора примеров из этой статьи либо в [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) , либо [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) из репозитория документов на сайте GitHub.
  
С помощью структуры `DateWithTimeZone` можно сохранить дату и время вместе со сведениями о часовом поясе. В следующем примере класс <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> используется для сериализации массива объектов `DateWithTimeZone`.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

В следующем примере вызывается метод <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> для десериализации.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Сравнение даты и времени TimeSpan  

Типы значений <xref:System.DateTime> и <xref:System.TimeSpan> отличаются тем, что <xref:System.DateTime> представляет собой мгновенное время, тогда как <xref:System.TimeSpan> представляет интервал времени. Можно вычесть один экземпляр <xref:System.DateTime> из другого, чтобы получить объект <xref:System.TimeSpan>, представляющий интервал времени между ними. Можно также добавить положительный <xref:System.TimeSpan> в текущий <xref:System.DateTime>, чтобы получить значение <xref:System.DateTime>, которое представляет будущую дату.  
  
Можно добавить или вычесть интервал времени из объекта <xref:System.DateTime>. Интервалы времени могут быть отрицательными или положительными и могут выражаться в таких единицах, как такты, секунды или как объект <xref:System.TimeSpan>.  

### <a name="comparing-for-equality-within-tolerance"></a>Сравнение равенства в пределах допустимого диапазона

Сравнения на равенство для значений <xref:System.DateTime> являются точными. Это означает, что два значения должны быть выражены как одинаковое число тактов, которое будет считаться равным. Такая точность часто не требуется или даже неверно для многих приложений. Часто требуется протестировать, если объекты <xref:System.DateTime> **примерно равны**. 

В следующем примере показано, как сравнить приблизительно эквивалентное значение <xref:System.DateTime>. Он принимает небольшое поле разности при объявлении их равными.  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Вопросы COM-взаимодействия  

Значение <xref:System.DateTime>, которое передается в COM-приложение, затем передается обратно в управляемое приложение, называется циклическим обращением. Однако значение <xref:System.DateTime>, которое указывает только время, не принимает циклические пути, как вы можете ожидать.  
  
Если вы циклически пройдете только время, например 3 P.M., последняя Дата и время — 30 декабря 1899 Н.Э.. в 3:00 P.M., а не Январь, 1, 0001 Н.Э. в 3:00 P.M. Для .NET Framework и COM предполагается Дата по умолчанию, если указано только время. Однако в системе COM предполагается базовая дата 30 декабря 1899 года нашей эры, а .NET Framework предполагается базовая дата Январь, 1, 0001 Н.Э.  
  
Когда из .NET Framework в COM передается только время, выполняется специальная обработка, которая преобразует время в формат, используемый моделью COM. Если в .NET Framework передается только время из COM, то специальная обработка не выполняется, так как это приведет к повреждению допустимой даты и времени до 30 декабря 1899. Если дата начала круговой путь из COM, то .NET Framework и COM сохраняют дату.  
  
Поведение .NET Framework и COM означает, что если в приложении в круговых поездках a <xref:System.DateTime> указано только время, приложение должно не забыть изменить или проигнорировать ошибочную дату из последнего объекта <xref:System.DateTime>.  
     
 ]]></format>
    </remarks>
    <threadsafe>Все члены этого типа являются потокобезопасными. Члены, которые могут изменить состояние экземпляра, в действительности возвращают новый экземпляр, инициализированный новым значением. Как с любым другим типом, чтение и запись общей переменной, которая содержит экземпляр этого типа, должны быть защищены блокировкой для обеспечения потокобезопасности.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Выбор между типами DateTime, DateTimeOffset, TimeSpan и TimeZoneInfo</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Работа с календарями</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">Пример: служебная программа форматирования .NET CoreC#WinForms ()</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">Пример: служебная программа форматирования для .NET Core WinForms (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Дата и время, представленные в виде нескольких 100-наносекундных интервалов, завершившихся с момента 00:00:00.000 1 января 0001 г. по григорианскому календарю.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным числом тактов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  
  
   
  
## Examples  
 В следующем примере демонстрируется один из конструкторов <xref:System.DateTime>.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="ticks" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ticks">Дата и время, представленные в виде нескольких 100-наносекундных интервалов, завершившихся с момента 00:00:00.000 1 января 0001 г. по григорианскому календарю.</param>
        <param name="kind">Одно из значений перечисления, указывающее, какое время задает параметр <paramref name="ticks" />: локальное, универсальное глобальное (UTC), или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным числом тактов и временем UTC или местным временем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="ticks" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца и дня.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует `year`, `month` и `day` как год, месяц и день в григорианском календаре. Чтобы создать экземпляр значения <xref:System.DateTime> с помощью года, месяца и дня в другом календаре, вызовите конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>.  
  
 Время суток для результирующего <xref:System.DateTime> — полночь (00:00:00). Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> используется для создания экземпляра значения <xref:System.DateTime>. В примере также показано, что эта перегрузка создает значение <xref:System.DateTime>, компонент времени которого равен полночи (или 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
- или - 
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
-или- 
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <paramref name="calendar" />).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <paramref name="calendar" />).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <paramref name="year" />, <paramref name="month" /> и <paramref name="day" />.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным годом, месяцем и днем для указанного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время суток для результирующего <xref:System.DateTime> — полночь (00:00:00). Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Допустимые значения для `year`, `month` и `day` зависят от `calendar`. Если указанная дата и время не могут быть выражены с помощью `calendar`, возникает исключение.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Пространство имен <xref:System.Globalization> содержит несколько календарей, включая <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> вызывается дважды для создания экземпляра двух значений <xref:System.DateTime>. Первый вызов создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.PersianCalendar>. Так как персидский календарь не может быть назначен в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов методов <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. Второй вызов конструктора создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.HijriCalendar>. В примере текущий язык и региональные параметры переменяются на арабский (Сирия), а текущий календарь по умолчанию для текущего языка и региональных параметров изменяется на календарь Хиджра. Так как Хиджра является календарем текущего языка и региональных параметров по умолчанию, метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует его для форматирования даты. При восстановлении предыдущего текущего языка и региональных параметров (на английском языке (США)) метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует григорианский календарь по умолчанию текущего языка и региональных параметров для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> не принадлежит к диапазону, поддерживаемому <paramref name="calendar" />.  
  
- или - 
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
- или - 
 <paramref name="day" /> меньше 1 или больше числа дней в <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным годом, месяцем, днем, часом, минутой и секундой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Этот конструктор интерпретирует @ no__t-0, `month` и `day` как год, месяц и день в григорианском календаре. Чтобы создать экземпляр значения <xref:System.DateTime> с помощью года, месяца и дня в другом календаре, вызовите конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%2A> используется для создания экземпляра значения <xref:System.DateTime>.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
- или - 
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
-или- 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
- или - 
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
-или- 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
-или- 
 Параметр <paramref name="second" /> меньше 0 или больше 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="kind">Одно из значений перечисления, указывающее, что задают параметры <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> и <paramref name="second" />: локальное время, универсальное глобальное время (UTC), или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца, дня, часа, минуты и секунды, а также временем UTC или местным временем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует @ no__t-0, `month` и `day` как год, месяц и день в григорианском календаре. Чтобы создать экземпляр значения <xref:System.DateTime> с помощью года, месяца и дня в другом календаре, вызовите конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> используется для создания экземпляра значения <xref:System.DateTime>.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
-или- 
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
- или - 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
-или- 
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
- или - 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
- или - 
 Параметр <paramref name="second" /> меньше 0 или больше 59.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <paramref name="calendar" />).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <paramref name="calendar" />).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <paramref name="year" />, <paramref name="month" /> и <paramref name="day" />.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> указанным годом, месяцем, днем, часом, минутой и секундой для заданного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Допустимые значения для `year`, `month` и `day` зависят от `calendar`. Если указанная дата и время не могут быть выражены с помощью `calendar`, возникает исключение.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Пространство имен <xref:System.Globalization> содержит несколько календарей, включая <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> вызывается дважды для создания экземпляра двух значений <xref:System.DateTime>. Первый вызов создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.PersianCalendar>. Так как персидский календарь не может быть назначен в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов методов <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. Второй вызов конструктора создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.HijriCalendar>. В примере текущий язык и региональные параметры переменяются на арабский (Сирия), а текущий календарь по умолчанию для текущего языка и региональных параметров изменяется на календарь Хиджра. Так как Хиджра является календарем текущего языка и региональных параметров по умолчанию, метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует его для форматирования даты. При восстановлении предыдущего текущего языка и региональных параметров (на английском языке (США)) метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует григорианский календарь по умолчанию текущего языка и региональных параметров для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> не принадлежит к диапазону, поддерживаемому <paramref name="calendar" />.  
  
- или - 
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
-или- 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
- или - 
 <paramref name="hour" /> меньше 0 или больше 23. 
- или - 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
-или- 
 Параметр <paramref name="second" /> меньше 0 или больше 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным годом, месяцем, днем, часом, минутой, секундой и миллисекундой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует @ no__t-0, `month` и `day` как год, месяц и день в григорианском календаре. Чтобы создать экземпляр значения <xref:System.DateTime> с помощью года, месяца и дня в другом календаре, вызовите конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>.  
  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> используется для создания экземпляра значения <xref:System.DateTime>.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
- или - 
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
- или - 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
- или - 
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
- или - 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
-или- 
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
- или - 
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="7" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <param name="kind">Одно из значений перечисления, указывающее, что задают параметры <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> и <paramref name="millisecond" />: локальное время, универсальное глобальное время (UTC), или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца, дня, часа, минуты, секунды и миллисекунды, а также временем UTC или местным временем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует @ no__t-0, `month` и `day` как год, месяц и день в григорианском календаре. Чтобы создать экземпляр значения <xref:System.DateTime> с помощью года, месяца и дня в другом календаре, вызовите конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> используется для создания экземпляра значения <xref:System.DateTime>.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
- или - 
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
- или - 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
-или- 
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
-или- 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
- или - 
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
- или - 
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <paramref name="calendar" />).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <paramref name="calendar" />).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <paramref name="year" />, <paramref name="month" /> и <paramref name="day" />.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> указанным годом, месяцем, днем, часом, минутой, секундой и миллисекундой для заданного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Допустимые значения для `year`, `month` и `day` зависят от `calendar`. Если указанная дата и время не могут быть выражены с помощью `calendar`, возникает исключение.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Пространство имен <xref:System.Globalization> содержит несколько календарей, включая <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> вызывается дважды для создания экземпляра двух значений <xref:System.DateTime>. Первый вызов создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.PersianCalendar>. Так как персидский календарь не может быть назначен в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов методов <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. Второй вызов конструктора создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.HijriCalendar>. В примере текущий язык и региональные параметры переменяются на арабский (Сирия), а текущий календарь по умолчанию для текущего языка и региональных параметров изменяется на календарь Хиджра. Так как Хиджра является календарем текущего языка и региональных параметров по умолчанию, метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует его для форматирования даты. При восстановлении предыдущего текущего языка и региональных параметров (на английском языке (США)) метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует григорианский календарь по умолчанию текущего языка и региональных параметров для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> не принадлежит к диапазону, поддерживаемому <paramref name="calendar" />.  
  
-или- 
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
- или - 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
- или - 
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
-или- 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
- или - 
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
- или - 
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <paramref name="calendar" />).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <paramref name="calendar" />).</param>
        <param name="day">День (от 1 до количества дней в <paramref name="month" />).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <paramref name="year" />, <paramref name="month" /> и <paramref name="day" />.</param>
        <param name="kind">Одно из значений перечисления, указывающее, что задают параметры <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> и <paramref name="millisecond" />: локальное время, универсальное глобальное время (UTC), или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца, дня, часа, минуты, секунды и миллисекунды, а также временем UTC или местным временем для заданного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Допустимые значения параметров `year`, `month` и `day` зависят от параметра `calendar`. Если указанная дата и время не могут быть выражены с помощью `calendar`, возникает исключение.  
  
 Для приложений, в которых важна переносимость данных даты и времени или ограниченная степень осведомленности о часовых поясах, можно использовать соответствующий конструктор <xref:System.DateTimeOffset>.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Пространство имен <xref:System.Globalization> содержит несколько календарей, включая <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере конструктор <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> вызывается дважды для создания экземпляра двух значений <xref:System.DateTime>. Первый вызов создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.PersianCalendar>. Так как персидский календарь не может быть назначен в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов методов <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. Второй вызов конструктора создает экземпляр значения <xref:System.DateTime> с помощью объекта <xref:System.Globalization.HijriCalendar>. В примере текущий язык и региональные параметры переменяются на арабский (Сирия), а текущий календарь по умолчанию для текущего языка и региональных параметров изменяется на календарь Хиджра. Так как Хиджра является календарем текущего языка и региональных параметров по умолчанию, метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует его для форматирования даты. При восстановлении предыдущего текущего языка и региональных параметров (на английском языке (США)) метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> использует григорианский календарь по умолчанию текущего языка и региональных параметров для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> не принадлежит к диапазону, поддерживаемому <paramref name="calendar" />.  
  
-или- 
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
- или - 
 <paramref name="day" /> меньше 1 или больше числа месяцев в <paramref name="month" />.  
  
- или - 
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
- или - 
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
-или- 
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
-или- 
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Положительный или отрицательный интервал времени.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий значение заданного объекта <see cref="T:System.TimeSpan" /> к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и интервала времени, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать метод <xref:System.DateTime.Add%2A>, чтобы добавить в одну операцию более одного интервала времени (дни, часы, минуты, секунды или миллисекунды). Поведение этого метода идентично поведению оператора сложения. Структура <xref:System.DateTime> также поддерживает специализированные методы сложения (такие как <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A> и <xref:System.DateTime.AddMinutes%2A>) для каждого интервала времени.  
  
 В методе <xref:System.DateTime.Add%2A> учитывается високосный год и число дней в месяце при выполнении арифметических операций с датами.  
  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции. Свойство <xref:System.DateTime.Kind%2A> нового экземпляра <xref:System.DateTime> совпадает с свойством текущего экземпляра.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.Add%2A>. Он вычисляет день недели 36 дней (864 часов), начиная с этого момента.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных дней. Параметр <paramref name="value" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число дней к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества дней, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Дробная часть `value` представляет собой дробную часть дня. Например, 4,5 эквивалентно 4 дням, 12 часам, 0 минутам, 0 секундам, 0 миллисекундам и 0 тактов.  
  
 Параметр `value` округляется до ближайшей миллисекунды.  
  
 В методе <xref:System.DateTime.AddDays%2A> учитывается високосный год и число дней в месяце при выполнении арифметических операций с датами.  
  
   
  
## Examples  
 В следующем примере метод <xref:System.DateTime.AddDays%2A> используется для определения дня недели 36 дней после текущей даты.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных часов. Параметр <paramref name="value" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число часов к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества часов, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции. Свойство <xref:System.DateTime.Kind%2A> возвращаемого объекта <xref:System.DateTime> совпадает со свойством `value`.  
  
 Дробная часть `value` представляет собой дробную часть часа. Например, 4,5 эквивалентно 4 часам, 30 минутам, 0 секундам, 0 миллисекундам и 0 тактам.  
  
 Параметр `value` округляется до ближайшей миллисекунды.  
  
 Преобразование интервалов времени меньше часа в дробную часть может привести к утрате точности, если результат является незавершающим повторяющимся десятичным числом. (Например, одна минута составляет 0,016667 часа.) Если это проблематично, можно использовать метод <xref:System.DateTime.Add%2A>, который позволяет указать более одного типа интервала времени в вызове одного метода и устраняет необходимость преобразования временных интервалов в дробные части часа.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.AddHours%2A> для добавления числа целых и дробных значений к дате и времени. Кроме того, в нем показана вероятность потери точности, вызванной передачей метода значения, включающего в себя дробный компонент.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных миллисекунд. Параметр <paramref name="value" /> может быть положительным или отрицательным. Заметьте, что это значение округляется до ближайшего целого числа.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число миллисекунд к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества миллисекунд, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Дробная часть `value` представляет собой дробную часть миллисекунды. Например, 4,5 является эквивалентом 4 миллисекунд и 5000 тактов, где одна миллисекунда = 10000 тактов.  
  
 Параметр `value` округляется до ближайшего целого числа.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.AddMilliseconds%2A> для добавления одной миллисекунды и 1,5 миллисекунды в значение <xref:System.DateTime>. Затем он отображает каждое новое значение и отображает разницу между ним и исходным значением. Разница отображается как в виде интервала времени, так и в виде числа тактов. В примере становится ясно, что одна миллисекунда равна 10 000 тактов. Он также показывает, что доли миллисекунд округляются перед выполнением сложения. значение <xref:System.DateTime>, полученное в результате добавления 1,5 миллисекунд к исходной дате, равно 2 миллисекундам, превышающим исходную дату.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных минут. Параметр <paramref name="value" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число минут к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества минут, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Дробная часть `value` представляет собой дробную часть минуты. Например, 4,5 соответствует 4 минутам, 30 секундам, 0 миллисекундам и 0 тактов.  
  
 Параметр `value` округляется до ближайшей миллисекунды.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.AddMinutes%2A> для добавления числа целых и дробных значений к дате и времени.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Число месяцев. Параметр <paramref name="months" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число месяцев к значению данного экземпляра.</summary>
        <returns>Объект, значением которого является сумма даты и времени, представленных этим экземпляром, и значения, представленного параметром <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого объекта <xref:System.DateTime>. Вместо этого возвращается новый объект <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Метод <xref:System.DateTime.AddMonths%2A> вычисляет полученный месяц и год, принимая во внимание високосные годы и число дней в месяце, а затем корректирует день результирующего объекта <xref:System.DateTime>. Если итоговый день не является допустимым днем в результирующем месяце, используется последний допустимый день в результирующем месяце. Например, 31 марта + 1 месяц = 30 апреля и 31 марта-1 месяц = Февраль 28 за невисокосный год и 29 февраля для високосного года.  
  
 Время дня для результирующего объекта <xref:System.DateTime> остается таким же, как и у данного экземпляра.  
  
   
  
## Examples  
 В следующем примере между нулем и пятнадцать месяцами добавляется к последнему дню декабря 2015. В этом случае метод Аддмонсс возвращает дату последнего дня каждого месяца и успешно обрабатывает високосные годы.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.  
  
-или- 
 Параметр <paramref name="months" /> имеет значение меньше –120 000 или больше 120 000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных секунд. Параметр <paramref name="value" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число секунд к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества секунд, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Дробная часть `value` представляет собой дробную часть секунды. Например, 4,5 соответствует 4 секундам, 500 миллисекундам и 0 тактам.  
  
 Параметр `value` округляется до ближайшей миллисекунды.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.AddSeconds%2A> для добавления 30 секунд и количества секунд в один день для значения <xref:System.DateTime>. Затем он отображает каждое новое значение и отображает разницу между ним и исходным значением. Разница отображается как в виде интервала времени, так и в виде числа тактов.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Число 100-наносекундных тактов. Параметр <paramref name="value" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число тактов к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и времени, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Число лет. Параметр <paramref name="value" /> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число лет к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества лет, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этого объекта <xref:System.DateTime>. Вместо этого возвращается новый объект <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Метод <xref:System.DateTime.AddYears%2A> вычисляет итоговый год, принимая во внимание високосные годы. Месяц и время дня в результирующем объекте <xref:System.DateTime> остаются теми же, что и у этого экземпляра.  
  
 Если текущий экземпляр представляет високосный день в високосном году, возвращаемое значение зависит от целевой даты:  
  
-   Если `value` @ no__t-1 @ no__t-2 также является високосным годом, возвращаемое значение представляет високосный день в этом году. Например, если четыре года добавляются к 29 февраля 2012, то возвращается дата 29 февраля 2016.  
  
-   Если `value` @ no__t-1 @ no__t-2 не является високосным годом, возвращаемое значение представляет день до високосного дня в этом году. Например, если один год добавляется 29 февраля 2012, то возвращается дата 28 февраля 2013.  
  
 В следующем примере показано использование метода <xref:System.DateTime.AddYears%2A> со значением <xref:System.DateTime>, представляющим день високосного года. Он выводит дату за пятнадцать лет до пятнадцати лет, которые следуют 29 февраля 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> или итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый сравниваемый объект.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Сравнивает два экземпляра объекта <see cref="T:System.DateTime" /> и возвращает целое число, которое показывает, предшествует ли первый экземпляр второму, совпадает или расположен позже.</summary>
        <returns>Число со знаком, обозначающее относительные значения параметров <paramref name="t1" /> и <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Тип значения 
 </term><description> Условие 
 </description></listheader><item><term> Меньше нуля 
 </term><description>Момент, указанный в параметре <paramref name="t1" />, наступает раньше, чем момент, указанный в параметре <paramref name="t2" />.  
  
 </description></item><item><term> Нуль 
 </term><description>Параметр <paramref name="t1" /> совпадает с параметром <paramref name="t2" />.  
  
 </description></item><item><term> Больше нуля 
 </term><description>Момент, указанный в параметре <paramref name="t1" />, наступает позже, чем момент, указанный в параметре <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить связь `t1` с `t2`, метод <xref:System.DateTime.Compare%2A> сравнивает свойство <xref:System.DateTime.Ticks%2A> `t1` и `t2`, но игнорирует свойство <xref:System.DateTime.Kind%2A>. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.Compare%2A>.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сравнивает значение данного экземпляра с заданным значением <see cref="T:System.DateTime" /> и указывает, когда наступает момент, заданный в данном экземпляре: раньше, позже или одновременно с моментом, заданным значением <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Две перегрузки метода <xref:System.DateTime.CompareTo%2A> возвращают число со знаком, которое указывает относительное значение данного экземпляра и аргумента `value`, как показано в следующей таблице.  
  
|Значение|Описание|  
|-----------|-----------------|  
|Меньше нуля|Данный экземпляр раньше `value`.|  
|Нуль|Данный экземпляр равен `value`.|  
|Больше нуля|Этот экземпляр позже `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Объект, сравниваемый с текущим экземпляром.</param>
        <summary>Сравнивает значение данного экземпляра с заданным значением <see cref="T:System.DateTime" /> и возвращает целочисленное значение, указывающее, когда наступает момент, заданный в данном экземпляре: раньше, позже или одновременно с моментом, заданным значением <see cref="T:System.DateTime" />.</summary>
        <returns>Число со знаком, представляющее результат сравнения значений этого экземпляра и параметра <paramref name="value" />.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Описание 
 </description></listheader><item><term> Меньше нуля 
 </term><description> Данный экземпляр раньше <paramref name="value" />.  
  
 </description></item><item><term> Нуль 
 </term><description> Данный экземпляр равен <paramref name="value" />.  
  
 </description></item><item><term> Больше нуля 
 </term><description> Этот экземпляр позже <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить связь текущего экземпляра с `value`, метод <xref:System.DateTime.CompareTo%2A> сравнивает свойство <xref:System.DateTime.Ticks%2A> текущего экземпляра и `value`, но игнорирует свойство <xref:System.DateTime.Kind%2A>.  Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать, сравнив значения свойств <xref:System.DateTime.Kind%2A>.  
  
 Этот метод реализует интерфейс <xref:System.IComparable%601?displayProperty=nameWithType> и работает немного лучше, чем перегрузка метода <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType>, поскольку ему не нужно преобразовывать параметр `value` в объект.  
  
   
  
## Examples  
 В следующем примере создаются три объекта <xref:System.DateTime>, один из которых представляет сегодняшнюю дату, второй представляет дату в прошлом году, а третий — дату на один год в будущем. Затем он вызывает метод <xref:System.DateTime.CompareTo%28System.DateTime%29> и отображает результат сравнения.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">Сравниваемый упакованный объект или значение <see langword="null" />.</param>
        <summary>Сравнивает значение данного экземпляра с заданным объектом, содержащим заданное значение <see cref="T:System.DateTime" />, и возвращает целочисленное значение, указывающее, когда наступает момент, заданный в данном экземпляре: раньше, позже или одновременно с моментом, заданным значением <see cref="T:System.DateTime" />.</summary>
        <returns>Знаковое число, представляющее относительные значения этого экземпляра и параметра <paramref name="value" />.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Описание 
 </description></listheader><item><term> Меньше нуля 
 </term><description> Данный экземпляр раньше <paramref name="value" />.  
  
 </description></item><item><term> Нуль 
 </term><description> Данный экземпляр равен <paramref name="value" />.  
  
 </description></item><item><term> Больше нуля 
 </term><description> Этот экземпляр позже <paramref name="value" />, или параметр <paramref name="value" /> имеет значение <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить связь текущего экземпляра с `value`, метод <xref:System.DateTime.CompareTo%2A> сравнивает свойство <xref:System.DateTime.Ticks%2A> текущего экземпляра и `value`, но игнорирует свойство <xref:System.DateTime.Kind%2A>. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать, сравнив значения свойств <xref:System.DateTime.Kind%2A>.  
  
 Любой экземпляр <xref:System.DateTime>, независимо от его значения, считается больше `null`.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.CompareTo%2A>.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> не является объектом <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компоненту даты этого экземпляра.</summary>
        <value>Новый объект с такой же датой, как этот экземпляр и значением времени, равным полуночи (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение свойства <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> равно тому же значению, что и у текущего экземпляра.  
  
 Поскольку тип <xref:System.DateTime> представляет обе даты и время в одном типе, важно избегать неправильной интерпретации даты, возвращаемой свойством <xref:System.DateTime.Date%2A>, как даты и времени.  
  
   
  
## Examples  
 В следующем примере используется свойство <xref:System.DateTime.Date%2A> для извлечения компонента даты <xref:System.DateTime> с его компонентом времени, имеющим значение 0 (или 0:00:00 или полночь). Также показано, что в зависимости от строки формата, используемой при отображении значения <xref:System.DateTime>, компонент времени может по-прежнему отображаться в форматированных выходных данных.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает день месяца, представленный этим экземпляром.</summary>
        <value>Компонент, представляющий день, выраженный как значение от 1 до 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Day%2A> всегда возвращает день месяца в григорианском календаре, даже если для текущего значения <xref:System.DateTime> был создан экземпляр с помощью другого календаря или если используемый по умолчанию календарь языка и региональных параметров текущего потока не является григорианского календарем. Чтобы получить день месяца определенной даты с помощью другого календаря, вызовите этот календарь <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType>. В следующем примере используется как свойство <xref:System.DateTime.Day%2A>, так и метод <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> для получения дня месяца для значения <xref:System.DateTime>, создаваемого с помощью календаря хиджра.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Аналогичным образом в следующем примере используется как свойство <xref:System.DateTime.Day%2A>, так и метод <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> для получения дня месяца, когда язык и региональные параметры текущего потока — AR-SA, в качестве календаря по умолчанию используется календарь Хиджра.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Day%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает день недели, представленный этим экземпляром.</summary>
        <value>Перечислимая константа, которая указывает на день недели для этого значения <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значения констант в перечислении <xref:System.DayOfWeek> в диапазоне от <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> до <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Если приведение к целому числу, его значение лежит в диапазоне от нуля (что означает <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) до шести (что означает <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Свойство <xref:System.DateTime.DayOfWeek%2A> возвращает перечисляемую константу. Он не отражает региональные и языковые параметры системы. Чтобы получить строку, представляющую локализованное название дня недели для определенной даты, вызовите одну из перегрузок метода <xref:System.DateTime.ToString%2A>, который включает параметр `format` и передайте его в строки настраиваемого формата `ddd` или `dddd`. Подробную информацию см. в разделе [Практическое руководство. Извлечение дня недели из конкретной даты](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md)  
  
   
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.DayOfWeek%2A> и перечисление <xref:System.DayOfWeek?displayProperty=nameWithType>.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает день года, представленный этим экземпляром.</summary>
        <value>Компонент, представляющий день года, выраженный как значение от 1 до 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.DayOfYear%2A> учитывает високосные годы при вычислении дня года. Значение свойства всегда отражает день года в григорианском календаре, независимо от текущего календаря языка и региональных параметров текущего потока. Чтобы получить день года в другом календаре, вызовите метод <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> этого календаря.  
  
   
  
## Examples  
 В следующем примере выводится день года 31 декабря в течение года 2010-2020 в григорианском календаре. Обратите внимание, что этот пример показывает, что 31 декабря — это 366th день года в високосных годах.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год.</param>
        <param name="month">Месяц (число в диапазоне от 1 до 12).</param>
        <summary>Возвращает число дней в указанном месяце указанного года.</summary>
        <returns>Число дней в <paramref name="month" /> для заданного <paramref name="year" />.  
  
Например, если параметр <paramref name="month" /> равен 2 для февраля, возвращаемым значением является 28 или 29 в зависимости от того, является ли <paramref name="year" /> високосным годом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.DaysInMonth%2A> всегда интерпретирует `month` и `year` как месяц и год григорианского календаря, даже если григорианский календарь не является текущим календарем текущего языка и региональных параметров. Чтобы получить количество дней в указанном месяце конкретного календаря, вызовите метод <xref:System.Globalization.Calendar.GetDaysInMonth%2A> этого календаря.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод <xref:System.DateTime.DaysInMonth%2A>, чтобы определить число дней в 2001 июля, Февраль 1998 (невисокосный год) и февраль 1996 (високосный год).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 В следующем примере отображается число дней в каждом месяце года, указанное в массиве целых чисел.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
- или - 
 Параметр <paramref name="year" /> меньше 1 или больше 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, указывающее, имеют ли два объекта <see cref="T:System.DateTime" /> или экземпляр <see cref="T:System.DateTime" /> и другой объект либо <see cref="T:System.DateTime" /> одинаковые значения.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Объект, сравниваемый с этим экземпляром.</param>
        <summary>Возвращает значение, указывающее, равно ли значение данного экземпляра значению заданного экземпляра <see cref="T:System.DateTime" />.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="value" /> равен значению этого экземпляра; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущий экземпляр и `value` равны, если их значения свойств <xref:System.DateTime.Ticks%2A> равны. Значения свойств <xref:System.DateTime.Kind%2A> не учитываются при проверке на равенство.  
  
 Этот метод реализует интерфейс <xref:System.IEquatable%601?displayProperty=nameWithType> и работает немного лучше, чем метод <xref:System.DateTime.Equals%2A>, поскольку параметр `value` не нужно преобразовывать в объект.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.Equals%2A>.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, сравниваемый с этим экземпляром.</param>
        <summary>Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="value" /> является экземпляром типа <see cref="T:System.DateTime" /> и равен значению данного экземпляра; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущий экземпляр и `value` равны, если их значения свойств <xref:System.DateTime.Ticks%2A> равны. Значения свойств <xref:System.DateTime.Kind%2A> не учитываются при проверке на равенство.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.Equals%2A>.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Возвращает значение, указывающее, содержат ли два экземпляра <see cref="T:System.DateTime" /> одно и то же значение даты и времени.</summary>
        <returns>Значение <see langword="true" />, если два значения равны; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` и `t2` равны, если их значения свойств <xref:System.DateTime.Ticks%2A> равны. Значения свойств <xref:System.DateTime.Kind%2A> не учитываются при проверке на равенство.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.Equals%2A>.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateData">64-разрядное целое число со знаком, кодирующее свойство <see cref="P:System.DateTime.Kind" /> в 2-разрядное поле и свойство <see cref="P:System.DateTime.Ticks" /> в 62-разрядное поле.</param>
        <summary>Десериализует 64-битовое значение и воссоздает исходный сериализованный объект <see cref="T:System.DateTime" />.</summary>
        <returns>Объект, который эквивалентен объекту <see cref="T:System.DateTime" />, сериализованному методом <see cref="M:System.DateTime.ToBinary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод <xref:System.DateTime.ToBinary%2A>, чтобы преобразовать значение текущего объекта <xref:System.DateTime> в двоичное значение. Затем используйте двоичное значение и метод <xref:System.DateTime.FromBinary%2A> для повторного создания исходного объекта <xref:System.DateTime>.  
  
> [!IMPORTANT]
>  В некоторых случаях значение <xref:System.DateTime>, возвращаемое методом <xref:System.DateTime.FromBinary%2A>, не идентично исходному значению <xref:System.DateTime>, переданному в метод <xref:System.DateTime.ToBinary%2A>. Дополнительные сведения см. в следующем разделе "Настройка местного времени".  
  
## <a name="local-time-adjustment"></a>Настройка местного времени  
 Местное время, которое представляет собой время в формате UTC, настраивается на местный часовой пояс, представлено структурой <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого имеет значение <xref:System.DateTimeKind.Local>. При восстановлении локального значения <xref:System.DateTime> из двоичного представления, созданного методом <xref:System.DateTime.ToBinary%2A>, метод <xref:System.DateTime.FromBinary%2A> может изменить повторно созданное значение так, чтобы оно не равнялось исходному значению. Это может произойти в следующих случаях.  
  
-   Если локальный объект <xref:System.DateTime> сериализуется в один часовой пояс с помощью метода <xref:System.DateTime.ToBinary%2A>, а затем десериализуется в другом часовом поясе методом <xref:System.DateTime.FromBinary%2A>, местное время, представленное полученным объектом <xref:System.DateTime>, автоматически корректируется до второго часового пояса.  
  
     Например, рассмотрим объект <xref:System.DateTime>, представляющий местное время в 3 вечера. Приложение, которое выполняется в США В тихоокеанском часовом поясе для преобразования объекта <xref:System.DateTime> в двоичное значение используется метод <xref:System.DateTime.ToBinary%2A>. Другое приложение, которое выполняется в США В Восточном часовом поясе используется метод <xref:System.DateTime.FromBinary%2A> для преобразования двоичного значения в новый объект <xref:System.DateTime>. Значение нового объекта <xref:System.DateTime> равно 6 P.M., что представляет тот же момент времени, что и исходное 3-часовое значение, но корректируется на местное время в Восточном часовом поясе.  
  
-   Если двоичное представление значения Local <xref:System.DateTime> представляет недопустимое время в местном часовом поясе системы, в которой вызывается <xref:System.DateTime.FromBinary%2A>, время корректируется так, чтобы оно было допустимым.  
  
     Например, переход со стандартного времени на переход на летнее время происходит в тихоокеанском часовом поясе США 14 марта 2010 г. в 2:00 утра, когда время увеличивается на час, до 3:00 утра. Этот часовой интервал является недопустимым временем, то есть интервалом времени, который не существует в этом часовом поясе. В следующем примере показано, что когда время, попадающее в этот диапазон, преобразуется в двоичное значение методом <xref:System.DateTime.ToBinary%2A>, а затем восстанавливается методом <xref:System.DateTime.FromBinary%2A>, исходное значение корректируется на допустимое время. Можно определить, может ли определенное значение даты и времени изменяться путем передачи его в метод <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>, как показано в примере.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Рекомендации по версиям  
 Начиная с версии .NET Framework 2,0, структура @no__t 0 состоит из поля закрытого типа, которое указывает, является ли указанное время локальным временем, всеобщим скоординированным временем (UTC) или нет, сцеплением с частным полем Tick, которое содержит число 100-наносекундных тактов, определяющих дату и время. Доступ к количеству тактов можно получить с помощью свойства <xref:System.DateTime.Ticks%2A>, и поле Секинд можно получить с помощью свойства <xref:System.DateTime.Kind%2A>.  
  
 До .NET Framework 2,0, если объект <xref:System.DateTime> был сериализован вручную вместо использования интерфейса сериализации, такого как <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, необходимо сериализовать только данные тактов в <xref:System.DateTime>. Начиная с .NET Framework 2,0, необходимо также сериализовать данные типа.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="dateData" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Временная характеристика файла Windows, выраженная в тактах.</param>
        <summary>Преобразует заданную временную характеристику файла Windows в ее эквивалент по местному времени.</summary>
        <returns>Объект, представляющий местное время, эквивалентное дате и времени, которые определяются параметром <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время файла Windows — это 64-разрядное значение, представляющее количество интервалов 100-наносекундных, истекших с 12:00 полуночи, 1 января 1601 г. ЭРЫ Время в формате UTC. Windows использует время файла для записи, когда приложение создает, обращается к файлу или выполняет запись в него.  
  
 Параметр `fileTime` задает время файла, выраженное в тактах 100-наносекундных времени.  
  
 Начиная с версии .NET Framework 2,0, возвращаемое значение — это <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.FromFileTime%2A>.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> меньше 0 или представляет время больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage"><para>Обычно метод <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> восстанавливает значение <see cref="T:System.DateTime" />, сохраненное методом <see cref="M:System.DateTime.ToFileTime" />. Однако эти два значения могут отличаться при следующих условиях. 
— Если сериализация и десериализация значения <see cref="T:System.DateTime" /> происходят в разных часовых поясах. Например, если значение <see cref="T:System.DateTime" /> со значением времени 12:30 P.M. в США Восточный часовой пояс сериализуется, а затем десериализуется в США. Тихоокеанское время, исходное значение 12:30 P.M. настраивается до 9:30 утра. чтобы отразить разницу между двумя часовыми поясами.  
  
— Если сериализованное значение <see cref="T:System.DateTime" /> представляет недопустимое время в местном часовом поясе. В этом случае метод <see cref="M:System.DateTime.ToFileTime" /> корректирует восстановленное значение <see cref="T:System.DateTime" />, чтобы оно обозначает допустимое время в местном часовом поясе.  
  
Например, переход с зимнего времени на летнее время происходит в США. Тихоокеанское значение часового пояса 14 марта 2010 г. в 2:00 утра, когда время увеличивается на час, до 3:00 утра Этот часовой интервал является недопустимым временем, то есть интервалом времени, который не существует в этом часовом поясе. В следующем примере показано, что когда время, попадающее в этот диапазон, преобразуется в длинное целое число с помощью метода <see cref="M:System.DateTime.ToFileTime" />, а затем восстанавливается методом <see cref="M:System.DateTime.FromFileTime(System.Int64)" />, исходное значение корректируется на допустимое время. Можно определить, может ли определенное значение даты и времени изменяться путем передачи его в метод <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />, как показано в примере.  
  
[!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Временная характеристика файла Windows, выраженная в тактах.</param>
        <summary>Преобразует заданную временную характеристику файла Windows в ее UTC-эквивалент.</summary>
        <returns>Объект, представляющий время в формате UTC, эквивалентное дате и времени, которые определяются параметром <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время файла Windows — это 64-разрядное значение, представляющее количество интервалов 100-наносекундных, истекших с 12:00 полуночи, 1 января 1601 г. ЭРЫ Время в формате UTC. Windows использует время файла для записи, когда приложение создает, обращается к файлу или выполняет запись в него.  
  
 Параметр `fileTime` задает время файла, выраженное в тактах 100-наносекундных времени.  
  
 Начиная с версии .NET Framework 2,0, возвращаемое значение — это <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> меньше 0 или представляет время больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d">Значение даты OLE-автоматизации.</param>
        <summary>Возвращает объект <see cref="T:System.DateTime" />, эквивалентный заданному значению даты OLE-автоматизации.</summary>
        <returns>Объект, представляющий дату и время, которые совпадают с датой и временем, определяемыми параметром <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `d` представляет собой число с плавающей запятой двойной точности, представляющее дату в виде числа дней до или после базовой даты, полночь 30 декабря 1899. Знак и целая часть `d` кодируют дату как положительное или отрицательное смещение дня от 30 декабря 1899, а абсолютное значение дробной части `d` Кодирует время суток как часть смещения дня от полуночи. значение `d` должно находиться в диапазоне от минус 657435,0 до положительного 2958465,99999999.  
  
 Обратите внимание, что из-за способа кодирования дат существует два способа представления любого времени суток в 30 декабря 1899. Например,-0,5 и 0,5 в обоих случаях означают полночь 30 декабря 1899, поскольку смещение дня плюс или минус ноль дней от базовой даты по-прежнему является базовой датой, а смещение в половину дня от полуночи — полдень.  
  
 Дополнительные сведения о OLE-автоматизации см. в разделе @no__t – 0.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Дата не является допустимым значением даты OLE-автоматизации.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые стандартным форматом даты и времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Не следует рассчитывать, что несколько вызовов перегрузок <xref:System.DateTime.GetDateTimeFormats%2A> будут возвращать идентичные данные. В зависимости от конкретной перегрузки, данные, возвращаемые этим методом, могут измениться при изменении текущего языка и региональных параметров, пользователь переопределяет отдельные региональные параметры или обновляет данные о культуре системы.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые стандартным форматом даты и времени.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием одного из стандартных спецификаторов формата даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив строк, возвращаемый методом <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>, эквивалентен объединению массивов строк, возвращаемых отдельными вызовами метода <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> с "d", "строки формата D", "f", "F", "g", "G", "m", "o", "r", "u", "U" и "y". Дополнительные сведения об описателях стандартного формата см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения форматируется с использованием сведений из текущего языка и региональных параметров. Дополнительные сведения об особенностях форматирования для текущего языка и региональных параметров см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Поскольку в этом методе используются данные, зависящие от языка и региональных параметров, не следует рассчитывать на то, что несколько вызовов метода будут возвращать идентичные данные. Данные, возвращаемые этим методом, могут измениться в случае изменения текущего языка и региональных параметров, пользователь переопределяет отдельные региональные параметры или обновление данных о культуре системы.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>. Он отображает строковое представление даты, используя все возможные стандартные форматы даты и времени в текущем языке и региональных параметрах компьютера, в данном случае это en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 В примере отображаются следующие выходные данные:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Строка стандартного формата даты и времени.</param>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые указанным стандартным спецификатором формата даты и времени.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием стандартного спецификатора формата даты и времени <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `format` может быть любым из стандартных описателей формата даты и времени. К ним относятся d, D, f, F, g, G, M (или M), O (или O), R (или R), s, t, T, u, U и Y (или y). Дополнительные сведения см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения форматируется с использованием сведений из текущего языка и региональных параметров. Дополнительные сведения об особенностях форматирования для текущего языка и региональных параметров см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Поскольку в этом методе используются данные, зависящие от языка и региональных параметров, не следует рассчитывать на то, что несколько вызовов метода будут возвращать идентичные данные. Данные, возвращаемые этим методом, могут измениться в случае изменения текущего языка и региональных параметров, пользователь переопределяет отдельные региональные параметры или обновление данных о культуре системы.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.GetDateTimeFormats%28System.Char%29>. Он отображает строковое представление даты, используя спецификатор длинного формата даты ("D") для текущего языка и региональных параметров.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> не является допустимым символом стандартного спецификатора формата даты и времени.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, который представляет связанную с языком и региональными параметрами информацию о форматировании этого экземпляра.</param>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые стандартными спецификаторами формата даты и времени и указанными сведениями о форматировании, связанными с языком и региональными параметрами.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием одного из стандартных спецификаторов формата даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив строк, возвращаемый методом <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>, эквивалентен объединению массивов строк, возвращаемых отдельными вызовами метода <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> с "d", "строки формата D", "f", "F", "g", "G", "m", "o", "r", "u", "U" и "y". Дополнительные сведения об описателях стандартного формата см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения форматируется с использованием сведений, относящихся к языку и региональным параметрам, предоставленным `provider`.  
  
> [!IMPORTANT]
>  Поскольку в этом методе используются данные, зависящие от языка и региональных параметров, не следует рассчитывать на то, что несколько вызовов метода будут возвращать идентичные данные, если только `provider` является объектом <xref:System.Globalization.CultureInfo>, представляющим инвариантный язык и региональные параметры. Данные, возвращаемые этим методом, могут измениться, если пользователь переопределит индивидуальные региональные параметры `provider` или если обновление выполняется в региональные данные системы для `provider`.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>. Он отображает строковое представление даты, используя все возможные стандартные форматы даты и времени для языка и региональных параметров fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 В примере отображаются следующие выходные данные:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка формата даты и времени.</param>
        <param name="provider">Объект, который представляет связанную с языком и региональными параметрами информацию о форматировании этого экземпляра.</param>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые указанным стандартным спецификатором формата даты и времени и сведениями о форматировании, связанными с языком и региональными параметрами.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием одного из стандартных спецификаторов формата даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр format может быть любым из стандартных описателей формата даты и времени. К ним относятся d, D, f, F, g, G, M (или M), O (или O), R (или R), s, t, T, u, U и Y (или y). Дополнительные сведения см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения форматируется с использованием сведений, относящихся к языку и региональным параметрам, предоставленным `provider`.  
  
> [!IMPORTANT]
>  Поскольку в этом методе используются данные, зависящие от языка и региональных параметров, не следует рассчитывать на то, что несколько вызовов метода будут возвращать идентичные данные, если только `provider` является объектом <xref:System.Globalization.CultureInfo>, представляющим инвариантный язык и региональные параметры. Данные, возвращаемые этим методом, могут измениться, если пользователь переопределит индивидуальные региональные параметры `provider` или если обновление выполняется в региональные данные системы для `provider`.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29>. Он отображает строковые представления даты, используя описатель краткого формата даты ("d") для языка и региональных параметров fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> не является допустимым символом стандартного спецификатора формата даты и времени.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код данного экземпляра.</summary>
        <returns>Хэш-код в виде 32-битовым целым числом со знаком.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает <see cref="T:System.TypeCode" /> для типа значения <see cref="T:System.DateTime" />.</summary>
        <returns>Константа перечислимого типа, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент часа даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий час, выраженный как значение от 0 до 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение свойства <xref:System.DateTime.Hour%2A> всегда выражается в 24-часовом формате. Чтобы получить строку, представляющую час даты и времени, используя 12-часовой формат времени, вызовите метод <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> или <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> с описателем настраиваемого формата "h". Например:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Hour%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Указывает, попадает ли данный экземпляр объекта <see cref="T:System.DateTime" /> в диапазон летнего времени для текущего часового пояса.</summary>
        <returns>Значение <see langword="true" />, если значение свойства <see cref="P:System.DateTime.Kind" /> — <see cref="F:System.DateTimeKind.Local" /> или <see cref="F:System.DateTimeKind.Unspecified" /> и значение этого экземпляра <see cref="T:System.DateTime" /> находится в диапазоне летнего времени для локального часового пояса; значение <see langword="false" />, если <see cref="P:System.DateTime.Kind" /> — <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод определяет, попадает ли текущее значение <xref:System.DateTime> в диапазон летнего времени местного часового пояса, возвращаемый свойством <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Можно определить, поддерживает ли часовой пояс летнее время, извлекая значение его свойства <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType>. Для часовых поясов, использующих переход на летнее время, можно определить время перехода на летнее и обратное время, извлекая массив <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>, возвращаемый свойством <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> часового пояса.  
  
 Если текущее значение <xref:System.DateTime> представляет либо неоднозначное, либо недопустимое время в местном часовом поясе, метод возвращает значение `false`.  
  
 В системах [!INCLUDE[winxp](~/includes/winxp-md.md)] метод <xref:System.DateTime.IsDaylightSavingTime%2A> распознает только текущее правило коррекции при определении того, является ли текущий экземпляр летним временем. В результате метод может не точно сообщать о том, является ли текущий экземпляр летним временем для периодов до того, как действует текущее правило коррекции.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4-значный номер года.</param>
        <summary>Возвращает сведения о том, является ли указанный год високосным.</summary>
        <returns><see langword="true" />, если <paramref name="year" /> является високосным годом; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` указывается как 4-значное число с основанием 10; Например, 1996.  
  
 `year` всегда интерпретируется как год григорианского календаря. Чтобы определить, был ли определенный год високосным годом в другом календаре, вызовите этот объект календаря `IsLeapYear`.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.IsLeapYear%2A>, чтобы определить, какие годы между 1994 и 2014 — високосным годом. В примере также показан результат, когда для добавления года к високосному дню используется метод <xref:System.DateTime.AddYears%2A>.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, на каком времени основано время, представленное этим экземпляром: местном, UTC или ни на том, ни на другом.</summary>
        <value>Одно из значений перечисления, определяющее значение текущего времени. Значение по умолчанию — <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для свойства <xref:System.DateTime.Kind%2A> нового значения <xref:System.DateTime> можно явно задать определенное значение <xref:System.DateTimeKind>, вызвав метод <xref:System.DateTime.SpecifyKind%2A>.  
  
 Свойство <xref:System.DateTime.Kind%2A> позволяет четко отображать значение <xref:System.DateTime> в формате UTC или местное время. В отличие от этого, структура <xref:System.DateTimeOffset> может однозначно отражать любое время в любом часовом поясе как один момент времени.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.SpecifyKind%2A>, чтобы продемонстрировать, как свойство <xref:System.DateTime.Kind%2A> влияет на методы преобразования <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет наибольшее возможное значение типа <see cref="T:System.DateTime" />. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение этой константы эквивалентно 23:59:59.9999999 UTC, 31 декабря 9999 в григорианском календаре, точно 1 100-наносекундных такта до 00:00:00 UTC, 1 января, 10000.  
  
 Некоторые календари, например <xref:System.Globalization.ThaiBuddhistCalendar>, поддерживают верхний диапазон дат, более ранний, чем <xref:System.DateTime.MaxValue>. В таких случаях попытка доступа к <xref:System.DateTime.MaxValue> при назначении переменных или операции форматирования и анализа может вызвать исключение <xref:System.ArgumentOutOfRangeException>. Вместо получения значения <xref:System.DateTime.MaxValue?displayProperty=nameWithType> можно получить значение последней допустимой даты указанного языка и региональных параметров из свойства <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.DateTime> путем передачи его конструктора значение <xref:System.Int64>, представляющее число тактов. Перед вызовом конструктора этот пример гарантирует, что это значение больше или равно `DateTime.MinValue.Ticks` и меньше или равно `DateTime.MaxValue.Ticks`. В противном случае возникает исключение <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент миллисекунд для даты, представленной в данном экземпляре.</summary>
        <value>Компонент, представляющий миллисекунды, выраженный как значение от 0 до 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно отобразить строковое представление свойства <xref:System.DateTime.Millisecond%2A> с помощью описателя формата "fff". Например, следующий код отображает строку, содержащую количество миллисекунд в дате и времени на консоль.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Можно также отобразить компонент миллисекунд вместе с другими компонентами значения даты и времени с помощью описателя стандартного формата "o". Например:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Однако описатель формата "o" предназначен для отображения меньшего значения, чем для циклической обработки или хранения значений <xref:System.DateTime>. Можно также отобразить миллисекунды вместе с другими компонентами даты и времени, используя строку настраиваемого формата, как показано в следующем примере.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Millisecond%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент минуты даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий минуту, выраженный как значение от 0 до 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Minute%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет минимально допустимое значение типа <see cref="T:System.DateTime" />. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение этой константы эквивалентно 00:00:00.0000000 UTC, 1 января 0001 г. в григорианском календаре.  
  
 <xref:System.DateTime.MinValue> определяет дату и время, присвоенные неинициализированной переменной <xref:System.DateTime>. Это показано в следующем примере.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Свойства <xref:System.DateTime.MinValue> и <xref:System.DateTime.MaxValue> можно использовать, чтобы убедиться, что значение находится в поддерживаемом диапазоне, прежде чем передать его в конструктор <xref:System.DateTime>. Код в разделе "пример" иллюстрирует это использование.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.DateTime> путем передачи его конструктора значение <xref:System.Int64>, представляющее число тактов. Перед вызовом конструктора этот пример гарантирует, что это значение больше или равно `DateTime.MinValue.Ticks` и меньше или равно `DateTime.MaxValue.Ticks`. В противном случае возникает исключение <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент месяца даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий месяц, выраженный как значение от 1 до 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Month%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.DateTime" />, которому присвоены текущие дата и время данного компьютера, выраженные как местное время.</summary>
        <value>Объект, значение которого является текущим значением местной даты и времени.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Now%2A> возвращает значение <xref:System.DateTime>, представляющее текущую дату и время на локальном компьютере. Обратите внимание, что существует разница между значением <xref:System.DateTime>, которое представляет число тактов, истекших с полуночи 1 января 0001 г., и строковое представление этого значения <xref:System.DateTime>, которое выражает значение даты и времени в элементе формат, зависящий от языка и региональных параметров. Сведения о форматировании значений даты и времени см. в описании метода <xref:System.DateTime.ToString%2A>. В следующем примере показана короткая строка даты и времени в ряде форматов, зависящих от языка и региональных параметров.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 Разрешение этого свойства зависит от системного таймера, который зависит от базовой операционной системы. Оно может составлять от 0,5 до 15 миллисекунд. В результате повторные вызовы свойства <xref:System.DateTime.Now%2A> в коротком интервале времени, например в цикле, могут возвращать одно и то же значение.  
  
 Свойство <xref:System.DateTime.Now%2A> часто используется для измерения производительности. Однако в связи с низким разрешением оно не подходит для использования в качестве средства тестирования производительности. Лучшим вариантом является использование класса <xref:System.Diagnostics.Stopwatch>.  
  
 Начиная с версии .NET Framework 2,0, возвращаемое значение — это <xref:System.DateTime>, чье свойство <xref:System.DateTime.Kind%2A> возвращает <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Для получения текущей локальной даты и времени можно также использовать свойство <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType>. Это позволяет однозначно выразить местное время как один момент времени, который, в свою очередь, сделает значение времени переносимым на компьютеры.  
  
   
  
## Examples  
 В следующем примере используются свойства <xref:System.DateTime.Now%2A> и <xref:System.DateTime.UtcNow%2A> для получения текущей локальной даты и времени и текущей даты и времени в формате UTC. Затем он использует соглашения о форматировании для нескольких языков и региональных параметров для вывода строк вместе со значениями свойств <xref:System.DateTime.Kind%2A>.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Добавляемое значение даты и времени.</param>
        <param name="t">Добавляемый интервал времени.</param>
        <summary>Прибавляет указанный временной интервал к заданной дате и времени, возвращая новую дату и время.</summary>
        <returns>Объект, значение которого является суммой значений <paramref name="d" /> и <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Эквивалентным методом для этого оператора является <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 В следующем примере показан оператор сложения.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Первый из сравниваемых объектов.</param>
        <param name="d2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, равны ли два заданных экземпляра класса <see cref="T:System.DateTime" />.</summary>
        <returns>Значение <see langword="true" />, если параметры <paramref name="d1" /> и <paramref name="d2" /> представляют одинаковую дату и время; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор <xref:System.DateTime.op_Equality%2A> определяет, равны ли два значения <xref:System.DateTime>, сравнивая их число тактов. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 В следующем примере показан оператор равенства.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, является ли значение одного заданного объекта <see cref="T:System.DateTime" /> позже другого заданного объекта <see cref="T:System.DateTime" />.</summary>
        <returns>Значение <see langword="true" />, если значение <paramref name="t1" /> позже значения <paramref name="t2" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор <xref:System.DateTime.op_GreaterThan%2A> определяет связь между двумя значениями <xref:System.DateTime> путем сравнения их количества тактов. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, представляет ли один заданный <see cref="T:System.DateTime" /> дату и время, которое такое же или позже, чем другое заданное <see cref="T:System.DateTime" />.</summary>
        <returns>Значение <see langword="true" />, если <paramref name="t1" /> происходит одновременно или позже <paramref name="t2" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор <xref:System.DateTime.op_GreaterThanOrEqual%2A> определяет связь между двумя значениями <xref:System.DateTime> путем сравнения их количества тактов. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Первый из сравниваемых объектов.</param>
        <param name="d2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, являются ли два заданных экземпляра класса <see cref="T:System.DateTime" /> неравными.</summary>
        <returns>Значение <see langword="true" />, если параметры <paramref name="d1" /> и <paramref name="d2" /> не представляют одинаковую дату и время; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор <xref:System.DateTime.op_Inequality%2A> определяет, равны ли два значения <xref:System.DateTime>, сравнивая их число тактов. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, является ли значение одного заданного объекта <see cref="T:System.DateTime" /> раньшим, чем значение другого заданного объекта <see cref="T:System.DateTime" />.</summary>
        <returns>Значение <see langword="true" />, если значение <paramref name="t1" /> раньше значения <paramref name="t2" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор <xref:System.DateTime.op_LessThan%2A> определяет связь между двумя значениями <xref:System.DateTime> путем сравнения их количества тактов. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй сравниваемый объект.</param>
        <summary>Определяет, представляет ли один заданный <see cref="T:System.DateTime" /> дату и время, которое такое же или раньше, чем другое заданное <see cref="T:System.DateTime" />.</summary>
        <returns>Значение <see langword="true" />, если <paramref name="t1" /> происходит одновременно с <paramref name="t2" /> или раньше; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор <xref:System.DateTime.op_LessThanOrEqual%2A> определяет связь между двумя значениями <xref:System.DateTime> путем сравнения их количества тактов. Перед сравнением объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вычитает заданный объект <see cref="T:System.DateTime" /> или <see cref="T:System.TimeSpan" /> из заданного объекта <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Значение даты и времени, из которого вычитается интервал (уменьшаемое).</param>
        <param name="d2">Значение даты и времени, которое вычитается (вычитаемое).</param>
        <summary>Вычитает указанную дату и время из другой указанной даты и времени и возвращает временной интервал.</summary>
        <returns>Временной интервал между значениями <paramref name="d1" /> и <paramref name="d2" />, то есть <paramref name="d1" /> минус <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> не учитывает значение свойства <xref:System.DateTime.Kind%2A> двух значений <xref:System.DateTime> при выполнении вычитания. Перед вычитанием объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. В противном случае результат будет включать разницу между часовыми поясами.  
  
> [!NOTE]
>  Метод <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> учитывает разницу между часовыми поясами при выполнении вычитания.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 В следующем примере демонстрируется метод <xref:System.DateTime.Subtract%2A> и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Значение даты и времени, из которого производится вычитание.</param>
        <param name="t">Вычитаемый интервал времени.</param>
        <summary>Вычитает заданный временной интервал из указанной даты и времени и возвращает новую дату и время.</summary>
        <returns>Объект, значение которого является разностью значений <paramref name="d" /> и <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вычитает значение тактов `t` из значения тактов `d`.  
  
 Эквивалентным методом для этого оператора является <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 В следующем примере демонстрируется метод <xref:System.DateTime.Subtract%2A> и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  
 Содержание  
  
- [Какой метод следует вызывать?](#Tasks)
- [Анализируемая строка](#StringToParse)
- [Синтаксический анализ и культурные соглашения](#Culture)
- [Синтаксический анализ и элементы стиля](#Styles)
- [Возвращаемое значение и DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Какой метод следует вызывать?  
  
|Кому|Call|  
|--------|----------|  
|Проанализируйте строку даты и времени, используя соглашения текущего языка и региональных параметров.|Перегрузка <xref:System.DateTime.Parse%28System.String%29>|  
|Анализ строки даты и времени с помощью соглашений определенного языка и региональных параметров.|перегрузка <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> (см. раздел [синтаксический анализ и культурные соглашения](#Culture))|  
|Синтаксический анализ строки даты и времени с помощью специальных элементов стиля (например, пробелов или пустых пробелов).|Перегрузка <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Синтаксический анализ строки даты и времени, которая должна иметь определенный формат.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> или <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Проанализируйте строку даты и времени и выполните преобразование в UTC или местное время.|Перегрузка <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Синтаксический анализ строки даты и времени без обработки исключений.|Метод <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Restore (циклический обмен) — значение даты и времени, созданное операцией форматирования.|Передайте строку стандартного формата "o" или "r" в метод <xref:System.DateTime.ToString%28System.String%29> и вызовите перегрузку <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> с <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Синтаксический анализ строки даты и времени в фиксированном формате на компьютерах (и, возможно, в культуре).|метод <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> или <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>Анализируемая строка  
 Метод <xref:System.DateTime.Parse%2A> пытается преобразовать строковое представление значения даты и времени в эквивалентный <xref:System.DateTime>. Он пытается полностью проанализировать входную строку без вызова исключения <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Если операция синтаксического анализа завершается неудачей из-за нераспознанного формата строки, метод <xref:System.DateTime.Parse%2A> создает <xref:System.FormatException>, тогда как метод <xref:System.DateTime.TryParse%2A> Возвращает `false`. Так как обработка исключений может быть дорогостоящей, следует использовать <xref:System.DateTime.Parse%2A>, если операция синтаксического анализа ожидается, так как источник входных данных является доверенным. <xref:System.DateTime.TryParse%2A> является предпочтительным при сбоях анализа, особенно из-за того, что источник входных данных не является доверенным, или вы имеете разумные значения по умолчанию для замены строк, которые не анализируются успешно.   

 Анализируемая строка может принимать любое из следующих форм:  
  
-   Строка с компонентом даты и времени.  
  
-   Строка с датой, но без компонента времени. Если компонент времени отсутствует, метод принимает значение 12:00 в полночь. Если компонент даты имеет год из двух цифр, он преобразуется в год на основе <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> текущего календаря текущего языка и региональных параметров или текущего календаря указанного языка и региональных параметров (если используется перегрузка с аргументом `provider`, отличным от NULL).  
  
- Строка с компонентом даты, включающая только месяц и год, но не компонент дня. Метод предполагает, что первый день месяца.

- Строка с компонентом даты, включающая только месяц и день, но не компонент year. Метод предполагает текущий год.

-   Строка со временем, но без компонента даты. Метод принимает текущую дату, если только вы не вызываете перегрузку <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> и не включаете <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> в аргументе `styles`. в этом случае метод принимает дату 1 января 0001 года.  

- Строка с компонентом времени, включающий только час и обозначение AM/PM без компонента даты. Метод предполагает, что текущая дата и время не являются минутами и не имеют секунд. Это поведение можно изменить, вызвав перегрузку <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> и добавив <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> в аргументе `styles`. в этом случае метод принимает дату 1 января 0001 года.

-   Строка, которая включает сведения о часовом поясе и соответствует стандарту ISO 8601. В следующих примерах первая строка обозначает время в формате UTC, а второе — время в часовом поясе в семь часов раньше времени UTC:  
  
    "2008-11-01T19:35:00.0000000 Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Строка, включающая обозначение GMT и соответствующее формату времени RFC 1123; Например:  
  
     "Кот, 01 ноября 2008 19:35:00 GMT"  
  
-   Строка, содержащая дату и время вместе со сведениями о смещении часового пояса; Например:  
  
     "03/01/2009 05:42:00 -5:00"  

В следующем примере выполняется синтаксический анализ строк в каждом из этих форматов с использованием соглашений о форматировании текущего языка и региональных параметров, которые в данном случае являются региональными параметрами en-US:

[!code-csharp[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Если входная строка представляет високосный день в високосном году в календаре, используемом методом анализа (см. раздел [синтаксический анализ и культурные соглашения](#Culture)), то метод <xref:System.DateTime.Parse%2A> анализирует строку успешно. Если входная строка представляет високосный день в невисокосном году, метод создает исключение <xref:System.FormatException>.  
  
 Поскольку метод <xref:System.DateTime.Parse%2A> пытается проанализировать строковое представление даты и времени с помощью правил форматирования текущего или указанного языка и региональных параметров, попытка выполнить синтаксический анализ строки в разных культурах может завершиться неудачно. Чтобы выполнить синтаксический анализ определенного формата даты и времени в разных языковых стандартах, используйте одну из перегрузок метода <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> и укажите описатель формата.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Синтаксический анализ и культурные соглашения  
 Все перегрузки метода <xref:System.DateTime.Parse%2A> чувствительны к языку и региональным параметрам, если только строка для анализа (которая представлена `s` в следующей таблице) соответствует шаблону ISO 8601. Операция синтаксического анализа использует сведения о форматировании в объекте <xref:System.Globalization.DateTimeFormatInfo>, который является производным следующим образом:  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

|Если вызван|И `provider` —|Сведения о форматировании являются производными от|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Язык и региональные параметры текущего потока (свойство <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Объект <xref:System.Globalization.DateTimeFormatInfo>|Указанный объект <xref:System.Globalization.DateTimeFormatInfo>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Язык и региональные параметры текущего потока (свойство <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Объект <xref:System.Globalization.CultureInfo>|Свойство <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>.|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Пользовательская реализация <xref:System.IFormatProvider>|метод <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> ;|  
  
 Если сведения о форматировании являются производными от объекта <xref:System.Globalization.DateTimeFormatInfo>, свойство <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> определяет календарь, используемый в операции синтаксического анализа.  
  
 При синтаксическом анализе строки даты и времени с помощью объекта <xref:System.Globalization.DateTimeFormatInfo> с настроенными параметрами, отличающимися от стандартных параметров, используйте метод <xref:System.DateTime.ParseExact%2A> вместо метода <xref:System.DateTime.Parse%2A>, чтобы повысить вероятность успешного преобразования. Нестандартная строка даты и времени может быть сложной и сложной для анализа. Метод <xref:System.DateTime.Parse%2A> пытается выполнить синтаксический анализ строки с несколькими неявными шаблонами анализа, все из которых может завершиться ошибкой. Напротив, метод <xref:System.DateTime.ParseExact%2A> требует явного назначения одного или более точных шаблонов анализа, которые, вероятнее всего, будут успешны. Дополнительные сведения см. в разделе "DateTimeFormatInfo and платформа динамических данных" статьи <xref:System.Globalization.DateTimeFormatInfo>.  
  
> [!IMPORTANT]
>  Обратите внимание, что соглашения о форматировании для определенного языка и региональных параметров являются динамическими и могут быть изменены. Это означает, что операции синтаксического анализа, зависящие от соглашений о форматировании по умолчанию (текущего) языка и региональных параметров или задающих объект <xref:System.IFormatProvider>, представляющий язык и региональные параметры, отличные от инвариантного языка и региональных параметров, могут вызвать непредвиденную ошибку при выполнении любого из следующих условий:  
>   
> -   Данные, зависящие от языка и региональных параметров, изменились между основными или дополнительными версиями .NET Framework или в результате обновления существующей версии .NET Framework.  
> -   Данные, зависящие от языка и региональных параметров, отражают предпочтения пользователя, которые могут отличаться от компьютера к компьютеру или сеансу.  
> -   Данные, зависящие от языка и региональных параметров, представляют собой заменяющую культуру, переопределяющую параметры стандартного языка и региональных параметров или пользовательского языка и региональных параметров.  
>   
>  Чтобы избежать трудностей при анализе строк данных и времени, связанных с изменениями в культурных данных, можно выполнить синтаксический анализ строк даты и времени с помощью инвариантного языка и региональных параметров, или же можно вызвать метод <xref:System.DateTime.ParseExact%2A> или <xref:System.DateTime.TryParseExact%2A> и указать точный формат строки. для анализа. При сериализации и десериализации данных даты и времени можно использовать соглашения о форматировании инвариантного языка и региональных параметров, а также сериализовать и десериализовать значение <xref:System.DateTime> в двоичном формате.  
>   
>  Дополнительные сведения см. в разделе "данные динамического языка и региональных параметров" статьи <xref:System.Globalization.CultureInfo> и в разделе "сохранение значений DateTime" статьи <xref:System.DateTime>.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Синтаксический анализ и элементы стиля  
 Все перегрузки <xref:System.DateTime.Parse%2A> игнорируют начальные, внутренние или конечные пробелы во входной строке (которая представлена `s` в следующей таблице). Дата и время могут быть заключены в скобки с парой начальных и конечных символов РЕШЕТКи ("#", U + 0023), а также могут заканчиваться одним или несколькими символами NULL (U + 0000).  
  
 Кроме того, перегрузка <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> имеет параметр `styles`, состоящий из одного или нескольких элементов перечисления <xref:System.Globalization.DateTimeStyles>. Этот параметр определяет, как `s` должен интерпретироваться и как операция синтаксического анализа должна преобразовать `s` в дату и время. В следующей таблице приводится описание влияния каждого элемента <xref:System.Globalization.DateTimeStyles> на операцию синтаксического анализа.  
  
|DateTimeStyles, элемент|Воздействие на преобразование|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и при необходимости преобразует его в формат UTC следующим образом:<br /><br /> — Если `s` включает смещение часового пояса или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeLocal>, метод анализирует строку, вызывает <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращенного значения <xref:System.DateTime> в формат UTC и задает для свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />— Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, метод анализирует строку, не выполняет преобразование часового пояса для возвращенного значения <xref:System.DateTime> и устанавливает <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />— Во всех остальных случаях флаг не действует.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Это значение игнорируется. Внутренние пробелы всегда разрешены в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Это значение игнорируется. Начальные пробелы всегда разрешены в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Это значение игнорируется. Конечные пробелы всегда разрешены в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы. Это поведение установлено по умолчанию. Он не может быть переопределен путем предоставления более однозначного значения перечисления <xref:System.Globalization.DateTimeStyles>, такого как <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` не содержит никаких сведений о часовом поясе, предполагается местное время. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> отсутствует, свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` не имеет сведений о часовом поясе, предполагается время в формате UTC. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> отсутствует, метод преобразует возвращенное значение <xref:System.DateTime> из UTC в местное время и устанавливает для его свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Несмотря на допустимость, это значение игнорируется.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование строки даты и времени в значение <xref:System.DateTime>, представляющее местное время со свойством <xref:System.DateTime.Kind%2A>, равным <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Как правило, такая строка создается путем вызова метода <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> и с помощью описателя стандартного формата "o", "r" или "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Возвращаемое значение и DateTime. Kind

Перегрузки `DateTime.Parse` возвращают значение <xref:System.DateTime>, чье свойство <xref:System.DateTime.Kind> включает сведения о часовом поясе. Это может означать, что время:

- Время в формате UTC (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- Время в местном часовом поясе (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Время в неизвестном часовом поясе (xref: System. DateTimeKind. не указано? displayProperty = fullName >).
 
 Как правило, метод <xref:System.DateTime.Parse%2A> возвращает объект <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого имеет значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Однако метод <xref:System.DateTime.Parse%2A> также может выполнять преобразование часовых поясов и задавать значение свойства <xref:System.DateTime.Kind%2A> по-разному в зависимости от значений параметров `s` и `styles`:  
  
|If|Преобразование часового пояса|Kind, свойство|  
|--------|--------------------------|-------------------|  
|`s` содержит сведения о часовом поясе.|Дата и время преобразуются во время в местном часовом поясе.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` содержит сведения о часовом поясе, а `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>.|Дата и время преобразуются в время в формате UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` содержит обозначение часового пояса Z или GMT, а `styles` включает флаг <xref:System.Globalization.DateTimeStyles.RoundtripKind>.|Дата и время считаются в формате UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 В следующем примере строки даты, содержащие сведения о часовом поясе, преобразуются в время в местном часовом поясе:  
  
 [!code-csharp[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Кроме того, значение свойства <xref:System.DateTime.Kind%2A> можно сохранить во время операции форматирования и анализа с помощью флага <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>. В следующем примере показано влияние флага <xref:System.Globalization.DateTimeStyles.RoundtripKind> на операцию синтаксического анализа значений <xref:System.DateTime>, которые преобразуются в строки с помощью описателя формата "o", "r" или "u".  
  
 [!code-csharp[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
## Examples

Многочисленные примеры, вызывающие метод `DateTime.Parse`, разбросаны в разделе « [Примечания](#remarks) » этой статьи и в документации по отдельным перегрузкам `DateTime.Parse`.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Вы также можете скачать полный набор `DateTime.Parse` примеров, которые включены в [проект .NET Core 2,0 для C# ](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) и [проект .NET Core 2,0 для Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), из [репозитория DotNet/Samples GitHub](https://github.com/dotnet/samples).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя соглашения для языка и региональных параметров текущего потока.</summary>
        <returns>Объект, эквивалентный дате и времени, содержащимся в параметре <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Если `s` содержит сведения о часовом поясе, этот метод возвращает значение <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, и преобразует дату и время в `s` в местное время. В противном случае он не выполняет преобразование часового пояса и возвращает значение <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Эта перегрузка пытается проанализировать `s`, используя соглашения о форматировании для текущего языка и региональных параметров. Текущий язык и региональные параметры указываются свойством <xref:System.Globalization.CultureInfo.CurrentCulture>. Чтобы выполнить синтаксический анализ строки с помощью соглашений о форматировании для определенного языка и региональных параметров, вызовите <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> или <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> перегрузки.

Эта перегрузка пытается проанализировать `s` с помощью стиля <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>.

## <a name="example"></a>Пример

В следующем примере выполняется синтаксический анализ строкового представления нескольких значений даты и времени:

- С помощью поставщика формата по умолчанию, который предоставляет соглашения о форматировании языка и региональных параметров текущего потока компьютера, используемого для создания примера выходных данных. Выходные данные в этом примере отражают соглашения о форматировании для языка и региональных параметров en-US.

- Использование значения стиля по умолчанию, которое равно <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Он обрабатывает исключение <xref:System.FormatException>, которое выдается, когда метод пытается проанализировать строковое представление даты и времени с помощью других соглашений о форматировании языка и региональных параметров. Также показано, как успешно выполнить синтаксический анализ значения даты и времени, которое не использует соглашения о форматировании языка и региональных параметров текущего потока.  
  
 [!code-csharp[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> — <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Параметр <paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <paramref name="s" /> для определенного языка и региональных параметров.  См. раздел [Анализ и соглашения для языка и региональных параметров](#Culture)</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя сведения о форматировании, связанные с языком и региональными параметрами.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметром <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Если `s` содержит сведения о часовом поясе, этот метод возвращает значение <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, и преобразует дату и время в `s` в местное время. В противном случае он не выполняет преобразование часового пояса и возвращает значение <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Эта перегрузка пытается выполнить синтаксический анализ `s` с помощью стиля <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>.

## <a name="example"></a>Пример

В следующем примере выполняется синтаксический анализ массива строк даты с использованием соглашений о языках и региональных параметрах en-US, fr-FR и de-DE. В нем показано, что строковые представления одной даты могут интерпретироваться по-разному в разных культурах.  
  
[!code-csharp[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> — <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Параметр <paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">Область памяти, которая содержит строку для анализа. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <paramref name="s" /> для определенного языка и региональных параметров.  См. раздел [Анализ и соглашения для языка и региональных параметров](#Culture)</param>
        <param name="styles">Побитовая комбинация значений перечисления, показывающая элементы стиля, которые могут присутствовать в параметре <paramref name="s" />, чтобы операция анализа прошла успешно. Данная комбинация определяет способ интерпретации анализируемых данных с учетом текущего часового пояса или текущей даты. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует область памяти, которая содержит строковое представление даты и времени, в ее эквивалент <see cref="T:System.DateTime" />, используя сведения о форматировании, связанные с языком и региональными параметрами, а также стиль форматирования.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="provider" /> и <paramref name="styles" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <paramref name="s" /> в зависимости от языка и региональных параметров.  См. раздел [Анализ и соглашения для языка и региональных параметров](#Culture)</param>
        <param name="styles">Побитовая комбинация значений перечисления, показывающая элементы стиля, которые могут присутствовать в параметре <paramref name="s" />, чтобы операция анализа прошла успешно. Данная комбинация определяет способ интерпретации анализируемых данных с учетом текущего часового пояса или текущей даты. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя сведения о форматировании, связанные с языком и региональными параметрами, а также стиль форматирования.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="provider" /> и <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Эта перегрузка метода преобразует дату и время в `s` и устанавливает свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> следующим образом:

| If | Преобразование часового пояса | Kind, свойство |
|----|----------------------|---------------|
| `s` не содержит сведений о часовом поясе. | Отсутствует. | <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> |
| `s` содержит сведения о часовом поясе. | К времени в местном часовом поясе | <xref:System.DateTimeKind.Local?displayProperty=nameWithType> |
| `s` содержит сведения о часовом поясе, а `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>. | В время в формате UTC | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |
| `s` содержит обозначение часового пояса Z или GMT, а `styles` включает <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>. | Отсутствует. | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |

## <a name="example"></a>Пример

В следующем примере демонстрируется метод <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> и отображается значение свойства <xref:System.DateTime.Kind%2A> результирующего значения <xref:System.DateTime>.  
  
[!code-csharp[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, значения <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">Практическое руководство. Обеспечение однозначности при сохранении и восстановлении значений даты и времени</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />. Формат строкового представления должен полностью соответствовать заданному формату. В противном случае возникает исключение.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="format">Описатель формата, задающий требуемый формат <paramref name="s" />. Дополнительные сведения см. в разделе "Примечания".</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <paramref name="s" /> для определенного языка и региональных параметров.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя указанные сведения о форматировании, связанные с языком и региональными параметрами. Формат строкового представления должен полностью соответствовать заданному формату.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="format" /> и <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> анализирует строковое представление даты, которое должно быть в формате, определенном параметром `format`. Также требуется, чтобы элементы \<Date > и @no__t-> 1Time в строковом представлении даты и времени отображались в порядке, указанном `format`, а `s` не имеют пробелов, Кроме разрешенного `format`. Если `format` определяет дату без элемента времени и операция синтаксического анализа выполняется успешно, то полученное значение <xref:System.DateTime> будет иметь время полуночи (00:00:00). Если `format` определяет время без элемента даты и операция синтаксического анализа выполняется успешно, результирующее <xref:System.DateTime> имеет дату `DateTime.Now.Date`.  
  
 Если `s` не представляет время в определенном часовом поясе и операция синтаксического анализа выполняется, то свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> равно <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если `s` представляет время в определенном часовом поясе, а `format` допускает присутствие сведений о часовом поясе (например, если `format` равна стандартным описателям формата "o", "r" или "u") или содержит описатели настраиваемого формата "z", "ZZ" или "zzz" ), свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  

 Параметр `format` представляет собой строку, содержащую либо один стандартный описатель формата, либо один или несколько настраиваемых описателей формата, которые определяют требуемый формат `s`. Дополнительные сведения о допустимых кодах форматирования см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) или [строки настраиваемых форматов даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Если `format` является шаблоном пользовательского формата, который не включает разделители даты или времени (например, "ГГГГММДДЧЧмм"), используйте инвариантный язык и региональные параметры для параметра `provider` и самую широкую форму каждого настраиваемого описателя формата. Например, если вы хотите указать часы в шаблоне формата, укажите более широкую форму, "HH", а не более узкую форму "H".  
  
 Конкретные символы и строки даты и времени (например, названия дней недели на определенном языке), используемые в `s`, определяются параметром `provider`, как и точный формат `s`, если `format` является строкой описателя стандартного формата. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, используемые для интерпретации `s`. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращенный свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательская реализация <xref:System.IFormatProvider>, метод <xref:System.IFormatProvider.GetFormat%2A>, возвращает либо объект <xref:System.Globalization.CultureInfo>, либо объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, то используется объект <xref:System.Globalization.CultureInfo>, соответствующий текущему языку и региональным параметрам.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ParseExact%2A>.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="s" /> или <paramref name="format" /> — <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> или <paramref name="format" /> является пустой строкой.  
  
-или- 
 Строка <paramref name="s" /> не содержит дату и время, соответствующие формату, заданному в параметре <paramref name="format" />.  
  
-или- 
Компонент часов и обозначение AM/PM в <paramref name="s" /> не соответствуют друг другу.</exception>
        <block subset="none" type="usage"><para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] метод <see cref="Overload:System.DateTime.ParseExact" /> создает исключение <see cref="T:System.FormatException" />, если анализируемая строка содержит компонент часа и указатель AM/PM, который не является соглашением. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях указатель AM/PM игнорируется.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="format">Описатель формата, задающий требуемый формат <paramref name="s" />. Дополнительные сведения см. в разделе "Примечания".</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <paramref name="s" /> в зависимости от языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация значений перечисления, которая предоставляет дополнительную информацию о параметре <paramref name="s" />, об элементах стиля, которые могут присутствовать в параметре <paramref name="s" />, или о преобразовании из параметра <paramref name="s" /> в значение <see cref="T:System.DateTime" />. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный формат, указанные сведения о форматировании, связанные с языком и региональными параметрами, а также стиль. Формат строкового представления должен полностью соответствовать заданному формату. В противном случае возникает исключение.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="format" />, <paramref name="provider" /> и <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> анализирует строковое представление даты, которое должно быть в формате, определенном параметром `format`. Также требуется, чтобы элементы даты и времени в `s` отображались в порядке, заданном `format`. Если `s` не соответствует шаблону параметра `format` с любыми вариациями, определенными параметром `style`, метод создает исключение <xref:System.FormatException>. В отличие от этого, метод <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> анализирует строковое представление даты в одном из форматов, распознаваемых объектом <xref:System.Globalization.DateTimeFormatInfo> поставщика формата. Метод <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> также позволяет элементам даты и времени в `s` отображаться в любом порядке.  
  
 Если параметр `s` содержит только время и дату, используется текущая дата, если параметр `style` не включает флаг <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>. в этом случае используется дата по умолчанию (`DateTime.Date.MinValue`). Если параметр `s` содержит только дату и время, то используется полночь (00:00:00). Параметр `style` также определяет, может ли параметр `s` содержать начальные, внутренние или конечные символы пробела.  
  
 Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, возвращающего <xref:System.DateTime> значение, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью флагов <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, которые возвращают значение <xref:System.DateTime.Kind%2A>, свойство  которого равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` содержит сведения о часовом поясе, то при необходимости время преобразуется в местное время, а свойство <xref:System.DateTime.Kind%2A> возвращаемого объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>, чтобы не преобразовывать скоординированное координированное время (UTC) в местное время и установить свойство <xref:System.DateTime.Kind%2A> в значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Параметр `format` определяет необходимый шаблон параметра `s`. Он может состоять из одного или нескольких настраиваемых описателей формата в таблице [строк настраиваемого формата даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md) или одного стандартного описателя формата, который определяет стандартный шаблон из таблицы [строк стандартного формата даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Если в шаблоне пользовательского формата не используются разделители даты или времени, используйте инвариантный язык и региональные параметры для параметра `provider` и самую широкую форму описателя настраиваемого формата. Например, если вы хотите указать часы в шаблоне, укажите более широкую форму, "HH", а не более узкую форму "H".  
  
> [!NOTE]
>  Вместо того чтобы `s` соответствовать одному формату, чтобы операция синтаксического анализа была выполнена, можно вызвать метод <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> и указать несколько разрешенных форматов. Это делает операцию анализа более вероятной для выполнения.  
  
 Параметр `styles` включает один или несколько элементов перечисления <xref:System.Globalization.DateTimeStyles>, которые определяют, могут ли и где пробелы, не определенные `format`, отображаться в `s`, и управлять точным поведением операции синтаксического анализа. В следующей таблице описано, как каждый элемент перечисления <xref:System.Globalization.DateTimeStyles> влияет на работу метода <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>.  
  
|DateTimeStyles, элемент|Описание|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и при необходимости преобразует его в время в формате UTC. Если `s` включает смещение часового пояса или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, метод анализирует строку, вызывает <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращенного значения <xref:System.DateTime> в формат UTC и задает для свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, метод анализирует строку, не выполняет преобразование часового пояса для возвращенного значения <xref:System.DateTime> и устанавливает свойство <xref:System.DateTime.Kind%2A>. в <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает никакого влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы, не определенные `format`, могут отображаться между любым отдельным элементом даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не определенные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что оно представляет местное время. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что он представляет время в формате UTC. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, метод преобразует возвращенное значение <xref:System.DateTime> из UTC в местное время и устанавливает для его свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит сведения о времени без даты, то дата возвращаемого значения устанавливается равным `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Параметр `s` анализируется с использованием значений по умолчанию. В `format` не допускаются пробелы, кроме тех, что есть. Если `s` не имеет компонента даты, то дата возвращаемого значения <xref:System.DateTime> устанавливается равным 1/1/0001. Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если сведения о часовом поясе находятся в `s`, время преобразуется в местное время, а свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в значение даты и времени <xref:System.DateTime> со свойством <xref:System.DateTime.Kind%2A>, равным <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Этот флаг, в первую очередь, предотвращает преобразование времени в формате UTC в местное время.|  
  
 Конкретные символы и строки даты и времени (например, названия дней недели на определенном языке), используемые в `s`, определяются параметром `provider`, как и точный формат `s`, если `format` является строкой описателя стандартного формата. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, используемые для интерпретации `s`. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращенный свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательская реализация <xref:System.IFormatProvider>, метод <xref:System.IFormatProvider.GetFormat%2A>, возвращает либо объект <xref:System.Globalization.CultureInfo>, либо объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, то используется объект <xref:System.Globalization.CultureInfo>, соответствующий текущему языку и региональным параметрам.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>. Обратите внимание, что строка "5/01/2009 8:30 AM" не может быть успешно проанализирована, если параметр `styles` равен <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>, так как в `format` не допускаются начальные пробелы. Кроме того, невозможно успешно выполнить синтаксический анализ строки "5/01/2009 09:00" с `format` из "MM/ДД/иииихх: mm", так как строка даты не предшествует номеру месяца с нулем в начале, так как `format` требует.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="s" /> или <paramref name="format" /> — <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> или <paramref name="format" /> является пустой строкой.  
  
-или- 
 Строка <paramref name="s" /> не содержит дату и время, соответствующие формату, заданному в параметре <paramref name="format" />.  
  
- или - 
Компонент часов и обозначение AM/PM в <paramref name="s" /> не соответствуют друг другу.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, значения <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage"><para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] метод <see cref="Overload:System.DateTime.ParseExact" /> создает исключение <see cref="T:System.FormatException" />, если анализируемая строка содержит компонент часа и указатель AM/PM, который не является соглашением. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях указатель AM/PM игнорируется.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="formats">Массив разрешенных форматов <paramref name="s" />. Дополнительные сведения см. в разделе "Замечания".</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <paramref name="s" /> для определенного языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация значений перечисления, которая показывает разрешенный формат параметра <paramref name="s" />. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный массив форматов, указанные сведения о форматировании, связанные с языком и региональными параметрами, и стиль форматирования. Формат строкового представления должен полностью соответствовать по крайней мере одному из заданных форматов. В противном случае возникает исключение.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="formats" />, <paramref name="provider" /> и <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> анализирует строковое представление даты, совпадающей с любым из шаблонов, назначенных параметру `formats`. Если строка `s` не соответствует ни одному из этих шаблонов с вариациями, определенными параметром `styles`, метод создает исключение <xref:System.FormatException>. Помимо сравнения `s` с несколькими шаблонами форматирования, а не с одним шаблоном форматирования, эта перегрузка ведет себя идентично методу <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>.  
  
 Параметр `s` содержит дату и время для синтаксического анализа. Если параметр `s` содержит только время и дату, используется текущая дата, если параметр `style` не включает флаг <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>. в этом случае используется дата по умолчанию (`DateTime.Date.MinValue`). Если параметр `s` содержит только дату и время, то используется полночь (00:00:00). Параметр `style` также определяет, может ли параметр `s` содержать начальные, внутренние или конечные символы пробела, отличные от тех, которые разрешены одной из строк формата в `formats`.  
  
 Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, возвращающего <xref:System.DateTime> значение, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью флагов <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, которые возвращают значение <xref:System.DateTime.Kind%2A>, свойство  которого равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` содержит сведения о часовом поясе, то при необходимости время преобразуется в местное время, а свойство <xref:System.DateTime.Kind%2A> возвращаемого объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>, чтобы не преобразовывать время в формате UTC в местное время и установить свойство <xref:System.DateTime.Kind%2A> в значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Параметр `formats` содержит массив шаблонов, один из которых `s` должен точно соответствовать, если операция синтаксического анализа выполнена. Шаблоны в параметре `formats` состоят из одного или нескольких настраиваемых описателей формата в таблице [строк настраиваемого формата даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md) или одного стандартного описателя формата, который определяет предопределенный шаблон, от [стандартных даты и времени. Формат таблицы строк](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Если в шаблоне пользовательского формата не используются разделители даты или времени, используйте инвариантный язык и региональные параметры для параметра `provider` и самую широкую форму описателя настраиваемого формата. Например, если вы хотите указать часы в шаблоне, укажите более широкую форму, "HH", а не более узкую форму "H".  
  
 Параметр `styles` включает один или несколько элементов перечисления <xref:System.Globalization.DateTimeStyles>, которые определяют, могут ли и где пробелы, не определенные `format`, отображаться в `s`, и управлять точным поведением операции синтаксического анализа. В следующей таблице описано, как каждый элемент перечисления <xref:System.Globalization.DateTimeStyles> влияет на работу метода <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>.  
  
|DateTimeStyles, элемент|Описание|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и при необходимости преобразует его в время в формате UTC. Если `s` включает смещение часового пояса или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, метод анализирует строку, вызывает <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращенного значения <xref:System.DateTime> в формат UTC и задает для свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, метод анализирует строку, не выполняет преобразование часового пояса для возвращенного значения <xref:System.DateTime> и устанавливает свойство <xref:System.DateTime.Kind%2A>. в <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает никакого влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы, не определенные `format`, могут отображаться между любым отдельным элементом даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не определенные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что оно представляет местное время. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что он представляет время в формате UTC. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, метод преобразует возвращенное значение <xref:System.DateTime> из UTC в местное время и устанавливает для его свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит сведения о времени без даты, то дата возвращаемого значения устанавливается равным `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Параметр `s` анализируется с использованием значений по умолчанию. В `format` не допускаются пробелы, кроме тех, что есть. Если `s` не имеет компонента даты, то дата возвращаемого значения <xref:System.DateTime> устанавливается равным 1/1/0001. Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если сведения о часовом поясе находятся в `s`, время преобразуется в местное время, а свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в дату и время со свойством <xref:System.DateTime.Kind%2A>, равным <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Этот флаг, в первую очередь, предотвращает преобразование времени в формате UTC в местное время.|  
  
 Конкретные символы и строки даты и времени (например, названия дней недели на определенном языке), используемые в `s`, определяются параметром `provider`, как и точный формат `s`, если `format` является строкой описателя стандартного формата. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, используемые для интерпретации `s`. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращенный свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательская реализация <xref:System.IFormatProvider>, метод <xref:System.IFormatProvider.GetFormat%2A>, возвращает либо объект <xref:System.Globalization.CultureInfo>, либо объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, то используется объект <xref:System.Globalization.CultureInfo>, соответствующий текущему языку и региональным параметрам.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>, чтобы обеспечить возможность успешного анализа строки в ряде возможных форматов.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="s" /> или <paramref name="formats" /> — <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Параметр <paramref name="s" /> равен пустой строке.  
  
- или - 
Элемент параметра <paramref name="formats" /> является пустой строкой.  
  
- или - 
 Строка <paramref name="s" /> не содержит дату и время, соответствующие какому-либо элементу параметра <paramref name="formats" />.  
  
- или - 
Компонент часов и обозначение AM/PM в <paramref name="s" /> не соответствуют друг другу.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, значения <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage"><para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] метод <see cref="Overload:System.DateTime.ParseExact" /> создает исключение <see cref="T:System.FormatException" />, если анализируемая строка содержит компонент часа и указатель AM/PM, который не является соглашением. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях указатель AM/PM игнорируется.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент секунды даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий секунды, выраженный как значение от 0 до 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Second%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Дата и время.</param>
        <param name="kind">Одно из значений перечисления, указывающее, что представляет новый объект: локальное время, универсальное глобальное время (UTC), или ни то, ни другое.</param>
        <summary>Создает новый объект <see cref="T:System.DateTime" />, имеющий то же количество тактов, что и заданный объект <see cref="T:System.DateTime" />, но предназначенный для использования либо с местным временем, стандартом UTC, либо ни тем, ни другим, как задано значением <see cref="T:System.DateTimeKind" />.</summary>
        <returns>Новый объект, имеющий то же количество тактов, что и объект, представленный параметром <paramref name="value" />, и значение <see cref="T:System.DateTimeKind" />, заданное параметром <paramref name="kind" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.DateTime> состоит из поля Kind, которое указывает, основано ли значение времени на локальном времени, в формате UTC или ни в каком значении, а также на поле тактов, которое содержит значение времени, измеренное в 100-наносекундных тактах. Метод <xref:System.DateTime.SpecifyKind%2A> создает новый объект <xref:System.DateTime>, используя указанный параметр `kind` и исходное значение времени.  
  
> [!IMPORTANT]
>  Возвращаемое значение <xref:System.DateTime> не представляет то же самое время, что и параметр `value`, а <xref:System.DateTime.SpecifyKind%2A> не является методом преобразования часового пояса. Вместо этого он оставляет время, заданное параметром `value`, без изменений и устанавливает для свойства <xref:System.DateTime.Kind%2A> значение `kind`. Сведения о преобразовании часовых поясов см. в разделе Преобразование времени между часовыми [поясами](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Метод <xref:System.DateTime.SpecifyKind%2A> полезен в сценариях взаимодействия, когда вы получаете объект <xref:System.DateTime> с неопределенным полем Kind, но можно определить независимым образом, что поле тактов представляет местное время или UTC.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.SpecifyKind%2A>, чтобы продемонстрировать, как свойство <xref:System.DateTime.Kind%2A> влияет на методы преобразования <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">COM-взаимодействие в приложениях .NET Framework (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, который вычитает из значения этого экземпляра указанное время или длительность.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Вычитаемые дата и время.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, который вычитает из значения этого экземпляра указанную дату и время.</summary>
        <returns>Интервал времени, равный разнице между датой и временем, представленными этим экземпляром, и датой и временем, представленными параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.Subtract%28System.DateTime%29> определяет разницу между двумя датами. Чтобы вычесть интервал времени из текущего экземпляра, вызовите метод <xref:System.DateTime.Subtract%28System.TimeSpan%29>. Чтобы вычесть определенный интервал времени из текущего экземпляра, вызовите метод, который добавляет этот интервал времени к текущей дате, и укажите отрицательное значение в качестве аргумента метода. Например, чтобы вычесть два месяца с текущей даты, вызовите метод <xref:System.DateTime.AddMonths%28System.Int32%29> со значением-2.  
  
 Если дата и время текущего экземпляра предшествуют `value`, метод возвращает объект <xref:System.TimeSpan>, представляющий отрицательный интервал времени. То есть значение всех его ненулевых свойств (например, <xref:System.TimeSpan.Days%2A> или <xref:System.TimeSpan.Ticks%2A>) отрицательно.  
  
 Метод <xref:System.DateTime.Subtract%28System.DateTime%29> не учитывает значение свойства <xref:System.DateTime.Kind%2A> двух значений <xref:System.DateTime> при выполнении вычитания. Перед вычитанием объектов <xref:System.DateTime> убедитесь, что объекты представляют время в одном часовом поясе. В противном случае результат будет включать разницу между часовыми поясами.  
  
> [!NOTE]
>  Метод <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> учитывает разницу между часовыми поясами при выполнении вычитания.  
  
   
  
## Examples  
 В следующем примере демонстрируется метод <xref:System.DateTime.Subtract%2A> и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Результат меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Вычитаемый интервал времени.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, который вычитает из значения этого экземпляра указанную длительность.</summary>
        <returns>Объект, равный разнице между датой и временем, представленными этим экземпляром, и интервалом времени, представленным параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.Subtract%28System.TimeSpan%29> возвращает дату, которая является заданной разницей интервала времени от текущего экземпляра. Чтобы определить интервал времени между двумя датами, вызовите метод <xref:System.DateTime.Subtract%28System.DateTime%29>. Чтобы вычесть определенный интервал времени из текущего экземпляра, вызовите метод, который добавляет этот интервал времени к текущей дате, и укажите отрицательное значение в качестве аргумента метода. Например, чтобы вычесть два месяца с текущей даты, вызовите метод <xref:System.DateTime.AddMonths%28System.Int32%29> со значением-2.  
  
 Этот метод не изменяет значение этого <xref:System.DateTime>. Вместо этого возвращается новый <xref:System.DateTime>, значение которого является результатом этой операции.  
  
 Обычно метод <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> вычитает объект <xref:System.TimeSpan>, представляющий положительный интервал времени, и возвращает значение <xref:System.DateTime>, которое предшествует дате и времени текущего экземпляра. Однако если объект <xref:System.TimeSpan> представляет отрицательный промежуток времени, метод <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> возвращает значение <xref:System.DateTime>, которое позже даты и времени текущего экземпляра.  
  
 Метод <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> позволяет вычитать интервал времени, состоящий из более чем одной единицы времени (например, заданное количество часов и заданное количество минут). Чтобы вычесть одну единицу времени (например, годы, месяцы или дни) из экземпляра <xref:System.DateTime>, можно передать отрицательное числовое значение в качестве параметра в любой из следующих методов:  
  
-   <xref:System.DateTime.AddYears%2A>, чтобы вычесть определенное число лет из текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddMonths%2A>, чтобы вычесть определенное число месяцев с текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddDays%2A>, чтобы вычесть определенное количество дней с текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddHours%2A>, чтобы вычесть определенное количество часов из текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddMinutes%2A>, чтобы вычесть определенное количество минут с текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddSeconds%2A>, чтобы вычесть определенное количество секунд с текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, чтобы вычесть определенное количество миллисекунд из текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddTicks%2A>, чтобы вычесть определенное количество тактов из текущего экземпляра даты и времени.  
  
   
  
## Examples  
 В следующем примере демонстрируется метод <xref:System.DateTime.Subtract%2A> и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Результат меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Выполнение арифметических операций с датами и временем</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Возвращает текущий объект <see cref="T:System.DateTime" />.</summary>
        <returns>Текущий объект.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">Требуемый тип.</param>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Преобразует текущий объект <see cref="T:System.DateTime" /> в объект заданного типа.</summary>
        <returns>Объект типа, заданного параметром <paramref name="type" />, значение которого эквивалентно значению текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Для типа <see cref="T:System.DateTime" /> преобразование не поддерживается.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Объект, который требуется заполнить данными.</param>
        <param name="context">Целевой объект этой сериализации. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации текущего объекта <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет параметр `info` значениями свойств <xref:System.DateTime.Ticks%2A> и <xref:System.DateTime.Kind%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> — <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для немедленного вызывающего объекта. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает число тактов, которое представляет дату и время этого экземпляра.</summary>
        <value>Число тактов, которое представляет дату и время этого экземпляра. Это значение находится в диапазоне от <see langword="DateTime.MinValue.Ticks" /> до <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один такт представляет 100 наносекунд или 1 10-миллион секунды. 10 000 тактов в миллисекундах или 10 000 000 тактов в секунду.  
  
 Значение этого свойства представляет число 100-наносекундных интервалов, прошедших с 12:00:00 полуночи 1 января 0001 года (0:00:00 UTC 1 января 0001 г. в григорианском календаре), которое представляет <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Он не включает число тактов, которые могут быть соотнесены с високосными секундами.  
  
   
  
## Examples  
 В следующем примере свойство <xref:System.DateTime.Ticks%2A> используется для вывода количества тактов, прошедших с начала двадцать первого века, и для создания экземпляра объекта <xref:System.TimeSpan>. Затем объект <xref:System.TimeSpan> используется для показа затраченного времени с помощью нескольких других временных интервалов.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает время дня для этого экземпляра.</summary>
        <value>Интервал времени, представляющий часть дня, прошедшую с полуночи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В отличие от свойства <xref:System.DateTime.Date%2A>. возвращающее значение <xref:System.DateTime>, представляющее дату без компонента времени, свойство <xref:System.DateTime.TimeOfDay%2A> возвращает значение <xref:System.TimeSpan>, представляющее компонент времени <xref:System.DateTime> значения.  
  
 Если необходимо отобразить время суток или получить строковое представление времени суток @no__t значение 0, можно вызвать перегрузку метода <xref:System.DateTime.ToString%2A>, имеющего параметр `format`, или использовать функцию [составного форматирования](~/docs/standard/base-types/composite-formatting.md) с "t" или "t" Строка формата андард.  
  
   
  
## Examples  
 В следующем примере показано значение свойства <xref:System.DateTime.TimeOfDay%2A> для массива значений <xref:System.DateTime>. Он также отличает возвращаемое значение со строкой, возвращенной строкой стандартного формата "t" в операции составного форматирования.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сериализует текущий объект <see cref="T:System.DateTime" /> в 64-разрядное двоичное значение, которое может использоваться в дальнейшем для воссоздания объекта <see cref="T:System.DateTime" />.</summary>
        <returns>64-разрядное целое число со знаком, кодирующее свойства <see cref="P:System.DateTime.Kind" /> и <see cref="P:System.DateTime.Ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод <xref:System.DateTime.ToBinary%2A>, чтобы преобразовать значение текущего объекта <xref:System.DateTime> в двоичное значение. Затем используйте двоичное значение и метод <xref:System.DateTime.FromBinary%2A> для повторного создания исходного объекта <xref:System.DateTime>.  
  
> [!IMPORTANT]
>  В некоторых случаях значение <xref:System.DateTime>, возвращаемое методом <xref:System.DateTime.FromBinary%2A>, не идентично исходному значению <xref:System.DateTime>, переданному в метод <xref:System.DateTime.ToBinary%2A>. Дополнительные сведения см. в следующем разделе "Настройка местного времени".  
  
## <a name="local-time-adjustment"></a>Настройка местного времени  
 Местное время, которое представляет собой время в формате UTC, настраивается на местный часовой пояс, представлено структурой <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого имеет значение <xref:System.DateTimeKind.Local>. При восстановлении локального значения <xref:System.DateTime> из двоичного представления, созданного методом <xref:System.DateTime.ToBinary%2A>, метод <xref:System.DateTime.FromBinary%2A> может изменить повторно созданное значение так, чтобы оно не равнялось исходному значению. Это может произойти в следующих случаях.  
  
-   Если локальный объект <xref:System.DateTime> сериализуется в один часовой пояс с помощью метода <xref:System.DateTime.ToBinary%2A>, а затем десериализуется в другом часовом поясе методом <xref:System.DateTime.FromBinary%2A>, местное время, представленное полученным объектом <xref:System.DateTime>, автоматически корректируется до второго часового пояса.  
  
     Например, рассмотрим объект <xref:System.DateTime>, представляющий местное время в 3 вечера. Приложение, которое выполняется в США В тихоокеанском часовом поясе для преобразования объекта <xref:System.DateTime> в двоичное значение используется метод <xref:System.DateTime.ToBinary%2A>. Другое приложение, которое выполняется в США В Восточном часовом поясе используется метод <xref:System.DateTime.FromBinary%2A> для преобразования двоичного значения в новый объект <xref:System.DateTime>. Значение нового объекта <xref:System.DateTime> равно 6 P.M., что представляет тот же момент времени, что и исходное 3-часовое значение, но корректируется на местное время в Восточном часовом поясе.  
  
-   Если двоичное представление значения Local <xref:System.DateTime> представляет недопустимое время в местном часовом поясе системы, в которой вызывается <xref:System.DateTime.FromBinary%2A>, время корректируется так, чтобы оно было допустимым.  
  
     Например, переход с зимнего времени на летнее время происходит в США. Тихоокеанское значение часового пояса 14 марта 2010 г. в 2:00 утра, когда время увеличивается на час, до 3:00 утра Этот часовой интервал является недопустимым временем, то есть интервалом времени, который не существует в этом часовом поясе. В следующем примере показано, что когда время, попадающее в этот диапазон, преобразуется в двоичное значение методом <xref:System.DateTime.ToBinary%2A>, а затем восстанавливается методом <xref:System.DateTime.FromBinary%2A>, исходное значение корректируется на допустимое время. Можно определить, может ли определенное значение даты и времени изменяться путем передачи его в метод <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>, как показано в примере.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Рекомендации по версиям  
 Начиная с версии .NET Framework 2,0, структура @no__t 0 состоит из поля закрытого типа, которое указывает, основано ли указанное значение времени на основе местного времени, времени в формате UTC или ни для того, и для закрытого поля Tick, которое содержит число 100-наносекундных тактов, определяющих дату и время. Доступ к полю тактов можно получить с помощью свойства <xref:System.DateTime.Ticks%2A>, а доступ к полю Kind можно получить с помощью свойства <xref:System.DateTime.Kind%2A>.  
  
 До .NET Framework 2,0, если объект <xref:System.DateTime> был сериализован вручную, вместо использования интерфейса сериализации, такого как <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, требуется только сериализация данных тактов в структуре <xref:System.DateTime>. Начиная с версии 2,0, необходимо также сериализовать данные типа.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает текущую дату.</summary>
        <value>Объект, которому присвоена сегодняшняя дата, с компонентом времени, равным 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Начиная с версии .NET Framework 2,0, возвращаемое значение — это <xref:System.DateTime>, чье свойство <xref:System.DateTime.Kind%2A> возвращает <xref:System.DateTimeKind.Local>.  
  
 Поскольку она возвращает текущую дату без текущего времени, свойство <xref:System.DateTime.Today%2A> подходит для использования в приложениях, работающих только с датами. Дополнительные сведения см. в разделе [Выбор между DateTime, DateTimeOffset, TimeSpan и TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Напротив, свойство <xref:System.DateTime.TimeOfDay%2A> возвращает текущее время без текущей даты, а свойство <xref:System.DateTime.Now%2A> возвращает текущую дату и текущее время.  
  
   
  
## Examples  
 В следующем примере свойство <xref:System.DateTime.Date%2A> используется для получения текущей даты. Также показано, как можно отформатировать значение <xref:System.DateTime>, используя некоторые стандартные строки формата даты и времени. Обратите внимание, что результат, полученный третьим вызовом метода <xref:System.DateTime.ToString%28System.String%29>, использует описатель формата g для включения компонента времени, который равен нулю.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> во временную характеристику файла Windows.</summary>
        <returns>Значение текущего объекта <see cref="T:System.DateTime" />, представленное в виде временной характеристики файла Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время файла Windows — это 64-разрядное значение, представляющее количество интервалов 100-наносекундных, истекших с 12:00 полуночи, 1 января 1601 г. ЭРЫ Время в формате UTC. Windows использует время файла для записи, когда приложение создает, обращается к файлу или выполняет запись в него.  
  
 Метод <xref:System.DateTime.ToFileTime%2A> использует свойство <xref:System.DateTime.Kind%2A>, чтобы определить, является ли текущий объект <xref:System.DateTime> локальным временем, временем в формате UTC или неопределенным типом времени, который рассматривается как местное время.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ToFileTime%2A>.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Получившееся время файла представит дату и время до 0:00 1 января 1601 года нашей эры в формате UTC.</exception>
        <block subset="none" type="usage"><para>Обычно метод <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> восстанавливает значение <see cref="T:System.DateTime" />, сохраненное методом <see cref="M:System.DateTime.ToFileTime" />. Однако эти два значения могут отличаться при следующих условиях. 
— Если сериализация и десериализация значения <see cref="T:System.DateTime" /> происходят в разных часовых поясах. Например, если значение <see cref="T:System.DateTime" /> со значением времени 12:30 P.M. в США Восточный часовой пояс сериализуется, а затем десериализуется в США. Тихоокеанское время, исходное значение 12:30 P.M. настраивается до 9:30 утра. чтобы отразить разницу между двумя часовыми поясами.  
  
— Если сериализованное значение <see cref="T:System.DateTime" /> представляет недопустимое время в местном часовом поясе. В этом случае метод <see cref="M:System.DateTime.ToFileTime" /> корректирует восстановленное значение <see cref="T:System.DateTime" />, чтобы оно обозначает допустимое время в местном часовом поясе.  
  
Например, переход с зимнего времени на летнее время происходит в США. Тихоокеанское значение часового пояса 14 марта 2010 г. в 2:00 утра, когда время увеличивается на час, до 3:00 утра Этот часовой интервал является недопустимым временем, то есть интервалом времени, который не существует в этом часовом поясе. В следующем примере показано, что когда время, попадающее в этот диапазон, преобразуется в длинное целое число с помощью метода <see cref="M:System.DateTime.ToFileTime" />, а затем восстанавливается методом <see cref="M:System.DateTime.FromFileTime(System.Int64)" />, исходное значение корректируется на допустимое время. Можно определить, может ли определенное значение даты и времени изменяться путем передачи его в метод <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />, как показано в примере.  
  
[!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> во временную характеристику файла Windows.</summary>
        <returns>Значение текущего объекта <see cref="T:System.DateTime" />, представленное в виде временной характеристики файла Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время файла Windows — это 64-разрядное значение, представляющее количество интервалов 100-наносекундных, истекших с 12:00 полуночи, 1 января 1601 г. ЭРЫ Время в формате UTC. Windows использует время файла для записи, когда приложение создает, обращается к файлу или выполняет запись в него.  
  
 Метод <xref:System.DateTime.ToFileTimeUtc%2A> использует свойство <xref:System.DateTime.Kind%2A>, чтобы определить, является ли текущий объект <xref:System.DateTime> локальным временем, временем в формате UTC или неопределенным типом времени, который обрабатывается как время в формате UTC. Если это местное время, оно преобразует время в формат UTC перед выполнением преобразования в файловый момент Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Получившееся время файла представит дату и время до 0:00 1 января 1601 года нашей эры в формате UTC.</exception>
        <block subset="none" type="usage"><para>Метод <see cref="M:System.DateTime.ToFileTimeUtc" /> иногда используется для преобразования местного времени в формат UTC, а затем для его восстановления путем вызова метода <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />, за которым следует метод <see cref="M:System.DateTime.ToLocalTime" />. Однако если исходное время представляет недопустимое время в местном часовом поясе, то два значения местного времени не будут равны. Дополнительные сведения см. в описании метода <see cref="M:System.DateTime.ToLocalTime" />.</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в местное время.</summary>
        <returns>Объект, свойство <see cref="P:System.DateTime.Kind" /> которого имеет значение <see cref="F:System.DateTimeKind.Local" />, а значение является либо местным временем, эквивалентным значению текущего объекта <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MaxValue" />, если преобразованное значение слишком велико для представления объектом <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MinValue" />, если преобразованное значение слишком мало для представления объектом <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Местное время равно времени в формате UTC и смещению UTC. Дополнительные сведения о смещении UTC см. в разделе <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. При преобразовании также учитывается правило перехода на летнее время, которое применяется к времени, представленному текущим объектом <xref:System.DateTime>.  
  
> [!IMPORTANT]
>  В системах [!INCLUDE[winxp](~/includes/winxp-md.md)] метод <xref:System.DateTime.ToLocalTime%2A> распознает только текущее правило коррекции при преобразовании из формата UTC в местное время. В результате преобразования для периодов, предшествующих текущему правилу коррекции, могут не точно отражать разницу между временем в формате UTC и местным временем.  
  
 Начиная с версии .NET Framework 2,0, значение, возвращаемое методом <xref:System.DateTime.ToLocalTime%2A>, определяется свойством <xref:System.DateTime.Kind%2A> текущего объекта <xref:System.DateTime>. В следующей таблице приводятся возможные результаты.  
  
|Kind|Результаты|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Этот экземпляр <xref:System.DateTime> преобразуется в местное время.|  
|<xref:System.DateTimeKind.Local>|Преобразование не выполняется.|  
|<xref:System.DateTimeKind.Unspecified>|Этот экземпляр <xref:System.DateTime> считается временем в формате UTC, а преобразование выполняется так, как если бы <xref:System.DateTime.Kind%2A> было <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  Метод <xref:System.DateTime.ToLocalTime%2A> преобразует значение <xref:System.DateTime> в формате UTC в местное время. Чтобы преобразовать время в любом часовом поясе в местное время, используйте метод <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType>.  
  
 Значение, возвращаемое преобразованием, — это <xref:System.DateTime>, чье свойство <xref:System.DateTime.Kind%2A> всегда возвращает <xref:System.DateTimeKind.Local>. Следовательно, возвращается допустимый результат, даже если <xref:System.DateTime.ToLocalTime%2A> многократно применяется к тому же <xref:System.DateTime>.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ToLocalTime%2A>. Обратите внимание, что точный результат зависит от текущего языка и региональных параметров и местного часового пояса системы, в которой он выполняется.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 В следующем примере используется метод <xref:System.DateTime.SpecifyKind%2A>, чтобы продемонстрировать, как свойство <xref:System.DateTime.Kind%2A> влияет на методы преобразования <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Можно использовать метод <see cref="M:System.DateTime.ToLocalTime" /> для восстановления локального значения даты и времени, которое было преобразовано в формат UTC с помощью метода <see cref="M:System.DateTime.ToUniversalTime" /> или <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />. Однако если исходное время представляет недопустимое время в местном часовом поясе, оно не будет соответствовать восстановленному значению. Когда метод <see cref="M:System.DateTime.ToLocalTime" /> преобразует время из времени в формате UTC в местный часовой пояс, оно также корректирует время, чтобы оно было действительным в местном часовом поясе.  
  
Например, переход с зимнего времени на летнее время происходит в США. Тихоокеанское значение часового пояса 14 марта 2010 г. в 2:00 утра, когда время увеличивается на час, до 3:00 утра Этот часовой интервал является недопустимым временем, то есть интервалом времени, который не существует в этом часовом поясе. В следующем примере показано, что когда время, попадающее в этот диапазон, преобразуется в формат UTC методом <see cref="M:System.DateTime.ToUniversalTime" /> и затем восстанавливается методом <see cref="M:System.DateTime.ToLocalTime" />, исходное значение корректируется на допустимое время. Можно определить, может ли определенное значение даты и времени изменяться путем передачи его в метод <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />, как показано в примере.  
  
[!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему длинное строковое представление даты.</summary>
        <returns>Строка, содержащая длинное строковое представление даты текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего объекта <xref:System.DateTime> форматируется с использованием шаблона, определенного свойством <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>, связанным с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению, возвращаемому путем указания [строки стандартного формата DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "D" с помощью метода <xref:System.DateTime.ToString%28System.String%29>.  
  
> [!NOTE]
>  Строка, возвращаемая методом <xref:System.DateTime.ToLongDateString%2A>, зависит от языка и региональных параметров. Он отражает шаблон, определенный свойством <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern?displayProperty=nameWithType> текущего языка и региональных параметров. Например, для языка и региональных параметров en-US стандартный длинный шаблон даты обычно имеет формат dddd, мммм дд, гггг. для региональных параметров de-DE это "dddd, d. ММММ гггг "; для языка и региональных параметров ja-JP это "yyyy" 年 "月 d" 日 "". Обратите внимание, что его значение может изменяться в зависимости от реализации .NET и ее версии, операционной системы и ее версии, а также пользовательской настройки.

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]
  
## Examples

В следующем примере демонстрируется использование метода <xref:System.DateTime.ToLongDateString%2A>.  
  
[!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
[!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему длинное строковое представление времени.</summary>
        <returns>Строка, содержащая длинное строковое представление времени текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Значение текущего объекта <xref:System.DateTime> форматируется с использованием шаблона, определенного свойством <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType>, связанным с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению, возвращаемому при указании строки "T" [стандартного формата даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) с помощью метода <xref:System.DateTime.ToString%28System.String%29>.  
  
> [!NOTE]
>  Строка, возвращаемая методом <xref:System.DateTime.ToLongTimeString%2A>, зависит от языка и региональных параметров. Он отражает шаблон, определенный свойством <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> текущего языка и региональных параметров. Например, для языка и региональных параметров en-US стандартный длинный шаблон времени — «ч: СС TT»; для региональных параметров de-DE это "чч: мм: СС"; для языка и региональных параметров ja-JP это "ч: СС". Обратите внимание, что его значение может изменяться в зависимости от реализации .NET и ее версии, операционной системы и ее версии, а также пользовательской настройки.

[!INCLUDE[culture-sensitive-formatting](~/includes/thread-formatting.md)]
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ToLongTimeString%2A>.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует числовое значение этого экземпляра в эквивалентное ему значение даты OLE-автоматизации.</summary>
        <returns>Число двойной точности с плавающей запятой, содержащее значение даты OLE-автоматизации, эквивалентное значению этого экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дата OLE-автоматизации реализована в виде числа с плавающей запятой, целочисленный компонент которого равен количеству дней до или после полуночи 30 декабря 1899, а дробный компонент представляет время в этом дне, разделенное на 24. Например, полночь 31 декабря 1899 представляется 1,0; 6 утра, 1 января 1900 года, представленного 2,25; полночь, 29 декабря 1899, представленные-1,0; и 6 утра, 29 декабря 1899, представлены-1,25.  
  
 Базовая дата OLE-автоматизации — полночь 30 декабря 1899. Минимальная дата OLE-автоматизации — полночь, 1 января 0100. Максимальная дата OLE-автоматизации равна <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, последний момент 31 декабря 9999.  
  
 Метод <xref:System.DateTime.ToOADate%2A> создает исключение <xref:System.OverflowException>, если текущий экземпляр представляет дату, которая позже, чем <xref:System.DateTime.MaxValue> и более ранняя, чем полночь в January1, 0100. Однако если значение текущего экземпляра равно <xref:System.DateTime.MinValue>, метод возвращает 0.  
  
 Дополнительные сведения о OLE Automation см. в [библиотеке MSDN](https://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Значение этого экземпляра невозможно представить в виде даты автоматизации OLE.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему короткое строковое представление даты.</summary>
        <returns>Строка, содержащая короткое строковое представление даты текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего объекта <xref:System.DateTime> форматируется с использованием шаблона, определенного свойством <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType>, связанным с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению, возвращаемому путем указания [строки стандартного формата DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "d" с помощью метода <xref:System.DateTime.ToString%28System.String%29>.  
  
> [!NOTE]
>  Строка, возвращаемая методом <xref:System.DateTime.ToShortDateString%2A>, зависит от языка и региональных параметров. Он отражает шаблон, определенный свойством <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern?displayProperty=nameWithType> текущего языка и региональных параметров. Например, для языка и региональных параметров en-US стандартный короткий шаблон даты — "M/d/гггг"; для региональных параметров de-DE это "DD. MM. гггг "; для языка и региональных параметров ja-JP это "гггг/мм/дд". Обратите внимание, что его значение может изменяться в зависимости от реализации .NET и ее версии, операционной системы и ее версии, а также пользовательской настройки.

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ToShortDateString%2A>. Также показано, что результат вызова метода <xref:System.DateTime.ToShortDateString%2A> идентичен вызову метода <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> с "d" в качестве параметра формата.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему короткое строковое представление времени.</summary>
        <returns>Строка, содержащая короткое строковое представление времени текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Значение текущего объекта <xref:System.DateTime> форматируется с использованием шаблона, определенного свойством <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType>, связанным с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению, возвращаемому путем указания [строки стандартного формата DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "t" с помощью метода <xref:System.DateTime.ToString%28System.String%29>.  
  
> [!NOTE]
>  Строка, возвращаемая методом <xref:System.DateTime.ToShortTimeString%2A>, зависит от языка и региональных параметров. Он отражает шаблон, определенный свойством <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern?displayProperty=nameWithType> текущего языка и региональных параметров. Например, для языка и региональных параметров en-US стандартный короткий шаблон времени — «ч TT»; для региональных параметров de-DE это "чч: мм"; для языка и региональных параметров ja-JP это "ч.". Обратите внимание, что его значение может изменяться в зависимости от реализации .NET и ее версии, операционной системы и ее версии, а также пользовательской настройки. 

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ToShortTimeString%2A>.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему строковое представление.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное строковое представление с помощью соглашений о форматировании для текущего языка и региональных параметров.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего объекта <xref:System.DateTime> форматируется с помощью описателя общего формата даты и времени ("G"). Чтобы отформатировать его с помощью определенного описателя формата даты и времени, вызовите метод <xref:System.DateTime.ToString%28System.String%29>. Чтобы отформатировать его с помощью описателя общего формата даты и времени ("G") для определенного языка и региональных параметров, вызовите метод <xref:System.DateTime.ToString%28System.IFormatProvider%29>. Чтобы отформатировать его с помощью определенного описателя формата даты и времени и соглашений определенного языка и региональных параметров, вызовите метод <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>.  
  
 Этот метод использует сведения о форматировании, полученные из текущего языка и региональных параметров. В частности, он объединяет строки настраиваемого формата, возвращаемые свойствами <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> и <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> объекта <xref:System.Globalization.DateTimeFormatInfo>, возвращаемого свойством `Thread.CurrentThread.CurrentCulture.DateTimeFormat`. Для получения дополнительной информации см. <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Другие перегрузки метода <xref:System.DateTime.ToString%2A> позволяют указать язык и региональные параметры, используемые при форматировании, а также определить шаблон вывода значения <xref:System.DateTime>.  
  
   
  
## Examples  
 В следующем примере показано, как строковое представление значения <xref:System.DateTime>, возвращаемого методом <xref:System.DateTime.ToString>, зависит от текущего языка и региональных параметров потока. Он изменяет язык и региональные параметры текущего потока с EN-US на fr-FR на ja-JP. в каждом случае вызывается метод <xref:System.DateTime.ToString> для возврата строкового представления значения даты и времени с помощью этого языка и региональных параметров.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемого календарем, принятым для текущего языка и региональных параметров.</exception>
        <block subset="none" type="usage"><para>Метод <see cref="M:System.DateTime.ToString" /> возвращает строковое представление даты и времени в календаре, используемом текущим языком и региональными параметрами. Если значение текущего экземпляра <see cref="T:System.DateTime" /> предшествует <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней версии, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод @no__t создает исключение-3. Ниже приведен пример. Он пытается отформатировать дату за пределами диапазона класса <see cref="T:System.Globalization.HijriCalendar" />, если текущий язык и региональные параметры — арабский (Сирия).  
  
[!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему строковое представление с использованием указанных сведений о форматировании, связанных с языком и региональными параметрами.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />, заданное параметром <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего объекта <xref:System.DateTime> форматируется с помощью описателя общего формата даты и времени (' G '), который форматирует выходные данные с использованием краткого шаблона даты и длинного шаблона времени.  
  
 Формат короткого даты и длинного шаблона времени определяется параметром `provider`. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, соглашения о форматировании которых должны быть отражены в возвращаемой строке. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращаемый свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, определяет форматирование возвращаемой строки.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательский объект, реализующий интерфейс <xref:System.IFormatProvider>. Метод <xref:System.IFormatProvider.GetFormat%2A> возвращает объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, то используется объект <xref:System.Globalization.DateTimeFormatInfo>, связанный с текущим языком и региональными параметрами. Для получения дополнительной информации см. <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере показано строковое представление даты и времени с помощью объектов <xref:System.Globalization.CultureInfo>, которые представляют пять различных языков и региональных параметров.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемого календарем, используемым в <paramref name="provider" />.</exception>
        <block subset="none" type="usage"><para>Метод <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> возвращает строковое представление даты и времени в календаре, используемом культурой, представленной параметром <paramref name="provider" />. Его календарь определяется свойством <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Если значение текущего экземпляра <see cref="T:System.DateTime" /> предшествует <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней версии, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод @no__t создает исключение-3. Ниже приведен пример. Он пытается отформатировать дату, которая находится за пределами диапазона класса <see cref="T:System.Globalization.JapaneseCalendar" />.  
  
[!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Строка стандартного или пользовательского формата даты и времени.</param>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное строковое представление с использованием указанного формата и соглашений о форматировании, принятых для текущего языка и региональных параметров.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />, заданное параметром <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.ToString%28System.String%29> возвращает строковое представление значения даты и времени в определенном формате, в котором используются соглашения о форматировании текущего языка и региональных параметров. Дополнительные сведения см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Параметр `format` должен содержать один символ описателя формата (см. раздел [стандартные строки формата даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) или шаблон пользовательского формата (см. раздел [настраиваемые строки формата даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md)), определяющий формат возвращаемой строки. Если `format` имеет `null` или пустую строку, используется описатель общего формата "G".  
  
 Ниже перечислены некоторые способы использования этого метода.  
  
-   Получение строки, отображающей дату и время в коротком формате даты и времени в текущем языке и региональных параметрах. Для этого используется описатель формата "G".  
  
-   Получение строки, содержащей только месяц и год. Для этого используется строка формата "MM/гггг". В строке формата используется разделитель дат текущего языка и региональных параметров.  
  
-   Получение строки, содержащей дату и время в определенном формате. Например, строка формата "мм/дд/Иииихх: мм" отображает строку даты и времени в фиксированном формате, например "19//03//2013 18:06". Строка формата использует символ "/" в качестве фиксированного разделителя даты независимо от параметров, зависящих от языка и региональных параметров.  
  
-   Получение даты в сокращенном формате, который можно использовать для сериализации строки даты. Например, строка формата ГГГГММДД отображает год из четырех цифр, за которым следует двузначное число, состоящих из двух цифр, а в качестве разделителя дат — день.  
  
 В следующем примере эти три строки формата используются для вывода значения даты и времени с использованием соглашений о языках и региональных параметрах en-US и fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 В следующем примере используется каждая из стандартных строк формата даты и времени и выделены строки настраиваемых форматов даты и времени для отображения строкового представления значения <xref:System.DateTime>. Текущий язык и региональные параметры потока для примера — en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Длина <paramref name="format" /> равна 1, и он не является одним из символов описателя формата, определенного для <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
- или - 
 Параметр <paramref name="format" /> не содержит допустимый пользовательский шаблон формата.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемого календарем, принятым для текущего языка и региональных параметров.</exception>
        <block subset="none" type="usage"><para>Метод <see cref="M:System.DateTime.ToString(System.String)" /> возвращает строковое представление даты и времени в календаре, используемом текущим языком и региональными параметрами. Если значение текущего экземпляра <see cref="T:System.DateTime" /> предшествует <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней версии, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод @no__t создает исключение-3. Ниже приведен пример. Он пытается отформатировать дату за пределами диапазона класса <see cref="T:System.Globalization.HebrewCalendar" />, если текущий язык и региональные параметры — иврит (Израиль).  
  
[!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка стандартного или пользовательского формата даты и времени.</param>
        <param name="provider">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему строковое представление с использованием указанного формата и сведений об особенностях формата для данного языка и региональных параметров.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />, заданное параметрами <paramref name="format" /> и <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `format` может содержать один символ описателя формата (см. раздел [стандартные строки формата даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) или шаблон пользовательского формата (см. раздел [настраиваемые строки формата даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Если `format` имеет значение `null` или является пустой строкой (""), используется описатель стандартного формата "G".  
  
 Параметр `provider` определяет шаблон, соответствующий описателем стандартного формата, а также символам и именам компонентов даты и времени. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, соглашения о форматировании которых должны быть отражены в возвращаемой строке. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращаемый свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, определяет форматирование возвращаемой строки.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательский объект, реализующий интерфейс <xref:System.IFormatProvider>. Метод <xref:System.IFormatProvider.GetFormat%2A> возвращает объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, используется <xref:System.Globalization.DateTimeFormatInfo>, связанный с текущим языком и региональными параметрами. Для получения дополнительной информации см. <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере используется каждый из стандартных строк формата даты и времени для отображения строкового представления даты и времени для четырех различных языков и региональных параметров.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 В следующем примере показаны различные способы форматирования значения <xref:System.DateTime> с помощью инвариантного <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Длина <paramref name="format" /> равна 1, и он не является одним из символов описателя формата, определенного для <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
-или- 
 <paramref name="format" /> не содержит допустимого шаблона пользовательского формата.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемого календарем, используемым в <paramref name="provider" />.</exception>
        <block subset="none" type="usage"><para>Метод <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> возвращает строковое представление даты и времени в календаре, используемом параметром <paramref name="provider" />. Его календарь определяется свойством <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Если значение текущего экземпляра <see cref="T:System.DateTime" /> предшествует <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней версии, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод @no__t создает исключение-3. Ниже приведен пример. Он пытается отформатировать дату, которая находится за пределами диапазона класса <see cref="T:System.Globalization.UmAlQuraCalendar" />.  
  
[!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">Пример: служебная программа форматирования .NET CoreC#WinForms ()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">Пример: служебная программа форматирования для .NET Core WinForms (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> во время UTC.</summary>
        <returns>Объект, свойство <see cref="P:System.DateTime.Kind" /> которого имеет значение <see cref="F:System.DateTimeKind.Utc" />, а значение является либо временем в формате UTC, эквивалентным значению текущего объекта <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MaxValue" />, если преобразованное значение слишком велико для представления объектом <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MinValue" />, если преобразованное значение слишком мало для представления объектом <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время в формате UTC равно значению местного времени минус смещение в формате UTC. Дополнительные сведения о смещении UTC см. в разделе <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. При преобразовании также учитывается правило перехода на летнее время, которое применяется к времени, представленному текущим объектом <xref:System.DateTime>.  
  
> [!IMPORTANT]
>  В системах [!INCLUDE[winxp](~/includes/winxp-md.md)] метод <xref:System.DateTime.ToUniversalTime%2A> распознает только текущее правило коррекции при преобразовании из местного времени в время в формате UTC. В результате преобразования для периодов, предшествующих текущему правилу коррекции, могут не точно отражать разницу между местным временем и временем в формате UTC.  
  
 Начиная с версии .NET Framework 2,0, значение, возвращаемое методом <xref:System.DateTime.ToUniversalTime%2A>, определяется свойством <xref:System.DateTime.Kind%2A> текущего объекта <xref:System.DateTime>. В следующей таблице приводятся возможные результаты.  
  
|Kind|Результаты|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Преобразование не выполняется.|  
|<xref:System.DateTimeKind.Local>|Текущий объект <xref:System.DateTime> преобразуется в формат UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Предполагается, что текущий объект <xref:System.DateTime> является местным временем, а преобразование выполняется так, как если бы <xref:System.DateTime.Kind%2A> было <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  Метод <xref:System.DateTime.ToUniversalTime%2A> преобразует значение <xref:System.DateTime> из местного времени в UTC. Чтобы преобразовать время в неместном часовом поясе в UTC, используйте метод <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>. Чтобы преобразовать время, смещение которого известно от времени в формате UTC, используйте метод <xref:System.DateTimeOffset.ToUniversalTime%2A>.  
  
 Если значение экземпляра даты и времени является неоднозначным, этот метод предполагает, что это стандартное время. (Неоднозначное время — это значение, которое может сопоставляться со стандартным временем или с переходом на летнее время в местном часовом поясе). Если значение экземпляра даты и времени является недопустимым, этот метод просто вычитает местное время из смещения UTC местного часового пояса, чтобы получить время в формате UTC. (Неверное время не существует из-за применения правил коррекции летнего времени.)  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 В следующем примере используется метод <xref:System.DateTime.SpecifyKind%2A>, чтобы продемонстрировать, как свойство <xref:System.DateTime.Kind%2A> влияет на методы преобразования <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Метод <see cref="M:System.DateTime.ToUniversalTime" /> иногда используется для преобразования местного времени в UTC. Затем вызывается метод <see cref="M:System.DateTime.ToLocalTime" /> для восстановления исходного местного времени. Однако если исходное время представляет недопустимое время в местном часовом поясе, то два значения местного времени не будут равны. Дополнительные сведения и пример см. в описании метода <see cref="M:System.DateTime.ToLocalTime" />.  
  
В системах [!INCLUDE[winxp](~/includes/winxp-md.md)] метод <see cref="M:System.DateTime.ToUniversalTime" /> распознает только текущее правило коррекции для местного часового пояса, которое применяется ко всем датам, включая даты нижнего уровня (то есть даты, предшествующие дате начала текущего правила коррекции). Приложения, работающие на [!INCLUDE[winxp](~/includes/winxp-md.md)], для которых требуются исторические точные вычисления локальных дат и времени, должны обойти это поведение, используя метод <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> для получения объекта <see cref="T:System.TimeZoneInfo" />, соответствующего локальному часовому поясу и вызова его метода <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />.  
  
В следующем примере показано различие между методами <see cref="M:System.DateTime.ToUniversalTime" /> и <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> в системе [!INCLUDE[winxp](~/includes/winxp-md.md)] в США. тихоокеанском стандартном часовом поясе США. Первые два вызова метода применяют текущее правило коррекции часового пояса (которое вступает в действие в 2007) к дате в 2006. Текущее правило коррекции обеспечивает переход на летнее время во второе воскресенье марта. предыдущее правило, которое действовало в 2006, было введено для перехода на летнее время в первое воскресенье апреля. Только третий вызов метода точно выполняет это преобразование исторических дат и времени.  
  
[!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразовывает указанное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" /> и возвращает значение, позволяющее определить успешность преобразования.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <paramref name="s" />, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование завершилось неудачей. Преобразование завершается неудачей, если значение параметра <paramref name="s" /> равно <see langword="null" /> или пустой строке ("") или не содержит допустимого строкового представления даты и времени. Этот параметр передается неинициализированным.</param>
        <summary>Преобразовывает указанное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" /> и возвращает значение, позволяющее определить успешность преобразования.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> аналогичен методу <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType>, за исключением того, что метод <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> не создает исключение в случае сбоя преобразования.  
  
 Строка `s` анализируется с помощью сведений о форматировании в текущем объекте <xref:System.Globalization.DateTimeFormatInfo>, который неявно предоставляется культурой текущего потока.  
  
 Этот метод пытается проигнорировать нераспознанные данные, если это возможно, и заполнить отсутствующие данные месяца, дня и года на текущую дату. Если `s` содержит только дату без времени, этот метод предполагает, что время составляет 12:00 полночь. Если `s` включает компонент даты с двузначным годом, он преобразуется в год текущего календаря языка и региональных параметров в соответствии со значением свойства <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>. Любой начальный, внутренний или конечный символ пробела в `s` игнорируется. Дата и время могут быть заключены в скобки с парой начальных и конечных символов РЕШЕТКи (' # ', U + 0023), а также могут заканчиваться одним или несколькими символами NULL (U + 0000).  
  
 Поскольку метод <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> пытается проанализировать строковое представление даты и времени с помощью правил форматирования текущего языка и региональных параметров, попытка выполнить синтаксический анализ определенной строки в разных культурах может завершиться неудачей или возвращать разные результаты. Если конкретный формат даты и времени будет анализироваться по разным языкам, используйте метод <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> или одну из перегрузок метода <xref:System.DateTime.TryParseExact%2A> и укажите описатель формата.  
  
 Если `s` является строковым представлением високосного дня в високосном году в текущем календаре, метод анализирует `s` успешно. Если `s` является строковым представлением високосного дня в невисокосном году текущего календаря текущего языка и региональных параметров, операция синтаксического анализа завершается ошибкой, а метод возвращает `false`.  
  
 Если `s` не содержит сведений о часовом поясе, `result` содержит значение <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, если метод возвращает. Если строка для синтаксического анализа содержит сведения о часовом поясе, `result` содержит <xref:System.DateTime>, чье свойство <xref:System.DateTime.Kind%2A> — <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, когда метод возвращает значение.  
  
   
  
## Examples  
 В следующем примере число строк даты и времени передается в метод <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>На форматирование влияют свойства текущего объекта <see cref="T:System.Globalization.DateTimeFormatInfo" />, которые по умолчанию наследуются из элемента **язык и региональные стандарты** панели управления. Метод <see cref="Overload:System.DateTime.TryParse" /> может неожиданно завершиться с ошибкой и возвращать <see langword="False" />, если для свойств Current <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> и <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> задано одно и то же значение.</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">Пример: служебная программа форматирования .NET CoreC#WinForms ()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">Пример: служебная программа форматирования для .NET Core WinForms (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <paramref name="s" /> в зависимости от языка и региональных параметров.</param>
        <param name="styles">Побитовая комбинация значений перечисления, которая определяет, как интерпретировать проанализированную дату по отношению к текущему часовому поясу или текущей дате. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">После возврата из этого метода, содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <paramref name="s" />, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование завершилось неудачей. Преобразование завершается неудачей, если значение параметра <paramref name="s" /> равно <see langword="null" /> или пустой строке ("") или не содержит допустимого строкового представления даты и времени. Этот параметр передается неинициализированным.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя указанную информацию о форматировании, связанную с языком и региональными параметрами, и возвращает значение, которое показывает успешность преобразования.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> анализирует строку, которая может содержать дату, время и сведения о часовом поясе. Он аналогичен методу <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>, за исключением того, что метод <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> не создает исключение в случае сбоя преобразования.  
  
 Этот метод пытается пропускать нераспознанные данные и полностью проанализировать `s`. Если `s` содержит время, но не имеет даты, метод по умолчанию заменяет текущую дату или, если `styles` включает флаг <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>, он подставляет `DateTime.Date.MinValue`. Если `s` содержит дату, но не имеет времени, в качестве времени по умолчанию используется 12:00 полночь. Если дата имеется, но ее компонент года состоит только из двух цифр, он преобразуется в год в текущем календаре параметра `provider` в зависимости от значения свойства <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>. Любые начальные, внутренние или конечные пробелы в `s` не учитываются. Дата и время могут быть заключены в скобки с парой начальных и конечных символов РЕШЕТКи (' # ', U + 0023), а также могут заканчиваться одним или несколькими символами NULL (U + 0000).  
  
 Конкретные допустимые форматы для элементов даты и времени, а также имена и символы, используемые в датах и времени, определяются параметром `provider`, который может иметь одно из следующих значений:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, форматирование которых используется в параметре `s`. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращаемый свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, определяет форматирование, используемое в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий форматирование, используемое в `s`.  
  
-   Пользовательская реализация интерфейса <xref:System.IFormatProvider>. Метод <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> возвращает объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий форматирование, используемое в `s`.  
  
 Если значением параметра `provider` является `null`, используется текущий язык и региональные параметры.  
  
 Если `s` является строковым представлением високосного дня в високосном году в текущем календаре, метод анализирует `s` успешно. Если `s` является строковым представлением високосного дня в невисокосном году в текущем календаре `provider`, операция синтаксического анализа завершается ошибкой, а метод возвращает `false`.  
  
 Параметр `styles` определяет точную интерпретацию проанализированной строки и то, как она должна обрабатываться операцией анализа. Это может быть один или несколько членов перечисления <xref:System.Globalization.DateTimeStyles>, как описано в следующей таблице.  
  
|DateTimeStyles, элемент|Описание|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и при необходимости преобразует его в время в формате UTC. Если `s` включает смещение часового пояса или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, метод анализирует строку, вызывает <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращенного значения <xref:System.DateTime> в формат UTC и задает для свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, метод анализирует строку, не выполняет преобразование часового пояса для возвращенного значения <xref:System.DateTime> и устанавливает свойство <xref:System.DateTime.Kind%2A>. в <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает никакого влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Несмотря на допустимость, это значение игнорируется. Внутренние пробелы разрешены в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Несмотря на допустимость, это значение игнорируется. Начальные пробелы разрешены в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Несмотря на допустимость, это значение игнорируется. Конечные пробелы разрешены в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы. Это поведение установлено по умолчанию. Он не может быть переопределен путем предоставления более однозначного значения перечисления <xref:System.Globalization.DateTimeStyles>, такого как <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что оно представляет местное время. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что он представляет время в формате UTC. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, метод преобразует возвращенное значение <xref:System.DateTime> из UTC в местное время и устанавливает для его свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Несмотря на допустимость, это значение игнорируется.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование строки даты и времени в значение <xref:System.DateTime> со свойством <xref:System.DateTime.Kind%2A>, равным <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Как правило, такая строка создается путем вызова метода <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> с помощью описателей стандартного формата "o", "r" или "u".|  
  
 Если `s` не содержит сведений о часовом поясе, метод <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> возвращает значение <xref:System.DateTime>, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, если только флаг `styles` не указывает в противном случае. Если `s` включает сведения о часовом поясе или часовом поясе, метод <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> выполняет все необходимое преобразование времени и возвращает одно из следующих:  
  
-   Значение <xref:System.DateTime>, Дата и время которой соответствуют местному времени, а свойство <xref:System.DateTime.Kind%2A> — <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Или, если `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>, то <xref:System.DateTime>, Дата и время которой соответствуют UTC, а свойство <xref:System.DateTime.Kind%2A> имеет значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Это поведение можно переопределить с помощью флага <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.  
  
## <a name="parsing-custom-cultures"></a>Анализ пользовательских культур  
 При синтаксическом анализе строки даты и времени, созданной для пользовательского языка и региональных параметров, используйте метод <xref:System.DateTime.TryParseExact%2A> вместо метода <xref:System.DateTime.TryParse%2A>, чтобы повысить вероятность того, что операция анализа будет выполнена. Строка даты и времени пользовательского языка и региональных параметров может быть сложной и сложной для анализа. Метод <xref:System.DateTime.TryParse%2A> пытается выполнить синтаксический анализ строки с несколькими неявными шаблонами анализа, все из которых может завершиться ошибкой. Напротив, метод <xref:System.DateTime.TryParseExact%2A> требует явного назначения одного или более точных шаблонов анализа, которые, вероятнее всего, будут успешны.  
  
 Дополнительные сведения о пользовательских культурах см. в разделе класс <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере показан метод <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> не является допустимым значением <see cref="T:System.Globalization.DateTimeStyles" />.  
  
-или- 
 <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" /> (например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> ).</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" /> является нейтральным языком и региональными параметрами и не может использоваться в операции анализа.</exception>
        <block subset="none" type="usage"><para>На форматирование влияют свойства текущего объекта <see cref="T:System.Globalization.DateTimeFormatInfo" />, который предоставляется параметром <paramref name="provider" />. Метод <see cref="Overload:System.DateTime.TryParse" /> может неожиданно завершиться с ошибкой и возвращать <see langword="False" />, если для свойств Current <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> и <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> задано одно и то же значение.</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />. Формат строкового представления должен полностью соответствовать заданному формату. Метод возвращает значение, указывающее, успешно ли выполнено преобразование.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="format">Необходимый формат <paramref name="s" />.</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <paramref name="s" /> в зависимости от языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация одного или нескольких значений перечисления, которые указывают на разрешенный формат параметра <paramref name="s" />.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <paramref name="s" />, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование завершилось неудачей. Преобразование завершается неудачей, если в значением параметра <paramref name="s" /> или <paramref name="format" /> является <see langword="null" /> либо пустая строка, или не является дата и время, соответствующие шаблону, заданному в параметре <paramref name="format" />. Этот параметр передается неинициализированным.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный формат, указанные сведения о форматировании, связанные с языком и региональными параметрами, а также стиль. Формат строкового представления должен полностью соответствовать заданному формату. Метод возвращает значение, указывающее, успешно ли выполнено преобразование.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> анализирует строковое представление даты, которое должно быть в формате, определенном параметром `format`. Он аналогичен методу <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>, за исключением того, что метод <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> не создает исключение в случае сбоя преобразования.  
  
 Параметр `s` содержит дату и время для синтаксического анализа и должно иметь формат, определенный параметром `format`. Если в `s` присутствуют элементы даты, времени и часового пояса, они также должны присутствовать в порядке, заданном `format`. Если `format` определяет дату без элемента времени и операция синтаксического анализа выполняется успешно, то полученное значение <xref:System.DateTime> будет иметь время полуночи (00:00:00). Если `format` определяет время без элемента даты и операция синтаксического анализа выполняется успешно, результирующее значение <xref:System.DateTime> по умолчанию имеет дату `DateTime.Now.Date` или имеет дату `DateTime.MinValue.Date`, если `styles` включает флаг <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>. Параметр `style` определяет, может ли параметр `s` содержать начальные, внутренние или конечные символы пробела.  
  
 Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, возвращающего <xref:System.DateTime> значение, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью флагов <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, которые возвращают значение <xref:System.DateTime.Kind%2A>, свойство  которого равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если параметр содержит сведения о часовом поясе, то время преобразуется в местное время, если это необходимо, а свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>, чтобы не преобразовывать время в формате UTC в местное время и установить свойство <xref:System.DateTime.Kind%2A> в значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Параметр `format` содержит шаблон, соответствующий ожидаемому формату параметра `s`. Шаблон в параметре `format` состоит из одного или нескольких настраиваемых описателей формата в таблице [строк настраиваемого формата даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md) или одного стандартного описателя формата, который определяет предопределенный шаблон с учетом [стандартной даты и времени. Формат таблицы строк](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Если в шаблоне пользовательского формата не используются разделители даты или времени, используйте инвариантный язык и региональные параметры для параметра `provider` и самую широкую форму описателя настраиваемого формата. Например, если вы хотите указать часы в шаблоне, укажите более широкую форму, "HH", а не более узкую форму "H".  
  
> [!NOTE]
>  Вместо того чтобы `s` соответствовать одному формату, чтобы операция синтаксического анализа была выполнена, можно вызвать метод <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> и указать несколько разрешенных форматов. Это делает операцию анализа более вероятной для выполнения.  
  
 Конкретные символы и строки даты и времени (например, названия дней недели на определенном языке), используемые в `s`, определяются параметром `provider`, как и точный формат `s`, если `format` является строкой описателя стандартного формата. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, используемые для интерпретации `s`. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращенный свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательская реализация <xref:System.IFormatProvider>, метод <xref:System.IFormatProvider.GetFormat%2A>, возвращает либо объект <xref:System.Globalization.CultureInfo>, либо объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, то используется объект <xref:System.Globalization.CultureInfo>, соответствующий текущему языку и региональным параметрам.  
  
 Параметр `styles` включает один или несколько элементов перечисления <xref:System.Globalization.DateTimeStyles>, которые определяют, могут ли и где пробелы, не определенные `format`, отображаться в `s`, и управлять точным поведением операции синтаксического анализа. В следующей таблице описано, как каждый элемент перечисления <xref:System.Globalization.DateTimeStyles> влияет на работу метода <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>.  
  
|DateTimeStyles, элемент|Описание|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и при необходимости преобразует его в время в формате UTC. Если `s` включает смещение часового пояса или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, метод анализирует строку, вызывает <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращенного значения <xref:System.DateTime> в формат UTC и задает для свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, метод анализирует строку, не выполняет преобразование часового пояса для возвращенного значения <xref:System.DateTime> и устанавливает свойство <xref:System.DateTime.Kind%2A>. в <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает никакого влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы, не определенные `format`, могут отображаться между любым отдельным элементом даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не определенные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что оно представляет местное время. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что он представляет время в формате UTC. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, метод преобразует возвращенное значение <xref:System.DateTime> из UTC в местное время и устанавливает для его свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит сведения о времени без даты, то дата возвращаемого значения устанавливается равным `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Параметр `s` анализируется с использованием значений по умолчанию. В `format` не допускаются пробелы, кроме тех, что есть. Если `s` не имеет компонента даты, то дата возвращаемого значения <xref:System.DateTime> устанавливается равным 1/1/0001. Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если сведения о часовом поясе находятся в `s`, время преобразуется в местное время, а свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в значение <xref:System.DateTime> со свойством <xref:System.DateTime.Kind%2A>, равным <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Этот флаг, в первую очередь, предотвращает преобразование времени в формате UTC в местное время.|  
  
   
  
## Examples  
 В следующем примере демонстрируется использование метода <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>. Обратите внимание, что строка "5/01/2009 8:30 AM" не может быть успешно проанализирована, если параметр `styles` равен <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>, так как в `format` не допускаются начальные пробелы. Кроме того, невозможно успешно выполнить синтаксический анализ строки "5/01/2009 09:00" с `format` из "MM/ДД/иииихх: mm", так как строка даты не предшествует номеру месяца с нулем в начале, так как `format` требует.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> не является допустимым значением <see cref="T:System.Globalization.DateTimeStyles" />.  
  
- или - 
 <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" /> (например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> ).</exception>
        <block subset="none" type="usage"><para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] метод <see cref="Overload:System.DateTime.TryParseExact" /> возвращает <see langword="false" />, если анализируемая строка содержит компонент часа и указатель AM/PM, который не является соглашением. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях указатель AM/PM игнорируется.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="formats">Массив разрешенных форматов <paramref name="s" />.</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <paramref name="s" /> для определенного языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация значений перечисления, которая показывает разрешенный формат параметра <paramref name="s" />. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <paramref name="s" />, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование завершилось неудачей. Преобразование завершается неудачей, если <paramref name="s" /> или <paramref name="formats" /> имеет значение <see langword="null" />, либо <paramref name="s" /> или элемент <paramref name="formats" /> является пустой строкой, либо формат <paramref name="s" /> не в точности соответствует заданному хотя бы одним из шаблонов формата в <paramref name="formats" />. Этот параметр передается неинициализированным.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный массив форматов, указанные сведения о форматировании, связанные с языком и региональными параметрами, и стиль форматирования. Формат представления строки должен полностью соответствовать хотя бы одному заданному формату. Метод возвращает значение, указывающее, успешно ли выполнено преобразование.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> анализирует строковое представление даты, совпадающей с любым из шаблонов, назначенных параметру `formats`. Он похож на метод <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>, за исключением того, что метод <xref:System.DateTime.TryParseExact%2A> не создает исключение в случае сбоя преобразования.  
  
 Параметр `s` содержит дату и время для синтаксического анализа. Если параметр `s` содержит только время и дату, используется текущая дата, если параметр `style` не включает флаг <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>. в этом случае используется дата по умолчанию (`DateTime.Date.MinValue`). Если параметр `s` содержит только дату и время, то используется полночь (00:00:00). Параметр `style` также определяет, может ли параметр `s` содержать начальные, внутренние или конечные символы пробела, отличные от тех, которые разрешены одной из строк формата в `formats`.  
  
 Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, возвращающего <xref:System.DateTime> значение, свойство <xref:System.DateTime.Kind%2A> которого равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью флагов <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, которые возвращают значение <xref:System.DateTime.Kind%2A>, свойство  которого равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если параметр содержит сведения о часовом поясе, то время преобразуется в местное время, если это необходимо, а свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью флага <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>, чтобы не преобразовывать время в формате UTC в местное время и установить свойство <xref:System.DateTime.Kind%2A> в значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Параметр `formats` содержит массив шаблонов, один из которых `s` должен точно соответствовать, если операция синтаксического анализа выполнена. Шаблоны в параметре `formats` состоят из одного или нескольких настраиваемых описателей формата в таблице [строк настраиваемого формата даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md) или одного стандартного описателя формата, который определяет предопределенный шаблон, от [стандартных даты и времени. Формат таблицы строк](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Если в шаблоне пользовательского формата не используются разделители даты или времени, используйте инвариантный язык и региональные параметры для параметра `provider` и самую широкую форму описателя настраиваемого формата. Например, если вы хотите указать часы в шаблоне, укажите более широкую форму, "HH", а не более узкую форму "H".  
  
 Конкретные символы и строки даты и времени (например, названия дней недели на определенном языке), используемые в `s`, определяются параметром `provider`, как и точный формат `s`, если `format` является строкой описателя стандартного формата. Параметр `provider` может быть любым из следующих:  
  
-   Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, используемые для интерпретации `s`. Объект <xref:System.Globalization.DateTimeFormatInfo>, возвращенный свойством <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo>, определяющий формат данных даты и времени.  
  
-   Пользовательская реализация <xref:System.IFormatProvider>, метод <xref:System.IFormatProvider.GetFormat%2A>, возвращает либо объект <xref:System.Globalization.CultureInfo>, либо объект <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения о форматировании.  
  
 Если `provider` равно `null`, то используется объект <xref:System.Globalization.CultureInfo>, соответствующий текущему языку и региональным параметрам.  
  
 Параметр `styles` включает один или несколько элементов перечисления <xref:System.Globalization.DateTimeStyles>, которые определяют, могут ли и где пробелы, не определенные `format`, отображаться в `s`, и управлять точным поведением операции синтаксического анализа. В следующей таблице описано, как каждый элемент перечисления <xref:System.Globalization.DateTimeStyles> влияет на работу метода <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>.  
  
|DateTimeStyles, элемент|Описание|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и при необходимости преобразует его в время в формате UTC. Если `s` включает смещение часового пояса или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, метод анализирует строку, вызывает <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращенного значения <xref:System.DateTime> в формат UTC и задает для свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведений о часовом поясе, но `styles` включает флаг <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, метод анализирует строку, не выполняет преобразование часового пояса для возвращенного значения <xref:System.DateTime> и устанавливает свойство <xref:System.DateTime.Kind%2A>. в <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает никакого влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы, не определенные `format`, могут отображаться между любым отдельным элементом даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы, не определенные `format`, могут присутствовать в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не определенные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что оно представляет местное время. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` не содержит сведений о часовом поясе, предполагается, что он представляет время в формате UTC. Если флаг <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> отсутствует, метод преобразует возвращенное значение <xref:System.DateTime> из UTC в местное время и устанавливает для его свойства <xref:System.DateTime.Kind%2A> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит сведения о времени без даты, то дата возвращаемого значения устанавливается равным `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Параметр `s` анализируется с использованием значений по умолчанию. В `format` не допускаются пробелы, кроме тех, что есть. Если `s` не имеет компонента даты, то дата возвращаемого значения <xref:System.DateTime> устанавливается равным 1/1/0001. Если `s` не содержит сведений о часовом поясе, свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если сведения о часовом поясе находятся в `s`, время преобразуется в местное время, а свойство <xref:System.DateTime.Kind%2A> возвращенного объекта <xref:System.DateTime> устанавливается в <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в значение <xref:System.DateTime> со свойством <xref:System.DateTime.Kind%2A>, равным <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Этот флаг, в первую очередь, предотвращает преобразование времени в формате UTC в местное время.|  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>, чтобы обеспечить возможность успешного анализа строки в ряде возможных форматов.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> не является допустимым значением <see cref="T:System.Globalization.DateTimeStyles" />.  
  
-или- 
 <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" /> (например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> ).</exception>
        <block subset="none" type="usage"><para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] метод <see cref="Overload:System.DateTime.TryParseExact" /> возвращает <see langword="false" />, если анализируемая строка содержит компонент часа и указатель AM/PM, который не является соглашением. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях указатель AM/PM игнорируется.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Анализ строк даты и времени в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Строки стандартных форматов даты и времени</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Строки настраиваемых форматов даты и времени</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.DateTime" />, которому присвоены текущие дата и время данного компьютера, выраженные как время UTC.</summary>
        <value>Объект, значение которого является текущим значением даты и времени в формате UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Разрешение этого свойства зависит от системного таймера, который зависит от базовой операционной системы. Оно может составлять от 0,5 до 15 миллисекунд.

 Начиная с версии .NET Framework 2,0, возвращаемое значение — это <xref:System.DateTime>, чье свойство <xref:System.DateTime.Kind%2A> возвращает <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Альтернативой использованию <xref:System.DateTime.UtcNow%2A> является <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Хотя первое указывает, что значение даты и времени имеет формат UTC, присваивая <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> свойству <xref:System.DateTime.Kind%2A>, второе присваивает значение даты и времени значению смещения времени в формате UTC (равно <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 В следующем примере используется метод <xref:System.DateTime.SpecifyKind%2A>, чтобы продемонстрировать, как свойство <xref:System.DateTime.Kind%2A> влияет на методы преобразования <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент года даты, представленной этим экземпляром.</summary>
        <value>Значение года в диапазоне от 1 до 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Year%2A> возвращает год текущего экземпляра в григорианском календаре. Он не возвращает год, используя календарь по умолчанию текущего языка и региональных параметров. Чтобы получить год с помощью конкретного календаря, можно вызвать метод `GetYear` этого календаря, как показано в следующем коде.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 В следующем примере демонстрируется свойство <xref:System.DateTime.Year%2A>.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>
