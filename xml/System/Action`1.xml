<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="338489194ba66d31e69848f23081ce6f51f576eb" /><Meta Name="ms.sourcegitcommit" Value="3facd7aafd1f5ffe2afede7ecab64614a55d408e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/18/2019" /><Meta Name="ms.locfileid" Value="75186638" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Тип параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="obj">Параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод, который принимает один параметр и не возвращает значения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать делегат <xref:System.Action%601>, чтобы передать метод в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь один параметр, который передается ему по значению и не должен возвращать значение. (В C#метод должен возвращать `void`. В Visual Basic он должен быть определен `Sub`...`End Sub` создания. Это также может быть метод, возвращающий значение, которое игнорируется.) Как правило, такой метод используется для выполнения операции.  
  
> [!NOTE]
>  Для ссылки на метод, который имеет один параметр и возвращает значение, используйте вместо него универсальный делегат <xref:System.Func%602>.  
  
 При использовании делегата <xref:System.Action%601> нет необходимости явно определять делегат, инкапсулирующий метод с одним параметром. Например, следующий код явно объявляет делегат с именем `DisplayMessage` и присваивает его экземпляру делегата ссылку на метод <xref:System.Console.WriteLine%2A> или метод `ShowWindowsMessage`.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 В следующем примере этот код упрощается путем создания экземпляра делегата <xref:System.Action%601> вместо явного определения нового делегата и назначения ему именованного метода.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Также можно использовать делегат <xref:System.Action%601> с анонимными методами в C#, как показано в следующем примере. (Общие сведения о анонимных методах см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Можно также присвоить лямбда-выражение экземпляру делегата <xref:System.Action%601>, как показано в следующем примере. (Общие сведения о лямбда-выражениях см. в разделе [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 Методы <xref:System.Collections.Generic.List%601.ForEach%2A> и <xref:System.Array.ForEach%2A> принимают <xref:System.Action%601> делегат в качестве параметра. Метод, инкапсулированный делегатом, позволяет выполнять действия с каждым элементом в массиве или списке. В примере используется метод <xref:System.Collections.Generic.List%601.ForEach%2A> для предоставления иллюстрации.  
  
   
  
## Examples  
 В следующем примере показано использование делегата <xref:System.Action%601> для вывода содержимого объекта <xref:System.Collections.Generic.List%601>. В этом примере для вывода содержимого списка на консоль используется метод `Print`. Кроме того, в C# примере также демонстрируется использование анонимных методов для вывода содержимого на консоль. Обратите внимание, что в примере явно не объявляется переменная <xref:System.Action%601>. Вместо этого он передает ссылку на метод, который принимает один параметр и не возвращает значение методу <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>, один параметр которого является делегатом <xref:System.Action%601>. Аналогично, в C# примере экземпляр делегата <xref:System.Action%601> не создается явным образом, так как сигнатура анонимного метода совпадает с сигнатурой <xref:System.Action%601> делегата, который ожидается методом <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>.  

  [!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]
 
 [!code-csharp-interactive[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
