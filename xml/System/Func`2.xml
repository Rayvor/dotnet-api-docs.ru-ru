<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5b5d14df8149ebddeaa83bb4e5b12ca36ebde4a1" /><Meta Name="ms.sourcegitcommit" Value="9310f96004cd02c3dd21b963e01f1cbd6067ae6b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/23/2019" /><Meta Name="ms.locfileid" Value="74450487" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" Index="0" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Тип параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="arg">Параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод с одним параметром, который возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</summary>
    <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат можно использовать для представления метода, который можно передать в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь один параметр, который передается ему по значению и должен возвращать значение.  
  
> [!NOTE]
>  Для ссылки на метод, имеющий один параметр и возвращающий `void` (или в Visual Basic, который объявляется как `Sub`, а не как `Function`), вместо него следует использовать универсальный делегат <xref:System.Action%601>.  
  
 При использовании делегата <xref:System.Func%602> нет необходимости явно определять делегат, инкапсулирующий метод с одним параметром. Например, следующий код явно объявляет делегат с именем `ConvertMethod` и присваивает ссылку на метод `UppercaseString` его экземпляру делегата.  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 В следующем примере этот код упрощается путем создания экземпляра делегата <xref:System.Func%602> вместо явного определения нового делегата и назначения ему именованного метода.  
  
 [!code-csharp-interactive[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 Также можно использовать делегат <xref:System.Func%602> с анонимными методами в C#, как показано в следующем примере. (Общие сведения о анонимных методах см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp-interactive[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 Можно также присвоить лямбда-выражение делегату <xref:System.Func%602>, как показано в следующем примере. (Общие сведения о лямбда-выражениях см. в разделе [лямбда-выражения](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) и [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp-interactive[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 Базовый тип лямбда-выражения является одним из универсальных делегатов `Func`. Это дает возможность передавать лямбда-выражение в качестве параметра без явного присвоения его делегату. В частности, поскольку многие методы типов в пространстве имен <xref:System.Linq> имеют <xref:System.Func%602> параметров, эти методы можно передать лямбда-выражению без явного создания экземпляра делегата <xref:System.Func%602>.  
  
   
  
## Examples  
 В следующем примере показано, как объявить и использовать делегат <xref:System.Func%602>. В этом примере объявляется переменная <xref:System.Func%602> и ей присваивается лямбда-выражение, преобразующее символы в строке в верхний регистр. Делегат, инкапсулирующий этот метод, затем передается методу <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> для изменения строк в массиве строк на верхний регистр.  

 [!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

 [!code-csharp-interactive[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Лямбда-выражения (Руководство по программированию в C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Лямбда-выражения (Visual Basic)</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Делегаты (Руководство по программированию на C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Делегаты (Visual Basic)</related>
  </Docs>
</Type>
