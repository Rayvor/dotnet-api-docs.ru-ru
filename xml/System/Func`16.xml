<Type Name="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a36154269b3af344f3a3f9389d19efd37c4eb6f4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420804" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11,in T12,in T13,in T14,in T15,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`16&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, - T9, - T10, - T11, - T12, - T13, - T14, - T15, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`16" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8, In T9, In T10, In T11, In T12, In T13, In T14, In T15, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, arg13 As T13, arg14 As T14, arg15 As T15) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 * 'T9 * 'T10 * 'T11 * 'T12 * 'T13 * 'T14 * 'T15 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T9">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T10">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T11">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T12">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T13">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T14">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T15">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
    <Parameter Name="arg9" Type="T9" />
    <Parameter Name="arg10" Type="T10" />
    <Parameter Name="arg11" Type="T11" />
    <Parameter Name="arg12" Type="T12" />
    <Parameter Name="arg13" Type="T13" />
    <Parameter Name="arg14" Type="T14" />
    <Parameter Name="arg15" Type="T15" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T10">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод, который принимает 15 параметров и возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</summary>
    <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат можно использовать для представления метода, который можно передать в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь 15 параметров, каждый из которых передается в него по значению и должен возвращать значение.  
  
> [!NOTE]
>  Чтобы сослаться на метод, который имеет 15 `void` параметров и возвращает (или в Visual Basic, который объявлен `Sub` как a, а `Function`не как), вместо <xref:System.Action%6015> него следует использовать универсальный делегат.  
  
 <xref:System.Func%6016> Делегат также можно использовать с анонимными методами и лямбда-выражениями.  
  
 Базовый тип лямбда-выражения является одним из универсальных `Func` делегатов. Это дает возможность передавать лямбда-выражение в качестве параметра без явного присвоения его делегату.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`15" />
  </Docs>
</Type>
