<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e8f9d216546f929c77f5a7b673db88580c758651" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70541375" /></Metadata><TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет часовой пояс.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Часовой пояс — это географический регион, в котором используется такое же стандартное время.  
  
> [!IMPORTANT]
>  Везде, где это <xref:System.TimeZoneInfo> <xref:System.TimeZone> возможно, используйте класс вместо класса.  
  
 <xref:System.TimeZone> Класс можно использовать для получения сведений о текущем часовом поясе и для преобразования времени с местного времени на время в формате UTC или наоборот. Однако нельзя использовать <xref:System.TimeZone> класс для представления часовых поясов, отличных от локальной зоны, или для выполнения преобразований даты и времени из одного часового пояса в другой. Для этой цели используйте <xref:System.TimeZoneInfo> класс. Этот класс можно использовать для получения сведений о любом часовом поясе, определенном в локальной системе, для создания пользовательских часовых поясов и для преобразования времени из одного часового пояса в другой.  
  
 <xref:System.TimeZone> Класс поддерживает только одно правило коррекции летнего времени для местного часового пояса. В результате <xref:System.TimeZone> класс может точно сообщать сведения о переходе на летнее время или выполнять преобразование между временем в формате UTC и местным временем только для периода, в котором действует Последнее правило коррекции. В отличие от этого <xref:System.TimeZoneInfo> , класс поддерживает несколько правил коррекции, что дает возможность работать с историческими данными часового пояса.  
  
   
  
## Examples  
 В следующем примере показаны ссылки на выбранные `TimeZone` элементы класса и.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see langword="abstract" /> Помимо реализации для своих членов (отмеченных <see langword="MustOverride" /> в Visual Basic), важно, чтобы классы, производные от <see cref="T:System.TimeZone" /> , переопределяли поведение <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> метода по умолчанию. Это обусловлено тем <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, что поведение <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> по умолчанию в .NET Framework версии 2,0 не зависит от вызова, как в .NET Framework версиях 1,0 и 1,1.  Дополнительные сведения см. в <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> описании метода.</para></block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.TimeZone" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает часовой пояс текущего компьютера.</summary>
        <value>Объект <see cref="T:System.TimeZone" />, представляющий текущий локальный часовой пояс.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A> Свойство соответствует <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>  свойству. Везде, где это возможно <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> , используйте свойство.  
  
   
  
## Examples  
 Следующий пример ссылается `CurrentTimeZone` на свойство и отображает имена для зимнего времени и летнего времени для местного часового пояса.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Данные местного часового пояса кэшируются <see cref="P:System.TimeZone.CurrentTimeZone" /> после первого использования для получения сведений о часовом поясе. Если часовой пояс системы в дальнейшем изменяется, это изменение не <see cref="P:System.TimeZone.CurrentTimeZone" /> отражается в свойстве. Если необходимо выполнить обработку изменений часового пояса во время работы приложения, используйте <see cref="T:System.TimeZoneInfo" /> класс и вызовите его <see cref="M:System.TimeZoneInfo.ClearCachedData" /> метод.</para></block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя летнего времени для часового пояса.</summary>
        <value>Имя летнего времени для часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если летнее время не используется в часовом поясе, возвращается пустая строка ("").  
  
 <xref:System.TimeZone.DaylightName%2A> Свойство соответствует <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType>  свойству. Везде, где это возможно <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> , используйте свойство.  
  
   
  
## Examples  
 В следующем примере показана ссылка на `DaylightName` свойство и отображение свойства текущего часового пояса.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год, к которому относится период летнего времени.</param>
        <summary>Возвращает период летнего времени для определенного года.</summary>
        <returns>Объект <see cref="T:System.Globalization.DaylightTime" />, содержащий начальную и конечную дату периода летнего времени в <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поддерживается только один период летнего времени в год.  
  
 Если летнее время не используется в текущем часовом поясе, возвращаемое <xref:System.Globalization.DaylightTime> значение является объектом, где <xref:System.Globalization.DaylightTime.Start%2A> значение и <xref:System.TimeSpan> <xref:System.Globalization.DaylightTime.End%2A> равно <xref:System.DateTime.MinValue?displayProperty=nameWithType>, а значение <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> является инициализированным значением 0 тактов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.</exception>
        <block subset="none" type="usage"><para>Поскольку класс поддерживает только одно правило коррекции летнего времени <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> , метод применяет текущее правило коррекции к любому году независимо от того, применяется ли правило коррекции к этому году. <see cref="T:System.TimeZone" /> При условии, что сама операционная система содержит точные данные в течение определенного года, более точный результат доступен при работе с массивом <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> объектов, возвращаемых <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> методом. <see cref="P:System.Globalization.DaylightTime.Start" /> Свойства, <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" /> и соответствуют свойствам <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" /> , и . <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />  <see cref="P:System.Globalization.DaylightTime.Delta" /> <see cref="P:System.Globalization.DaylightTime.End" /></para></block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Значение даты и времени.</param>
        <summary>Возвращает смещение всеобщего скоординированного времени (UTC) относительно заданного местного времени.</summary>
        <returns>Смещение всеобщего скоординированного времени (UTC) относительно <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает смещение (или разницу) между параметром `time` и временем в формате UTC. Это означает следующее:  
  
 `time`= UTC + offset  
  
 Метод интерпретирует часовой пояс `time` в зависимости от его <xref:System.DateTime.Kind%2A> свойства. Если значение <xref:System.DateTime.Kind%2A> свойства равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, метод возвращает смещение местного часового пояса. Если значение <xref:System.DateTime.Kind%2A> свойства равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, метод <xref:System.TimeSpan.Zero?displayProperty=nameWithType>возвращает смещение, равное.  
  
 Если местный часовой пояс отслеживает переход на летнее время, <xref:System.TimeZone.GetUtcOffset%2A> применяет текущее правило коррекции к для `time` определения смещения местного часового пояса. То есть смещение, возвращаемое <xref:System.TimeZone.GetUtcOffset%2A> , отражает, попадает ли `time` значение часового пояса на зимнее или на летнее время.  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A> Метод распознает только текущее правило коррекции летнего времени для местного часового пояса. В результате гарантируется точное возвращение смещения UTC местного времени только в течение периода, в котором действует Последнее правило коррекции. Он может вернуть неточные результаты, `time` если представляет собой историческое значение даты и времени, которое было изменено в соответствии с предыдущим правилом коррекции.  
  
 <xref:System.TimeZone.GetUtcOffset%2A> Метод соответствует <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType>  методу. Везде, где это возможно <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> , используйте метод.  
  
 Поскольку значение даты и времени, представленное `time` и смещение этого значения относительно времени в формате UTC, не связаны жестко, то локальное или неопределенное значение даты и времени может возвращать другое значение смещения при запуске на разных компьютерах или при запуске на том же компьютере в различные часовые пояса. Если такое поведение нежелательно, используйте <xref:System.DateTimeOffset> вместо него значение. Тип <xref:System.DateTimeOffset> данных тесно связывает значение даты и времени со смещением относительно времени в формате UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, указывающее, принадлежат ли заданные дата и время к периоду летнего времени.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Дата и время.</param>
        <summary>Возвращает значение, указывающее, принадлежат ли заданные дата и время к периоду летнего времени.</summary>
        <returns><see langword="true" />, если <paramref name="time" /> принадлежит к периоду летнего времени; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Год, к которому применяется период летнего времени, является производным от `time` параметра.  
  
 Поскольку класс поддерживает одно правило коррекции летнего времени <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> , метод применяет текущее правило коррекции к любой дате, независимо от того, действовало ли правило коррекции на эту дату. <xref:System.TimeZone> При условии, что сама операционная система имеет точную историю летнего времени, более точный результат можно получить с помощью <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метода. Везде, где это возможно <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> , используйте метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Дата и время.</param>
        <param name="daylightTimes">Период летнего времени.</param>
        <summary>Возвращает значение, указывающее, принадлежат ли заданные дата и время к периоду летнего времени.</summary>
        <returns><see langword="true" />, если <paramref name="time" /> принадлежит к периоду <paramref name="daylightTimes" />; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод предоставляет те же функциональные возможности, что и эта перегрузка <xref:System.TimeZone.IsDaylightSavingTime%2A> метода. <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Везде, где это возможно <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> , используйте метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="daylightTimes" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает стандартное имя часового пояса.</summary>
        <value>Стандартное имя часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A> Свойство соответствует <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType>  свойству. Везде, где это возможно <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> , используйте свойство.  
  
   
  
## Examples  
 В следующем примере показана ссылка на `StandardName` свойство и отображение свойства текущего часового пояса.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Предпринята попытка присвоить этому свойству значение <see langword="null" />.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Всеобщее скоординированное время (UTC).</param>
        <summary>Возвращает местное время, соответствующее заданному значению даты и времени.</summary>
        <returns>Объект <see cref="T:System.DateTime" />, значением которого является местное время, соответствующее значению <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице показана связь между `time` параметром <xref:System.DateTime> и значением, возвращаемым этим методом.  
  
|Параметр `time`|Поведение|Возвращаемое значение|  
|----------------------|--------------|------------------|  
|Время () времени в формате UTC (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Преобразует время в формате UTC в местное время.|Объект <xref:System.DateTime>, значением которого является местное время, соответствующее значению `time`.|  
|Местное время (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|Преобразование не требуется.|То же <xref:System.DateTime> значение, представленное `time` параметром.|  
|Неопределенное время (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Предполагается, что время является временем в формате UTC и преобразует его из времени в формате UTC в местное время.|Объект <xref:System.DateTime>, значением которого является местное время, соответствующее значению `time`.|  
  
 Если местный часовой пояс отслеживает переход на летнее время, <xref:System.TimeZone.ToLocalTime%2A> `time` при выполнении преобразования применяет текущее правило коррекции.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A> Метод распознает только текущее правило коррекции летнего времени для местного часового пояса. В результате гарантируется точное возвращение местного времени, соответствующего определенному времени в формате UTC, только в течение периода, в котором действует Последнее правило коррекции. Он может вернуть неточные результаты, `time` если представляет собой историческое значение даты и времени, которое было изменено в соответствии с предыдущим правилом коррекции.  
  
 Метод соответствует <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> методу, параметру которого присвоено  <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> значение.  `destinationTimeZone` <xref:System.TimeZone.ToLocalTime%2A> Везде, где это возможно <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> , используйте метод.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Хотя это не является обязательным, в большинстве случаев производные классы, выполняющиеся в .NET Framework версии 2,0, должны переопределять реализацию этого метода по умолчанию. В .NET Framework версиях 1,0 и 1,1 <see langword="ToLocalTime" /> метод <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> вызвал метод и был скорректирован для перехода на летнее время при возврате местного времени. Однако начиная с .NET Framework 2,0 поведение реализации по умолчанию зависит от <see cref="P:System.DateTime.Kind" /> свойства <paramref name="time" /> параметра. Если его значение равно <see cref="F:System.DateTimeKind.Local" />, этот метод возвращает <paramref name="time" /> без изменений. Если его значение <see cref="F:System.DateTimeKind.Utc" /> равно или <see cref="F:System.DateTimeKind.Unspecified" />, то предполагается, <paramref name="time" /> что этот метод имеет формат UTC и преобразует его <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> в местное системное время без вызова метода.  
  
Следующий код предоставляет простое переопределение реализации <see langword="ToLocalTime" /> метода по умолчанию. В этом коде <see langword="internalTimeZone" /> переменная представляет частный экземпляр <see langword="TimeZone" /> класса: 
[! код-CSharp[System. TimeZone. ToLocalTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [! код-VB[System. TimeZone. ToLocalTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para></block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Дата и время.</param>
        <summary>Возвращает всеобщее скоординированное время (UTC), соответствующее указанному местному времени.</summary>
        <returns>Объект <see cref="T:System.DateTime" />, значением которого является время UTC, соответствующее <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если местный часовой пояс отслеживает переход на летнее время, <xref:System.TimeZone.ToUniversalTime%2A> при выполнении преобразования применяет текущее `time` правило коррекции к параметру.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A> Метод распознает только текущее правило коррекции летнего времени для местного часового пояса. В результате гарантируется точное возвращение времени в формате UTC, соответствующего определенному местному времени, только в течение периода, в котором действует Последнее правило коррекции. Он может вернуть неточные результаты, `time` если представляет собой историческое значение даты и времени, которое было изменено в соответствии с предыдущим правилом коррекции.  
  
 `time` Если параметр является неоднозначным временем, метод предполагает, что это стандартное время. (Неоднозначное время — это значение, которое может сопоставляться со стандартным временем или с переходом на летнее время в местном часовом поясе). Если `time` является недопустимым временем, метод просто вычитает местное время из смещения UTC местного часового пояса для возврата в формате UTC. (Неверное время не существует из-за применения правил коррекции летнего времени.)  
  
 Поскольку `time` интерпретируется по отношению к текущему часовому поясу в текущей системе, Дата и время, возвращаемые этим методом, могут различаться, если приложение выполняется на разных компьютерах или на том же компьютере с разными часовыми поясами. Для случаев, когда значение даты и времени должно представлять один однозначный момент времени, используйте <xref:System.DateTimeOffset> значение для представления местного времени.  
  
 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A> Метод соответствует перегрузке метода с <xref:System.DateTime> параметром, свойство которого не равно. <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> <xref:System.TimeZone.ToUniversalTime%2A> Везде, где это возможно <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> , используйте перегрузку метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>
