<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fbc3d67beaaf60e0ce49989f76b382162948582" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172847" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Тип объекта для сравнения.</typeparam>
    <summary>Определяет обобщенный метод сравнения, тип значения или класс, который используется для создания метода сравнения с целью упорядочения или сортировки экземпляров.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется типами, значения которых могут быть упорядочены или отсортированы, и предоставляет строго типизированный метод сравнения для упорядочения элементов универсального объекта коллекции. Например, одно число может быть больше второго, а одна строка может отображаться в алфавитном порядке перед другой. Для этого требуется, чтобы реализующие типы определяли один метод, <xref:System.IComparable%601.CompareTo%28%600%29>, который указывает, находится ли текущее вхождение в порядке сортировки до, после или аналогично второму объекту того же типа. Как правило, метод не вызывается непосредственно из кода разработчика. Вместо этого он вызывается автоматически такими методами, как <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> и <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Как правило, типы, предоставляющие реализацию <xref:System.IComparable%601>, также реализуют интерфейс <xref:System.IEquatable%601>. Интерфейс <xref:System.IEquatable%601> определяет метод <xref:System.IEquatable%601.Equals%2A>, который определяет равенство экземпляров реализующего типа.  
  
 Реализация метода <xref:System.IComparable%601.CompareTo%28%600%29> должна возвращать <xref:System.Int32> с одним из трех значений, как показано в следующей таблице.  
  
|Значение|Значение|  
|-----------|-------------|  
|Меньше нуля|Этот объект предшествует объекту, указанному методом <xref:System.IComparable%601.CompareTo%2A> в порядке сортировки.|  
|Нуль|Текущий экземпляр находится в том же положении в порядке сортировки, что и объект, заданный аргументом метода <xref:System.IComparable%601.CompareTo%2A>.|  
|Больше нуля|Этот текущий экземпляр следует за объектом, заданным аргументом метода <xref:System.IComparable%601.CompareTo%2A> в порядке сортировки.|  
  
 Все числовые типы (такие как <xref:System.Int32> и <xref:System.Double>) реализуют <xref:System.IComparable%601>, как <xref:System.String>, <xref:System.Char>и <xref:System.DateTime>. Пользовательские типы также должны предоставлять собственную реализацию <xref:System.IComparable%601>, чтобы разрешить упорядочивание или сортировку экземпляров объектов.  
  
   
  
## Examples  
 В следующем примере показана реализация <xref:System.IComparable%601> для простого `Temperature` объекта. В этом примере создается <xref:System.Collections.Generic.SortedList%602> коллекция строк с `Temperature`ными ключами объектов и добавляется несколько пар температур и строк в список вне последовательности. При вызове метода <xref:System.Collections.Generic.SortedList%602.Add%2A> коллекция <xref:System.Collections.Generic.SortedList%602> использует реализацию <xref:System.IComparable%601> для сортировки записей списка, которые затем отображаются в порядке увеличения температуры.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Замените параметр типа интерфейса <see cref="T:System.IComparable`1" /> типом, реализующим этот интерфейс.  
  
При реализации <see cref="T:System.IComparable`1" />следует перегружать операторы <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />и <see langword="op_LessThanOrEqual" />, чтобы возвращать значения, которые соответствуют <see cref="M:System.IComparable`1.CompareTo(`0)" />. Кроме того, следует также реализовать <see cref="T:System.IEquatable`1" />. Полные сведения см. в <see cref="T:System.IEquatable`1" /> статье.</para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Объект для сравнения с этим экземпляром.</param>
        <summary>Сравнивает текущий экземпляр с другим объектом того же типа и возвращает целое число, которое показывает, расположен ли текущий экземпляр перед, после или на той же позиции в порядке сортировки, что и другой объект.</summary>
        <returns>Значение, указывающее, каков относительный порядок сравниваемых объектов. Возвращаемые значения представляют следующие результаты сравнения. 
 <list type="table"><listheader><term> Значение 
 </term><description> Значение 
 </description></listheader><item><term> Меньше нуля 
 </term><description> Данный экземпляр предшествует параметру <paramref name="other" /> в порядке сортировки.  
  
 </description></item><item><term> Нуль 
 </term><description> Данный экземпляр занимает ту же позицию в порядке сортировки, что и параметр <paramref name="other" />.  
  
 </description></item><item><term> Больше нуля 
 </term><description> Данный экземпляр следует за параметром <paramref name="other" /> в порядке сортировки.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> предоставляет строго типизированный метод сравнения для упорядочения элементов универсального объекта коллекции. По этой причине он обычно не вызывается непосредственно из кода разработчика. Вместо этого он вызывается автоматически такими методами, как <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> и <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Этот метод является только определением и должен быть реализован конкретным классом или типом значения, чтобы иметь результат. Значение сравнений, указанных в разделе "возвращаемые значения" ("предшествует", "находится в том же положении, что и", и "Далее"), зависит от конкретной реализации.  
  
 По определению любой объект сравнивается с более чем `null`, а две пустые ссылки сравнивают равными друг другу.  
  
   
  
## Examples  
 В следующем примере кода показана реализация <xref:System.IComparable%601> для простого `Temperature` объекта. В этом примере создается <xref:System.Collections.Generic.SortedList%602> коллекция строк с `Temperature`ными ключами объектов и добавляется несколько пар температур и строк в список вне последовательности. При вызове метода <xref:System.Collections.Generic.SortedList%602.Add%2A> коллекция <xref:System.Collections.Generic.SortedList%602> использует реализацию <xref:System.IComparable%601> для сортировки записей списка, которые затем отображаются в порядке увеличения температуры.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Для объектов A, B и C должны выполняться следующие условия: 
 Для возврата нуля требуется <c>. CompareTo (a)</c> .  
  
Если <c>A. CompareTo (B)</c> возвращает ноль, то <c>B. CompareTo (A)</c> требуется для возврата нуля.  
  
Если <c>A. CompareTo (B)</c> возвращает ноль, а <c>B. CompareTo (c)</c> возвращает ноль, то для возврата нуля требуется <c>. CompareTo (c)</c> .  
  
Если <c>A. CompareTo (B)</c> возвращает значение, отличное от нуля, то <c>B. CompareTo (A)</c> требуется для возвращения значения противоположного знака.  
  
Если <c>A. CompareTo (B)</c> возвращает значение <paramref name="x" />, которое не равно нулю, а <c>B. CompareTo (C)</c> возвращает значение <paramref name="y" /> того же знака, что и <paramref name="x" />, то <c>A. CompareTo (c)</c> требуется для возвращения значения того же знака, что и <paramref name="x" /> и <paramref name="y" />.</para></block>
        <block subset="none" type="usage"><para>Используйте метод <see cref="M:System.IComparable`1.CompareTo(`0)" />, чтобы определить порядок экземпляров класса.</para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>
