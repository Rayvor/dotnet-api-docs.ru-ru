<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a605e4ebcc96522c2ca769cde87eed8ec1fedfd5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405958" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для извлечения объекта с целью управления форматированием.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider> Интерфейс предоставляет объект, предоставляющий сведения о форматировании для операций форматирования и анализа. Операции форматирования преобразуют значение типа в строковое представление этого значения. Типичные методы форматирования — `ToString` это методы типа, а <xref:System.String.Format%2A>также. Операции синтаксического анализа преобразуют строковое представление значения в тип с этим значением. Типичными методами синтаксического `TryParse`анализа являются `Parse` и.  
  
 Интерфейс состоит из одного <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>метода. <xref:System.IFormatProvider> <xref:System.IFormatProvider.GetFormat%2A>— Это метод обратного вызова: Метод синтаксического анализа или форматирования вызывает его и передает ему <xref:System.Type> объект, представляющий тип объекта, который метод форматирования или анализа будет предоставлять сведения о форматировании. <xref:System.IFormatProvider.GetFormat%2A> Метод отвечает за возврат объекта этого типа.  
  
 <xref:System.IFormatProvider>реализации часто используются неявно с помощью методов форматирования и анализа. Например, <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> метод неявно <xref:System.IFormatProvider> использует реализацию, представляющую текущий язык и региональные параметры системы. <xref:System.IFormatProvider>реализации также могут быть заданы явно методами, имеющими параметр типа <xref:System.IFormatProvider>, <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> например и <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 .NET Framework включает следующие три стандартные <xref:System.IFormatProvider> реализации для предоставления сведений, относящихся к культуре, которые используются при форматировании или синтаксическом анализе числовых значений и значения даты и времени:  
  
-   <xref:System.Globalization.NumberFormatInfo> Класс, предоставляющий сведения, используемые для форматирования чисел, таких как валюта, разделитель групп разрядов и символы десятичного разделителя для определенного языка и региональных параметров. Сведения о стандартных строках формата, распознаваемых <xref:System.Globalization.NumberFormatInfo> объектом и используемых в операциях числового форматирования, см. в разделе [строки стандартных числовых форматов](~/docs/standard/base-types/standard-numeric-format-strings.md) и [строки настраиваемых числовых форматов](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Класс, который предоставляет сведения, используемые для форматирования даты и времени, например символы-разделители даты и времени для конкретного языка и региональных параметров, а также порядок и формат компонентов даты, месяца и дня. Сведения о стандартных строках формата, распознаваемых <xref:System.Globalization.DateTimeFormatInfo> объектом и используемых в операциях числового форматирования, см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) и [строки настраиваемых форматов даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   <xref:System.Globalization.CultureInfo> Класс, представляющий определенный язык и региональные параметры. Его <xref:System.IFormatProvider.GetFormat%2A> метод возвращает <xref:System.Globalization.DateTimeFormatInfo> объект, зависящий <xref:System.Globalization.NumberFormatInfo> от языка и региональных параметров, в зависимости <xref:System.Globalization.CultureInfo> от того, используется ли объект в операции форматирования или синтаксического анализа, включающей числа или даты и время.  
  
 .NET Framework также поддерживает пользовательское форматирование. Обычно это подразумевает создание класса форматирования, который реализует <xref:System.IFormatProvider> и, и. <xref:System.ICustomFormatter> Экземпляр этого класса затем передается в качестве параметра методу, который выполняет пользовательскую операцию форматирования, например <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> в примере показана такая пользовательская реализация, которая форматирует число как 12-значный номер счета.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.IFormatProvider> реализация может изменить представление значения даты и времени. В этом случае одна Дата отображается с помощью <xref:System.Globalization.CultureInfo> объектов, представляющих четыре различных языка и региональных параметров.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 В следующем примере показано использование класса, реализующего <xref:System.IFormatProvider> интерфейс <xref:System.IFormatProvider.GetFormat%2A> и метод. `AcctNumberFormat` Класс<xref:System.Int64> преобразует значение, представляющее номер счета, в форматированный 12-значный номер счета. Его `GetFormat` метод возвращает ссылку на текущий `AcctNumberFormat` экземпляр, если `formatType` параметр ссылается `GetFormat` на класс, реализующий <xref:System.ICustomFormatter>; в противном случае возвращает `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Класс, реализующий <xref:System.IFormatProvider> , может затем использоваться при вызове операции форматирования и синтаксического анализа. Например, следующий код вызывает <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> метод для создания строки, которая содержит форматированный 12-значный номер счета.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">Практическое руководство. Определение и использование настраиваемых поставщиков числовых форматов</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Объект, определяющий тип возвращаемого объекта форматирования.</param>
        <summary>Возвращает объекты, предоставляющие службы форматирования для заданного типа.</summary>
        <returns>Экземпляр объекта, заданного в параметре <paramref name="formatType" />, если реализация <see cref="T:System.IFormatProvider" /> может предоставить объект такого типа; в противном случае — <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A>— Это метод обратного вызова, который вызывается методами форматирования и синтаксического анализа для получения сведений о формате входной строки в операциях синтаксического анализа или в формате выходной строки в операциях форматирования. `formatType` В параметре метод форматирования или анализа передает тип объекта, который требуется для выполнения операции. <xref:System.IFormatProvider> Если реализация может предоставить этот объект форматирования или анализа, он возвращает этот объект. Если нет, возвращается значение `null`.  
  
 Например, в вызове <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> метода аргумент метода <xref:System.IFormatProvider> — это объект, предоставляющий сведения о том, как можно отформатировать строковое представление текущего целочисленного экземпляра. Когда среда выполнения выполняет <xref:System.IFormatProvider> метод, он вызывает <xref:System.IFormatProvider.GetFormat%2A> <xref:System.Type> метод объекта и передает ему объект, представляющий <xref:System.Globalization.NumberFormatInfo> тип. Если объект может <xref:System.Globalization.NumberFormatInfo> предоставить объект, он возвращает этот объект. <xref:System.IFormatProvider> Если он не может предоставить объект этого типа, он возвращает `null`.  
  
 <xref:System.IFormatProvider> Интерфейс<xref:System.IFormatProvider.GetFormat%2A> и метод можно реализовать в классах, предоставляющих пользовательские службы форматирования или анализа. <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> <xref:System.IFormatProvider>Затем реализация передается в качестве аргумента в любую перегрузку метода синтаксического анализа или форматирования, имеющего параметр типа, например, или. <xref:System.IFormatProvider>  
  
   
  
## Examples  
 В следующем примере показано использование класса, реализующего <xref:System.IFormatProvider> интерфейс <xref:System.IFormatProvider.GetFormat%2A> и метод. `AcctNumberFormat` Класс<xref:System.Int64> преобразует значение, представляющее номер счета, в форматированный 12-значный номер счета. Его `GetFormat` метод возвращает ссылку на себя, `formatType` если параметр ссылается на класс `GetFormat` , реализующий <xref:System.ICustomFormatter>; в противном случае `null`возвращает.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Экземпляр `AcctNumberFormat` класса можно передать в качестве аргумента в метод, предоставляющий службы форматирования или анализа. Например, следующий код передает `AcctNumberFormat` класс <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> в метод для создания форматированного 12-значного номера счета.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
