<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f1ac858f182c688dc6b055b86aaa145795b91794" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75041365" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для извлечения объекта с целью управления форматированием.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интерфейс <xref:System.IFormatProvider> предоставляет объект, предоставляющий сведения о форматировании для операций форматирования и анализа. Операции форматирования преобразуют значение типа в строковое представление этого значения. Типичными методами форматирования являются `ToString`ные методы типа, а также <xref:System.String.Format%2A>. Операции синтаксического анализа преобразуют строковое представление значения в тип с этим значением. Типичными методами синтаксического анализа являются `Parse` и `TryParse`.  
  
 Интерфейс <xref:System.IFormatProvider> состоит из одного метода <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>. <xref:System.IFormatProvider.GetFormat%2A> является методом обратного вызова: метод синтаксического анализа или форматирования вызывает его и передает ему объект <xref:System.Type>, представляющий тип объекта, который должен предоставлять метод форматирования или анализа, чтобы предоставить сведения о форматировании. Метод <xref:System.IFormatProvider.GetFormat%2A> отвечает за возврат объекта этого типа.  
  
 <xref:System.IFormatProvider> реализации часто используются неявно с помощью методов форматирования и анализа. Например, метод <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> неявно использует реализацию <xref:System.IFormatProvider>, представляющую текущий язык и региональные параметры системы. <xref:System.IFormatProvider> реализации также можно указать явным образом с помощью методов, имеющих параметр типа <xref:System.IFormatProvider>, например <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> и <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 .NET Framework включает следующие три предопределенные реализации <xref:System.IFormatProvider> для предоставления сведений о языке и региональных параметрах, используемых при форматировании или синтаксическом анализе числовых значений и значения даты и времени:  
  
-   Класс <xref:System.Globalization.NumberFormatInfo>, который предоставляет сведения, используемые для форматирования чисел, таких как валюта, разделитель групп разрядов и символы десятичного разделителя для определенного языка и региональных параметров. Сведения о предопределенных строках формата, распознаваемых <xref:System.Globalization.NumberFormatInfo>ным объектом и используемых в операциях числового форматирования, см. в разделе [строки стандартных числовых форматов](~/docs/standard/base-types/standard-numeric-format-strings.md) и [строки настраиваемых числовых форматов](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Класс <xref:System.Globalization.DateTimeFormatInfo>, предоставляющий сведения, используемые для форматирования даты и времени, например символы-разделители даты и времени для конкретного языка и региональных параметров, а также порядок и формат компонентов даты, месяца и дня. Сведения о предопределенных строках формата, распознаваемых <xref:System.Globalization.DateTimeFormatInfo>ным объектом и используемых в операциях числового форматирования, см. в разделе [строки стандартных форматов даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) и [строки настраиваемых форматов даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Класс <xref:System.Globalization.CultureInfo>, представляющий определенный язык и региональные параметры. Его <xref:System.IFormatProvider.GetFormat%2A> метод возвращает <xref:System.Globalization.NumberFormatInfo> или <xref:System.Globalization.DateTimeFormatInfo> объект, зависящий от языка и региональных параметров, в зависимости от того, используется ли объект <xref:System.Globalization.CultureInfo> в операциях форматирования или синтаксического анализа, включающих числа или даты и время.  
  
 .NET Framework также поддерживает пользовательское форматирование. Обычно это подразумевает создание класса форматирования, который реализует как <xref:System.IFormatProvider>, так и <xref:System.ICustomFormatter>. Экземпляр этого класса передается в качестве параметра методу, который выполняет пользовательскую операцию форматирования, например <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> пример демонстрирует такую пользовательскую реализацию, которая форматирует число в виде 12-значного номера счета.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.IFormatProvider>ная реализация может изменить представление значения даты и времени. В этом случае одна Дата отображается с помощью <xref:System.Globalization.CultureInfo> объектов, представляющих четыре разных языка и региональных параметров.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 В следующем примере показано использование класса, реализующего интерфейс <xref:System.IFormatProvider> и метод <xref:System.IFormatProvider.GetFormat%2A>. Класс `AcctNumberFormat` преобразует значение <xref:System.Int64>, представляющее номер счета, в форматированный 12-значный номер счета. Его `GetFormat` метод возвращает ссылку на текущий экземпляр `AcctNumberFormat`, если параметр `formatType` ссылается на класс, реализующий <xref:System.ICustomFormatter>. в противном случае `GetFormat` возвращает `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Класс, реализующий <xref:System.IFormatProvider>, можно затем использовать при вызове операции форматирования и синтаксического анализа. Например, следующий код вызывает метод <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> для создания строки, которая содержит форматированный 12-значный номер счета.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">Практическое руководство. Определение и использование настраиваемых поставщиков числовых форматов</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Объект, определяющий тип возвращаемого объекта форматирования.</param>
        <summary>Возвращает объекты, предоставляющие службы форматирования для заданного типа.</summary>
        <returns>Экземпляр объекта, заданного в параметре <paramref name="formatType" />, если реализация <see cref="T:System.IFormatProvider" /> может предоставить объект такого типа; в противном случае — <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> является методом обратного вызова, который вызывает методы форматирования и синтаксического анализа для получения сведений о формате входной строки в операциях синтаксического анализа или в формате выходной строки в операциях форматирования. В параметре `formatType` метод форматирования или анализа передает тип объекта, который требуется для выполнения операции. Если реализация <xref:System.IFormatProvider> может предоставить этот объект форматирования или анализа, он возвращает этот объект. В противном случае возвращается `null`.  
  
 Например, в вызове метода <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> аргумент метода — это <xref:System.IFormatProvider> объект, предоставляющий сведения о том, как можно отформатировать строковое представление текущего целочисленного экземпляра. Когда среда выполнения выполняет метод, он вызывает метод <xref:System.IFormatProvider.GetFormat%2A> объекта <xref:System.IFormatProvider> и передает его <xref:System.Type> объект, представляющий тип <xref:System.Globalization.NumberFormatInfo>. Если объект <xref:System.IFormatProvider> может предоставить объект <xref:System.Globalization.NumberFormatInfo>, он возвращает этот объект. Если он не может предоставить объект этого типа, он возвращает `null`.  
  
 Можно реализовать интерфейс <xref:System.IFormatProvider> и метод <xref:System.IFormatProvider.GetFormat%2A> в классах, предоставляющих пользовательские службы форматирования или анализа. После этого <xref:System.IFormatProvider> реализация передается в качестве аргумента в любую перегрузку метода синтаксического анализа или форматирования, имеющего параметр типа <xref:System.IFormatProvider>, например <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере показано использование класса, реализующего интерфейс <xref:System.IFormatProvider> и метод <xref:System.IFormatProvider.GetFormat%2A>. Класс `AcctNumberFormat` преобразует значение <xref:System.Int64>, представляющее номер счета, в форматированный 12-значный номер счета. Его `GetFormat` метод возвращает ссылку на себя, если параметр `formatType` ссылается на класс, реализующий <xref:System.ICustomFormatter>; в противном случае `GetFormat` возвращает `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Экземпляр класса `AcctNumberFormat` можно передать в качестве аргумента в метод, предоставляющий службы форматирования или анализа. Например, следующий код передает класс `AcctNumberFormat` в метод <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> для создания форматированного 12-значного номера счета.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
