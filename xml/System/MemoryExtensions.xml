<Type Name="MemoryExtensions" FullName="System.MemoryExtensions">
  <TypeSignature Language="C#" Value="public static class MemoryExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MemoryExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module MemoryExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0d915-101">Предоставляет методы расширения для типов, связанных с памятью и диапазоном, таких как <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> и <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-101">Provides extension methods for for the memory- and span-related types, such as <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />, and <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-102">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-102">The target string.</span></span></param>
        <summary><span data-ttu-id="0d915-103">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> для части целевой строки.</span><span class="sxs-lookup"><span data-stu-id="0d915-103">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over the portion of the target string.</span></span></summary>
        <returns><span data-ttu-id="0d915-104">Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-104">The read-only character memory representation of the string, or <see langword="default" /> if <paramref name="text" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String, startIndex As Index) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * Index -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-105">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-105">The target string.</span></span></param>
        <param name="startIndex"><span data-ttu-id="0d915-106">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="0d915-106">The index at which to begin this slice.</span></span></param>
        <summary><span data-ttu-id="0d915-107">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанного индекса.</span><span class="sxs-lookup"><span data-stu-id="0d915-107">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a portion of the target string starting at a specified index.</span></span></summary>
        <returns><span data-ttu-id="0d915-108">Представление строки в памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-108">The read-only character memory representation of the string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String, start As Integer) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, int start);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * int -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-109">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-109">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-110">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="0d915-110">The index at which to begin this slice.</span></span></param>
        <summary><span data-ttu-id="0d915-111">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанной позиции символа.</span><span class="sxs-lookup"><span data-stu-id="0d915-111">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a portion of the target string starting at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="0d915-112">Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-112">The read-only character memory representation of the string, or <see langword="default" /> if <paramref name="text" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-113"><paramref name="start" /> не находится в диапазоне <paramref name="text" /> (<paramref name="start" /> имеет значение &lt; 0 или &gt; <c>text.Length</c>).</span><span class="sxs-lookup"><span data-stu-id="0d915-113"><paramref name="start" /> is not in the range of <paramref name="text" /> (<paramref name="start" /> is &lt; 0 or &gt; <c>text.Length</c>).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, Range range);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * Range -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-114">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-114">The target string.</span></span></param>
        <param name="range"><span data-ttu-id="0d915-115">Диапазон, указывающий начало и длину строки среза.</span><span class="sxs-lookup"><span data-stu-id="0d915-115">The range that indicates the start and length of the sliced string.</span></span></param>
        <summary><span data-ttu-id="0d915-116">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> с заданным диапазоном целевой строки.</span><span class="sxs-lookup"><span data-stu-id="0d915-116">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a specified range of the target string.</span></span></summary>
        <returns><span data-ttu-id="0d915-117">Представление строки в памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-117">The read-only character memory representation of the string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String, start As Integer, length As Integer) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * int * int -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-118">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-118">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-119">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="0d915-119">The index at which to begin this slice.</span></span></param>
        <param name="length"><span data-ttu-id="0d915-120">Требуемая длина для среза.</span><span class="sxs-lookup"><span data-stu-id="0d915-120">The desired length for the slice.</span></span></param>
        <summary><span data-ttu-id="0d915-121">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанной позиции с заданной длиной.</span><span class="sxs-lookup"><span data-stu-id="0d915-121">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a portion of the target string beginning at a specified position with a length.</span></span></summary>
        <returns><span data-ttu-id="0d915-122">Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-122">The read-only character memory representation of the string, or <see langword="default" /> if <paramref name="text" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-123"><paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-123"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="text" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-124">Тип сегмента.</span><span class="sxs-lookup"><span data-stu-id="0d915-124">The type of the segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-125">Преобразуемый сегмент.</span><span class="sxs-lookup"><span data-stu-id="0d915-125">The segment to convert.</span></span></param>
        <summary><span data-ttu-id="0d915-126">Создает новую область памяти для части целевого сегмента массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-126">Creates a new memory region over the portion of the target array segment.</span></span></summary>
        <returns><span data-ttu-id="0d915-127">Представление сегмента в памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-127">The memory representation of the segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-128">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-128">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-129">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-129">The array to convert.</span></span></param>
        <summary><span data-ttu-id="0d915-130">Создает новую область памяти для целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-130">Creates a new memory region over the target array.</span></span></summary>
        <returns><span data-ttu-id="0d915-131">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-131">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (segment As ArraySegment(Of T), start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ArraySegment&lt;'T&gt; * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (segment, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-132">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-132">The type of the array.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-133">Сегмент целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-133">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-134">Индекс, с которого нужно начать память.</span><span class="sxs-lookup"><span data-stu-id="0d915-134">The index at which to begin the memory.</span></span></param>
        <summary><span data-ttu-id="0d915-135">Создает новую область памяти для части сегмента целевого массива, начиная с указанной позиции и заканчивая концом сегмента.</span><span class="sxs-lookup"><span data-stu-id="0d915-135">Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.</span></span></summary>
        <returns><span data-ttu-id="0d915-136">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-136">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-137">Возвращает `default` , `segment` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-137">Returns `default` when `segment` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-138">Параметр <paramref name="segment" /> является ковариантным, и <paramref name="segment" /> не обязательно будет иметь тип <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-138"><paramref name="segment" /> is covariant, and the type of <paramref name="segment" /> is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-139">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="segment.Count" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-139"><paramref name="start" /> is less than 0 or greater than <see langword="segment.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T(), startIndex As Index) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * Index -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-140">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-140">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-141">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-141">The array to convert.</span></span></param>
        <param name="startIndex"><span data-ttu-id="0d915-142">Первая позиция массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-142">The first position of the array.</span></span></param>
        <summary><span data-ttu-id="0d915-143">Создает новую область памяти для части целевого массива, начиная с указанного индекса и заканчивая концом массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-143">Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="0d915-144">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-144">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T(), start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-145">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-145">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-146">Целевой массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-146">The target array.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-147">Индекс, с которого нужно начать память.</span><span class="sxs-lookup"><span data-stu-id="0d915-147">The index at which to begin the memory.</span></span></param>
        <summary><span data-ttu-id="0d915-148">Создает новую область памяти для части целевого массива, начиная с указанной позиции и заканчивая концом массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-148">Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="0d915-149">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-149">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-150">Возвращает `default` , `array` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-150">Returns `default` when `array` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-151">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-151"><paramref name="array" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-152">Индекс <paramref name="start" /> имеет значение меньше 0 или больше <see langword="array.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-152"><paramref name="start" /> index less than 0 or greater than <see langword="array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, Range range);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * Range -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-153">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-153">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-154">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-154">The array to convert.</span></span></param>
        <param name="range"><span data-ttu-id="0d915-155">Диапазон для преобразования из массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-155">The range to convert from the array.</span></span></param>
        <summary><span data-ttu-id="0d915-156">Создает новую область памяти для части целевого массива, начиная с включающего начального индекса диапазона и заканчивая исключающим конечным индексом диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-156">Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.</span></span></summary>
        <returns><span data-ttu-id="0d915-157">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-157">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (segment As ArraySegment(Of T), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ArraySegment&lt;'T&gt; * int * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (segment, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-158">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-158">The type of the array.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-159">Сегмент целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-159">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-160">Индекс, с которого нужно начать память.</span><span class="sxs-lookup"><span data-stu-id="0d915-160">The index at which to begin the memory.</span></span></param>
        <param name="length"><span data-ttu-id="0d915-161">Число элементов в памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-161">The number of items in the memory.</span></span></param>
        <summary><span data-ttu-id="0d915-162">Создает новую область памяти для части сегмента целевого массива, начиная с указанной позиции с учетом заданной длины.</span><span class="sxs-lookup"><span data-stu-id="0d915-162">Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.</span></span></summary>
        <returns><span data-ttu-id="0d915-163">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-163">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-164">Возвращает `default` , `segment` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-164">Returns `default` when `segment` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-165">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-165"><paramref name="segment" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-166"><paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="segment" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-166"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="segment" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-167">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-167">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-168">Целевой массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-168">The target array.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-169">Индекс, с которого определяется начало области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-169">The index at which to begin the memory region.</span></span></param>
        <param name="length"><span data-ttu-id="0d915-170">Число элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-170">The number of items in the memory region.</span></span></param>
        <summary><span data-ttu-id="0d915-171">Создает новую область памяти для части целевого массива, начиная с указанной позиции с учетом заданной длины.</span><span class="sxs-lookup"><span data-stu-id="0d915-171">Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.</span></span></summary>
        <returns><span data-ttu-id="0d915-172">Представление в памяти всего массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-172">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-173">Возвращает `default` , `array` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-173">Returns `default` when `array` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-174">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-174"><paramref name="array" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-175"><paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-175"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; AsSpan (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan (text As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; AsSpan(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member AsSpan : string -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.AsSpan text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-176">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-176">The target string.</span></span></param>
        <summary><span data-ttu-id="0d915-177">Создает новый диапазон, предназначенный только для чтения, для части целевой строки, начиная с указанной позиции и с учетом заданного числа символов.</span><span class="sxs-lookup"><span data-stu-id="0d915-177">Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="0d915-178">Представление строки в диапазоне только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-178">The read-only span representation of the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-179">Возвращает `default` , `text` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-179">Returns `default` when `text` is `null`.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; AsSpan (this string text, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan (text As String, start As Integer) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; AsSpan(System::String ^ text, int start);" />
      <MemberSignature Language="F#" Value="static member AsSpan : string * int -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.AsSpan (text, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-180">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-180">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-181">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="0d915-181">The index at which to begin this slice.</span></span></param>
        <summary><span data-ttu-id="0d915-182">Создает новый диапазон, предназначенный только для чтения, для части целевой строки, начиная с указанной позиции и до конца строки.</span><span class="sxs-lookup"><span data-stu-id="0d915-182">Creates a new read-only span over a portion of the target string from a specified position to the end of the string.</span></span></summary>
        <returns><span data-ttu-id="0d915-183">Представление строки в диапазоне только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-183">The read-only span representation of the string.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-184">Свойство <paramref name="text" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-184"><paramref name="text" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-185">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="text.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-185"><paramref name="start" /> is less than 0 or greater than <see langword="text.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; AsSpan (this string text, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan (text As String, start As Integer, length As Integer) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; AsSpan(System::String ^ text, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsSpan : string * int * int -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.AsSpan (text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="0d915-186">Целевая строка.</span><span class="sxs-lookup"><span data-stu-id="0d915-186">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-187">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="0d915-187">The index at which to begin this slice.</span></span></param>
        <param name="length"><span data-ttu-id="0d915-188">Требуемая длина для среза.</span><span class="sxs-lookup"><span data-stu-id="0d915-188">The desired length for the slice.</span></span></param>
        <summary><span data-ttu-id="0d915-189">Создает новый диапазон, доступный только для чтения, для строки.</span><span class="sxs-lookup"><span data-stu-id="0d915-189">Creates a new read-only span over a string.</span></span></summary>
        <returns><span data-ttu-id="0d915-190">Представление строки в диапазоне только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-190">The read-only span representation of the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-191">Возвращает `default` , `text` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-191">Returns `default` when `text` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-192"><paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-192"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="text" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-193">Тип сегмента массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-193">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-194">Сегмент массива для преобразования.</span><span class="sxs-lookup"><span data-stu-id="0d915-194">The array segment to convert.</span></span></param>
        <summary><span data-ttu-id="0d915-195">Создает новый диапазон для сегмента целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-195">Creates a new span over a target array segment.</span></span></summary>
        <returns><span data-ttu-id="0d915-196">Представление сегмента массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-196">The span representation of the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T()) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-197">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-197">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-198">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-198">The array to convert.</span></span></param>
        <summary><span data-ttu-id="0d915-199">Создает новый диапазон для целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-199">Creates a new span over a target array.</span></span></summary>
        <returns><span data-ttu-id="0d915-200">Представление массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-200">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T), startIndex As Index) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * Index -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-201">Тип сегмента массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-201">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-202">Сегмент целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-202">The target array segment.</span></span></param>
        <param name="startIndex"><span data-ttu-id="0d915-203">Индекс, с которого нужно начать диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-203">The index at which to begin the Span.</span></span></param>
        <summary><span data-ttu-id="0d915-204">Создает новый диапазон для части сегмента целевого массива, начиная с указанного индекса и заканчивая концом сегмента.</span><span class="sxs-lookup"><span data-stu-id="0d915-204">Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.</span></span></summary>
        <returns><span data-ttu-id="0d915-205">Представление сегмента массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-205">The span representation of the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T), start As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-206">Тип сегмента массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-206">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-207">Сегмент целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-207">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-208">Индекс, с которого нужно начать диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-208">The index at which to begin the san.</span></span></param>
        <summary><span data-ttu-id="0d915-209">Создает новый диапазон для части сегмента целевого массива, начиная с указанной позиции и заканчивая концом сегмента.</span><span class="sxs-lookup"><span data-stu-id="0d915-209">Creates a new span over a portion of a target array segment from a specified position to the end of the segment.</span></span></summary>
        <returns><span data-ttu-id="0d915-210">Представление сегмента массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-210">The span representation of the array segment.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-211">Возвращает `default` , `segment` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-211">Returns `default` when `segment` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-212">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-212"><paramref name="segment" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-213">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="segment.Count" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-213"><paramref name="start" /> is less than 0 or greater than <see langword="segment.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, Range range);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * Range -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-214">Тип сегмента массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-214">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-215">Сегмент целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-215">The target array segment.</span></span></param>
        <param name="range"><span data-ttu-id="0d915-216">Диапазон, в котором находятся индексы начала и конца, используемые для разбиения массива на части.</span><span class="sxs-lookup"><span data-stu-id="0d915-216">The range which has start and end indexes to use for slicing the array.</span></span></param>
        <summary><span data-ttu-id="0d915-217">Создает новый диапазон для части сегмента целевого массива с использованием начального и конечного индексов диапазона</span><span class="sxs-lookup"><span data-stu-id="0d915-217">Creates a new span over a portion of a target array segment using the range start and end indexes</span></span></summary>
        <returns><span data-ttu-id="0d915-218">Представление сегмента массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-218">The span representation of the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T(), startIndex As Index) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * Index -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-219">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-219">The array type.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-220">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-220">The array to convert.</span></span></param>
        <param name="startIndex"><span data-ttu-id="0d915-221">Начальный индекс.</span><span class="sxs-lookup"><span data-stu-id="0d915-221">The starting index.</span></span></param>
        <summary><span data-ttu-id="0d915-222">Создает новый диапазон для части целевого массива, определенного значением <see cref="T:System.Index" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-222">Creates a new span over the portion of the target array defined by an <see cref="T:System.Index" /> value.</span></span></summary>
        <returns><span data-ttu-id="0d915-223">Представление массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-223">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T(), start As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-224">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-224">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-225">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-225">The array to convert.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-226">Начальный индекс, с которого будет преобразован массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-226">The initial index from which the array will be converted.</span></span></param>
        <summary><span data-ttu-id="0d915-227">Создает новый диапазон для части целевого массива, начиная с указанной позиции и заканчивая концом массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-227">Creates a new span over a portion of the target array starting at a specified position to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="0d915-228">Представление массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-228">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, Range range);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * Range -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-229">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-229">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-230">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-230">The array to convert.</span></span></param>
        <param name="range"><span data-ttu-id="0d915-231">Преобразуемый диапазон массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-231">The range of the array to convert.</span></span></param>
        <summary><span data-ttu-id="0d915-232">Создает новый диапазон для части целевого массива, определенного значением <see cref="T:System.Range" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-232">Creates a new span over a portion of a target array defined by a <see cref="T:System.Range" /> value.</span></span></summary>
        <returns><span data-ttu-id="0d915-233">Представление массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-233">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T), start As Integer, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * int * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-234">Тип сегмента массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-234">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="0d915-235">Сегмент целевого массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-235">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-236">Индекс, с которого нужно начать диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-236">The index at which to begin the span.</span></span></param>
        <param name="length"><span data-ttu-id="0d915-237">Число элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-237">The number of items in the span.</span></span></param>
        <summary><span data-ttu-id="0d915-238">Создает новый диапазон для части сегмента целевого массива, начиная с указанной позиции с учетом заданной длины.</span><span class="sxs-lookup"><span data-stu-id="0d915-238">Creates a new span over a portion of a target array segment from a specified position for a specified length.</span></span></summary>
        <returns><span data-ttu-id="0d915-239">Представление массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-239">The span representation of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-240">Возвращает `default` , `segment` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-240">Returns `default` when `segment` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-241">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-241"><paramref name="segment" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-242"><paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="segment" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-242"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="segment" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T(), start As Integer, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * int * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-243">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-243">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="0d915-244">Целевой массив.</span><span class="sxs-lookup"><span data-stu-id="0d915-244">The target array.</span></span></param>
        <param name="start"><span data-ttu-id="0d915-245">Индекс, с которого нужно начать диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-245">The index at which to begin the span.</span></span></param>
        <param name="length"><span data-ttu-id="0d915-246">Число элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-246">The number of items in the span.</span></span></param>
        <summary><span data-ttu-id="0d915-247">Создает новый диапазон для части целевого массива, начиная с указанной позиции с учетом заданной длины.</span><span class="sxs-lookup"><span data-stu-id="0d915-247">Creates a new span over the portion of the target array beginning at a specified position for a specified length.</span></span></summary>
        <returns><span data-ttu-id="0d915-248">Представление массива в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-248">The span representation of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-249">Возвращает `default` , `array` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0d915-249">Returns `default` when `array` is `null`.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="0d915-250">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-250"><paramref name="array" /> is covariant, and the array's type is not exactly <see langword="T[]" />".</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d915-251"><paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-251"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="text" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, IComparable&lt;T&gt; comparable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, class System.IComparable`1&lt;!!T&gt; comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T) (span As ReadOnlySpan(Of T), comparable As IComparable(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(ReadOnlySpan&lt;T&gt; span, IComparable&lt;T&gt; ^ comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : ReadOnlySpan&lt;'T&gt; * IComparable&lt;'T&gt; -&gt; int" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="System.IComparable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-252">Тип элемента диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-252">The element type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-253">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="0d915-253">The sorted <see cref="T:System.ReadOnlySpan`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="0d915-254"><see cref="T:System.IComparable`1" />, используемый при сравнении.</span><span class="sxs-lookup"><span data-stu-id="0d915-254">The <see cref="T:System.IComparable`1" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="0d915-255">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный интерфейс <see cref="T:System.IComparable`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-255">Searches an entire sorted <see cref="T:System.ReadOnlySpan`1" /> for a value using the specified <see cref="T:System.IComparable`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="0d915-256">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-256">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-257">Свойство <paramref name="comparable" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-257"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (this Span&lt;T&gt; span, IComparable&lt;T&gt; comparable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, class System.IComparable`1&lt;!!T&gt; comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T) (span As Span(Of T), comparable As IComparable(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(Span&lt;T&gt; span, IComparable&lt;T&gt; ^ comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Span&lt;'T&gt; * IComparable&lt;'T&gt; -&gt; int" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="System.IComparable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-258">Тип элемента диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-258">The element type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-259">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="0d915-259">The sorted <see cref="T:System.Span`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="0d915-260"><see cref="T:System.IComparable`1" />, используемый при сравнении.</span><span class="sxs-lookup"><span data-stu-id="0d915-260">The <see cref="T:System.IComparable`1" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="0d915-261">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный интерфейс <see cref="T:System.IComparable`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-261">Searches an entire sorted <see cref="T:System.Span`1" /> for a value using the specified <see cref="T:System.IComparable`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="0d915-262">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-262">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Span`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-263"><paramref name="comparable" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-263"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparable&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparable&gt; (this ReadOnlySpan&lt;T&gt; span, TComparable comparable) where TComparable : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.IComparable`1&lt;!!T&gt;) TComparable&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!TComparable comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparable) (span As ReadOnlySpan(Of T), comparable As TComparable) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparable&gt;&#xA; where TComparable : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(ReadOnlySpan&lt;T&gt; span, TComparable comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : ReadOnlySpan&lt;'T&gt; * 'Comparable -&gt; int (requires 'Comparable :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparable">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="TComparable" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-264">Тип элемента диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-264">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparable"><span data-ttu-id="0d915-265">Конкретный тип <see cref="T:System.IComparable`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-265">The specific type of <see cref="T:System.IComparable`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-266">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="0d915-266">The sorted <see cref="T:System.ReadOnlySpan`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="0d915-267"><typeparamref name="TComparable" />, используемый при сравнении.</span><span class="sxs-lookup"><span data-stu-id="0d915-267">The <typeparamref name="TComparable" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="0d915-268">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный тип <typeparamref name="TComparable" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-268">Searches an entire sorted <see cref="T:System.ReadOnlySpan`1" /> for a value using the specified <typeparamref name="TComparable" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="0d915-269">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-269">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-270">Свойство <paramref name="comparable" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-270"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparable&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparable&gt; (this Span&lt;T&gt; span, TComparable comparable) where TComparable : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.IComparable`1&lt;!!T&gt;) TComparable&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!TComparable comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparable) (span As Span(Of T), comparable As TComparable) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparable&gt;&#xA; where TComparable : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(Span&lt;T&gt; span, TComparable comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Span&lt;'T&gt; * 'Comparable -&gt; int (requires 'Comparable :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparable">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="TComparable" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-271">Тип элемента диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-271">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparable"><span data-ttu-id="0d915-272">Конкретный тип <see cref="T:System.IComparable`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-272">The specific type of <see cref="T:System.IComparable`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-273">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="0d915-273">The sorted <see cref="T:System.Span`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="0d915-274"><typeparamref name="TComparable" />, используемый при сравнении.</span><span class="sxs-lookup"><span data-stu-id="0d915-274">The <typeparamref name="TComparable" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="0d915-275">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный тип <typeparamref name="TComparable" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-275">Searches an entire sorted <see cref="T:System.Span`1" /> for a value using the specified <typeparamref name="TComparable" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="0d915-276">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-276">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Span`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-277">Свойство <paramref name="comparable" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-277"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparer&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparer&gt; (this ReadOnlySpan&lt;T&gt; span, T value, TComparer comparer) where TComparer : System.Collections.Generic.IComparer&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.Collections.Generic.IComparer`1&lt;!!T&gt;) TComparer&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value, !!TComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparer) (span As ReadOnlySpan(Of T), value As T, comparer As TComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparer&gt;&#xA; where TComparer : System::Collections::Generic::IComparer&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(ReadOnlySpan&lt;T&gt; span, T value, TComparer comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : ReadOnlySpan&lt;'T&gt; * 'T * 'Comparer -&gt; int (requires 'Comparer :&gt; System.Collections.Generic.IComparer&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparer" Type="TComparer" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-278">Тип элемента диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-278">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparer"><span data-ttu-id="0d915-279">Конкретный тип <see cref="T:System.Collections.Generic.IComparer`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-279">The specific type of <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-280">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="0d915-280">The sorted <see cref="T:System.ReadOnlySpan`1" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-281">Искомый объект.</span><span class="sxs-lookup"><span data-stu-id="0d915-281">The object to locate.</span></span> <span data-ttu-id="0d915-282">Для ссылочных типов допускается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-282">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="0d915-283"><typeparamref name="TComparer" />, используемый при сравнении.</span><span class="sxs-lookup"><span data-stu-id="0d915-283">The <typeparamref name="TComparer" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="0d915-284">Выполняет поиск указанного значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный тип <typeparamref name="TComparer" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-284">Searches an entire sorted <see cref="T:System.ReadOnlySpan`1" /> for a specified value using the specified <typeparamref name="TComparer" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="0d915-285">Отсчитываемый от нуля индекс элемента <paramref name="value" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="value" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-285">The zero-based index of <paramref name="value" /> in the sorted <paramref name="span" />, if <paramref name="value" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-286"><paramref name="comparer" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-286"><paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparer&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparer&gt; (this Span&lt;T&gt; span, T value, TComparer comparer) where TComparer : System.Collections.Generic.IComparer&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.Collections.Generic.IComparer`1&lt;!!T&gt;) TComparer&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value, !!TComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparer) (span As Span(Of T), value As T, comparer As TComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparer&gt;&#xA; where TComparer : System::Collections::Generic::IComparer&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(Span&lt;T&gt; span, T value, TComparer comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Span&lt;'T&gt; * 'T * 'Comparer -&gt; int (requires 'Comparer :&gt; System.Collections.Generic.IComparer&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparer" Type="TComparer" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-287">Тип элемента диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-287">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparer"><span data-ttu-id="0d915-288">Конкретный тип <see cref="T:System.Collections.Generic.IComparer`1" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-288">The specific type of <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-289">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="0d915-289">The sorted <see cref="T:System.Span`1" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-290">Искомый объект.</span><span class="sxs-lookup"><span data-stu-id="0d915-290">The object to locate.</span></span> <span data-ttu-id="0d915-291">Для ссылочных типов допускается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-291">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="0d915-292"><typeparamref name="TComparer" />, используемый при сравнении.</span><span class="sxs-lookup"><span data-stu-id="0d915-292">The <typeparamref name="TComparer" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="0d915-293">Выполняет поиск указанного значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный тип <typeparamref name="TComparer" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-293">Searches an entire sorted <see cref="T:System.Span`1" /> for a specified value using the specified <typeparamref name="TComparer" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="0d915-294">Отсчитываемый от нуля индекс элемента <paramref name="value" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="value" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-294">The zero-based index of <paramref name="value" /> in the sorted <paramref name="span" />, if <paramref name="value" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Span`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d915-295">Свойство <paramref name="comparer" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-295"><paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public static int CompareTo (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareTo(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; other, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CompareTo (span As ReadOnlySpan(Of Char), other As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int CompareTo(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member CompareTo : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.MemoryExtensions.CompareTo (span, other, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-296">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-296">The source span.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-297">Значение для сравнения с исходным диапазоном.</span><span class="sxs-lookup"><span data-stu-id="0d915-297">The value to compare with the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-298">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-298">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-299">Сравнивает один диапазон символов с другим с помощью указанного сравнения строк и возвращает целое число, которое указывает их относительное расположение в порядке сортировки.</span><span class="sxs-lookup"><span data-stu-id="0d915-299">Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="0d915-300">Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:</span><span class="sxs-lookup"><span data-stu-id="0d915-300">A signed integer that indicates the relative order of <paramref name="span" /> and <paramref name="other" />:</span></span><br/>   <span data-ttu-id="0d915-301">— Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-301">- If less than 0, <paramref name="span" /> precedes than <paramref name="other" />.</span></span><br/>   <span data-ttu-id="0d915-302">— Если 0, <paramref name="span" /> равно <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-302">- If 0, <paramref name="span" /> equals <paramref name="other" />.</span></span><br/>   <span data-ttu-id="0d915-303">— Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-303">- If greater than 0, <paramref name="span" /> follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public static bool Contains (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Contains : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.Contains (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-304">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-304">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-305">Значение, которое необходимо найти в исходном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-305">The value to seek within the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-306">Значение перечисления, определяющее способ сравнения символов в <paramref name="span" /> и <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-306">An enumeration value that determines how the characters in <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-307">Указывает, находится ли указанное значение в пределах диапазона символов, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-307">Indicates whether a specified value occurs within a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="0d915-308">Значение <see langword="true" />, если <paramref name="value" /> находится в диапазоне; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-308"><see langword="true" /> if <paramref name="value" /> occurs within the span, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(ReadOnlySpan&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member Contains : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Contains (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-309">Тип диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-309">The type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-310">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-310">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-311">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="0d915-311">The value to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-312">Указывает, найдено ли указанное значение в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-312">Indicates whether a specified value is found in a read-only span.</span></span> <span data-ttu-id="0d915-313">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-313">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-314">Значение <see langword="true" />, если найдено; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-314"><see langword="true" /> if found, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(Span&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member Contains : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Contains (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-315">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-315">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-316">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-316">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-317">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="0d915-317">The value to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-318">Указывает, найдено ли указанное значение в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-318">Indicates whether a specified value is found in a span.</span></span> <span data-ttu-id="0d915-319">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-319">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-320">Значение <see langword="true" />, если найдено; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-320"><see langword="true" /> if found, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyTo&lt;T&gt; (this T[] source, Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyTo&lt;T&gt;(!!T[] source, valuetype System.Memory`1&lt;!!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyTo(Of T) (source As T(), destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CopyTo(cli::array &lt;T&gt; ^ source, Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="static member CopyTo : 'T[] * Memory&lt;'T&gt; -&gt; unit" Usage="System.MemoryExtensions.CopyTo (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" RefType="this" />
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-321">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-321">The type of the array.</span></span></typeparam>
        <param name="source"><span data-ttu-id="0d915-322">Массив, из которого необходимо скопировать элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-322">The array to copy items from.</span></span></param>
        <param name="destination"><span data-ttu-id="0d915-323">Память, в которую необходимо скопировать элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-323">The memory to copy items into.</span></span></param>
        <summary><span data-ttu-id="0d915-324">Копирует содержимое массива в область памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-324">Copies the contents of the array into a memory region.</span></span></summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="0d915-325">Если `source` и`destination` перекрывает, этот метод ведет себя так, как если бы исходные значения накладываются во временное расположение до переписывания места назначения.</span><span class="sxs-lookup"><span data-stu-id="0d915-325">If `source` and `destination` overlap, this method behaves as if the original values are in a temporary location before the destination is overwritten.</span></span>

         ]]></format>
         </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0d915-326">Место назначения короче исходного массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-326">The destination is shorter than the source array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyTo&lt;T&gt; (this T[] source, Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyTo&lt;T&gt;(!!T[] source, valuetype System.Span`1&lt;!!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyTo(Of T) (source As T(), destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CopyTo(cli::array &lt;T&gt; ^ source, Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="static member CopyTo : 'T[] * Span&lt;'T&gt; -&gt; unit" Usage="System.MemoryExtensions.CopyTo (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-327">Тип массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-327">The type of the array.</span></span></typeparam>
        <param name="source"><span data-ttu-id="0d915-328">Массив, из которого необходимо скопировать элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-328">The array to copy items from.</span></span></param>
        <param name="destination"><span data-ttu-id="0d915-329">Диапазон для копирования элементов.</span><span class="sxs-lookup"><span data-stu-id="0d915-329">The span to copy items into.</span></span></param>
        <summary><span data-ttu-id="0d915-330">Копирует содержимое массива в диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-330">Copies the contents of the array into the span.</span></span></summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="0d915-331">Если `source` и`destination` перекрывает, этот метод ведет себя так, как если бы исходные значения накладываются во временное расположение до переписывания места назначения.</span><span class="sxs-lookup"><span data-stu-id="0d915-331">If `source` and `destination` overlap, this method behaves as if the original values are in a temporary location before the destination is overwritten.</span></span>

         ]]></format>
         </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0d915-332">Диапазон назначения короче исходного массива.</span><span class="sxs-lookup"><span data-stu-id="0d915-332">The destination Span is shorter than the source array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public static bool EndsWith (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool EndsWith(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member EndsWith : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.EndsWith (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-333">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-333">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-334">Последовательность, сравниваемая с концом исходного диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-334">The sequence to compare to the end of the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-335">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-335">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-336">Определяет, совпадает ли конец <paramref name="span" /> с заданным <paramref name="value" /> при сравнении с учетом заданного параметра <paramref name="comparisonType" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-336">Determines whether the end of the <paramref name="span" /> matches the specified <paramref name="value" /> when compared using the specified <paramref name="comparisonType" /> option.</span></span></summary>
        <returns><span data-ttu-id="0d915-337">Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-337"><see langword="true" /> if <paramref name="value" /> matches the end of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EndsWith&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool EndsWith(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member EndsWith : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.EndsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-338">Тип диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-338">The type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-339">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-339">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-340">Последовательность, сравниваемая с концом исходного диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-340">The sequence to compare to the end of the source span.</span></span></param>
        <summary><span data-ttu-id="0d915-341">Определяет, отображается ли указанная последовательность в конце диапазона, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-341">Determines whether the specified sequence appears at the end of a read-only span.</span></span></summary>
        <returns><span data-ttu-id="0d915-342">Значение <see langword="true"/>, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-342"><see langword="true"/> if <paramref name="value" /> matches the end of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EndsWith&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool EndsWith(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member EndsWith : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.EndsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-343">Тип диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-343">The type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-344">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-344">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-345">Последовательность, сравниваемая с концом исходного диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-345">The sequence to compare to the end of the source span.</span></span></param>
        <summary><span data-ttu-id="0d915-346">Определяет, отображается ли указанная последовательность в конце диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-346">Determines whether the specified sequence appears at the end of a span.</span></span></summary>
        <returns><span data-ttu-id="0d915-347">Значение <see langword="true"/>, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-347"><see langword="true"/> if <paramref name="value" /> matches the end of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public static System.Text.SpanRuneEnumerator EnumerateRunes (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.SpanRuneEnumerator EnumerateRunes(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnumerateRunes (span As ReadOnlySpan(Of Char)) As SpanRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Text::SpanRuneEnumerator EnumerateRunes(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member EnumerateRunes : ReadOnlySpan&lt;char&gt; -&gt; System.Text.SpanRuneEnumerator" Usage="System.MemoryExtensions.EnumerateRunes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.SpanRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-348">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-348">The source span.</span></span></param>
        <summary><span data-ttu-id="0d915-349">Возвращает перечисление <see cref="T:System.Text.Rune" /> из предоставленного диапазона, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-349">Returns an enumeration of <see cref="T:System.Text.Rune" /> from the provided read-only span.</span></span></summary>
        <returns><span data-ttu-id="0d915-350">Перечислитель Rune.</span><span class="sxs-lookup"><span data-stu-id="0d915-350">A rune enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-351">В перечислении <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>будут представлены недопустимые последовательности.</span><span class="sxs-lookup"><span data-stu-id="0d915-351">Invalid sequences will be represented in the enumeration by <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public static System.Text.SpanRuneEnumerator EnumerateRunes (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.SpanRuneEnumerator EnumerateRunes(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnumerateRunes (span As Span(Of Char)) As SpanRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Text::SpanRuneEnumerator EnumerateRunes(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member EnumerateRunes : Span&lt;char&gt; -&gt; System.Text.SpanRuneEnumerator" Usage="System.MemoryExtensions.EnumerateRunes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.SpanRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-352">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-352">The source span.</span></span></param>
        <summary><span data-ttu-id="0d915-353">Возвращает перечисление <see cref="T:System.Text.Rune" /> из предоставленного диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-353">Returns an enumeration of <see cref="T:System.Text.Rune" /> from the provided span.</span></span></summary>
        <returns><span data-ttu-id="0d915-354">Перечислитель Rune.</span><span class="sxs-lookup"><span data-stu-id="0d915-354">A rune enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-355">В перечислении <xref:System.Text.Rune.ReplacementChar>будут представлены недопустимые последовательности.</span><span class="sxs-lookup"><span data-stu-id="0d915-355">Invalid sequences will be represented in the enumeration by <xref:System.Text.Rune.ReplacementChar>.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; other, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Equals (span As ReadOnlySpan(Of Char), other As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Equals(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Equals : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.Equals (span, other, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-356">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-356">The source span.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-357">Значение для сравнения с исходным диапазоном.</span><span class="sxs-lookup"><span data-stu-id="0d915-357">The value to compare with the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-358">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-358">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-359">Определяет, имеет ли <paramref name="span" /> и указанный диапазон <paramref name="other" /> одинаковые символы при сравнении с использованием указанного параметра <paramref name="comparisonType" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-359">Determines whether this <paramref name="span" /> and the specified <paramref name="other" /> span have the same characters when compared using the specified <paramref name="comparisonType" /> option.</span></span></summary>
        <returns><span data-ttu-id="0d915-360">Значение <see langword="true" />, если объекты равны; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-360"><see langword="true" /> if equal, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.MemoryExtensions.IndexOf (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-361">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-361">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-362">Значение, которое необходимо найти в исходном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-362">The value to seek within the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-363">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-363">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-364">Возвращает индекс с отсчетом от нуля первого вхождения указанного <paramref name="value" /> в текущем <paramref name="span" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-364">Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> in the current <paramref name="span" />.</span></span></summary>
        <returns><span data-ttu-id="0d915-365">Индекс вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-365">The index of the occurrence of the value in the span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-366">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-366">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-367">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-367">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-368">Искомая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-368">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-369">Выполняет поиск указанной последовательности и возвращает индекс ее первого вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-369">Searches for the specified sequence and returns the index of its first occurrence.</span></span> <span data-ttu-id="0d915-370">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-370">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-371">Индекс вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-371">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-372">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-372">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(ReadOnlySpan&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-373">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-373">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-374">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-374">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-375">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="0d915-375">The value to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-376">Выполняет поиск указанного значения и возвращает индекс его первого вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-376">Searches for the specified value and returns the index of its first occurrence.</span></span> <span data-ttu-id="0d915-377">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-377">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-378">Индекс вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-378">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-379">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-379">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-380">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-380">The type of the span and value..</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-381">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-381">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-382">Искомая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-382">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-383">Выполняет поиск указанной последовательности и возвращает индекс ее первого вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-383">Searches for the specified sequence and returns the index of its first occurrence.</span></span> <span data-ttu-id="0d915-384">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-384">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-385">Индекс вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-385">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-386">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-386">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Span&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-387">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-387">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-388">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-388">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-389">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="0d915-389">The value to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-390">Выполняет поиск указанного значения и возвращает индекс его первого вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-390">Searches for the specified value and returns the index of its first occurrence.</span></span> <span data-ttu-id="0d915-391">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-391">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-392">Индекс вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-392">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-393">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-393">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-394">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-394">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-395">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-395">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="0d915-396">Набор значений для поиска.</span><span class="sxs-lookup"><span data-stu-id="0d915-396">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-397">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-397">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-398">Первый индекс вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-398">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-399">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-399">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-400">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-400">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-401">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-401">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="0d915-402">Набор значений для поиска.</span><span class="sxs-lookup"><span data-stu-id="0d915-402">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-403">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-403">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-404">Первый индекс вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-404">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-405">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-405">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-406">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-406">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-407">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-407">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-408">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-408">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-409">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-409">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-410">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-410">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-411">Первый индекс вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-411">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-412">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-412">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(Span&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-413">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-413">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-414">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-414">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-415">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-415">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-416">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-416">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-417">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-417">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-418">Первый индекс вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-418">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-419">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-419">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-420">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-420">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-421">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-421">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-422">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-422">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-423">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-423">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="0d915-424">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-424">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-425">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-425">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-426">Первый индекс вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-426">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-427">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-427">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(Span&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-428">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-428">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-429">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-429">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-430">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-430">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-431">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-431">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="0d915-432">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-432">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-433">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-433">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-434">Первый индекс вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-434">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-435">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-435">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsWhiteSpace (span As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsWhiteSpace(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.MemoryExtensions.IsWhiteSpace span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-436">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-436">The source span.</span></span></param>
        <summary><span data-ttu-id="0d915-437">Указывает, содержит ли указанный диапазон только символы пробела.</span><span class="sxs-lookup"><span data-stu-id="0d915-437">Indicates whether the specified span contains only whitespace characters.</span></span></summary>
        <returns><span data-ttu-id="0d915-438">Значение <see langword="true" />, если диапазон содержит только пробелы, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-438"><see langword="true" /> if the span contains only whitespace characters, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.MemoryExtensions.LastIndexOf (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-439">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-439">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-440">Значение, которое необходимо найти в исходном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-440">The value to seek within the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-441">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-441">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-442">Возвращает индекс с отсчетом от нуля последнего вхождения указанного <paramref name="value" /> в текущем <paramref name="span" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-442">Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> in the current <paramref name="span" />.</span></span></summary>
        <returns><span data-ttu-id="0d915-443">Индекс последнего вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-443">The index of the last occurrence of the value in the span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-444">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-444">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-445">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-445">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-446">Искомая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-446">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-447">Выполняет поиск указанной последовательности и возвращает индекс ее последнего вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-447">Searches for the specified sequence and returns the index of its last occurrence.</span></span> <span data-ttu-id="0d915-448">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-448">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-449">Индекс последнего вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-449">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-450">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-450">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(ReadOnlySpan&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-451">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-451">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-452">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-452">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-453">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="0d915-453">The value to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-454">Выполняет поиск указанного значения и возвращает индекс его последнего вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-454">Searches for the specified value and returns the index of its last occurrence.</span></span> <span data-ttu-id="0d915-455">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-455">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-456">Индекс последнего вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-456">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-457">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-457">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-458">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-458">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-459">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-459">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-460">Искомая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-460">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-461">Выполняет поиск указанной последовательности и возвращает индекс ее последнего вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-461">Searches for the specified sequence and returns the index of its last occurrence.</span></span> <span data-ttu-id="0d915-462">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-462">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-463">Индекс последнего вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-463">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-464">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-464">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(Span&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-465">Тип диапазона и значения.</span><span class="sxs-lookup"><span data-stu-id="0d915-465">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-466">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-466">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-467">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="0d915-467">The value to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-468">Выполняет поиск указанного значения и возвращает индекс его последнего вхождения.</span><span class="sxs-lookup"><span data-stu-id="0d915-468">Searches for the specified value and returns the index of its last occurrence.</span></span> <span data-ttu-id="0d915-469">Значения сравниваются с помощью IEquatable {T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-469">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-470">Индекс последнего вхождения значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-470">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="0d915-471">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-471">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-472">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-472">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-473">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-473">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="0d915-474">Набор значений для поиска.</span><span class="sxs-lookup"><span data-stu-id="0d915-474">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-475">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-475">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-476">Индекс последнего вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-476">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-477">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-477">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-478">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-478">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-479">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-479">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="0d915-480">Набор значений для поиска.</span><span class="sxs-lookup"><span data-stu-id="0d915-480">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-481">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-481">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-482">Индекс последнего вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-482">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-483">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-483">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-484">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-484">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-485">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-485">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-486">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-486">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-487">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-487">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-488">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-488">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-489">Индекс последнего вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-489">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-490">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-490">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(Span&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-491">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-491">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-492">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-492">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-493">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-493">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-494">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-494">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-495">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-495">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-496">Индекс последнего вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-496">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-497">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-497">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-498">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-498">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-499">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-499">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-500">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-500">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-501">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-501">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="0d915-502">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-502">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-503">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-503">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-504">Индекс последнего вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-504">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-505">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-505">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(Span&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-506">Тип диапазона и значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-506">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-507">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-507">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="0d915-508">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-508">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="0d915-509">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-509">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="0d915-510">Одно из искомых значений.</span><span class="sxs-lookup"><span data-stu-id="0d915-510">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="0d915-511">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</span><span class="sxs-lookup"><span data-stu-id="0d915-511">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="0d915-512">Индекс последнего вхождения любого значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-512">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="0d915-513">Возвращает значение –1, если не найдено.</span><span class="sxs-lookup"><span data-stu-id="0d915-513">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member Overlaps : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-514">Тип елминтс в последовательности, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-514">The type of elmeents in the read-only sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-515">Первая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-515">The first sequence.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-516">Вторая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-516">The second sequence.</span></span></param>
        <summary><span data-ttu-id="0d915-517">Определяет, перекрываются ли две последовательности только для чтения в памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-517">Determines whether two read-only sequences overlap in memory.</span></span></summary>
        <returns><span data-ttu-id="0d915-518">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-518"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As Span(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member Overlaps : Span&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-519">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-519">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-520">Сравниваемый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-520">The span to compare.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-521">Доступный только для чтения диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="0d915-521">The read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="0d915-522">Определяет, перекрываются ли диапазон и диапазон только для чтения в памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-522">Determines whether a span and a read-only span overlap in memory.</span></span></summary>
        <returns><span data-ttu-id="0d915-523">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-523"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, out int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other, [out] int32&amp; elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T), ByRef elementOffset As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, [Runtime::InteropServices::Out] int % elementOffset);" />
      <MemberSignature Language="F#" Value="static member Overlaps : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; *  -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="elementOffset" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-524">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-524">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-525">Первая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-525">The first sequence.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-526">Вторая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-526">The second sequence.</span></span></param>
        <summary><span data-ttu-id="0d915-527">Определяет, перекрываются ли две последовательности только для чтения в памяти, и выводит смещение элементов.</span><span class="sxs-lookup"><span data-stu-id="0d915-527">Determines whether two read-only sequences overlap in memory and outputs the element offset.</span></span></summary>
        <returns><span data-ttu-id="0d915-528">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-528"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, out int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other, [out] int32&amp; elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As Span(Of T), other As ReadOnlySpan(Of T), ByRef elementOffset As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, [Runtime::InteropServices::Out] int % elementOffset);" />
      <MemberSignature Language="F#" Value="static member Overlaps : Span&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; *  -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="elementOffset" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-529">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-529">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-530">Сравниваемая первая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-530">The first sequence to compare.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-531">Сравниваемая вторая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-531">The second sequence to compare.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="0d915-532">При возврате из метода содержит смещение между <paramref name="span" /> и <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-532">When the method returns, contains the offset between <paramref name="span" /> and <paramref name="other" />.</span></span></param>
        <summary><span data-ttu-id="0d915-533">Определяет, перекрываются ли диапазон и диапазон только для чтения в памяти, и выводит смещение элементов.</span><span class="sxs-lookup"><span data-stu-id="0d915-533">Determines whether a span and a read-only span overlap in memory and outputs the element offset.</span></span></summary>
        <returns><span data-ttu-id="0d915-534">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-534"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (this Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Reverse``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Reverse(Of T) (span As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Reverse(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member Reverse : Span&lt;'T&gt; -&gt; unit" Usage="System.MemoryExtensions.Reverse span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-535">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-535">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-536">Диапазон для изменения порядка.</span><span class="sxs-lookup"><span data-stu-id="0d915-536">The span to reverse.</span></span></param>
        <summary><span data-ttu-id="0d915-537">Изменяет порядок элементов во всем массиве на обратный.</span><span class="sxs-lookup"><span data-stu-id="0d915-537">Reverses the sequence of the elements in the entire span.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceCompareTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SequenceCompareTo&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SequenceCompareTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceCompareTo(Of T As IComparable(Of T)) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int SequenceCompareTo(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceCompareTo : ReadOnlySpan&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceCompareTo (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-538">Тип элементов в последовательности.</span><span class="sxs-lookup"><span data-stu-id="0d915-538">The type of elements in the sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-539">Сравниваемая первая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-539">The first sequence to compare.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-540">Сравниваемая вторая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-540">The second sequence to compare.</span></span></param>
        <summary><span data-ttu-id="0d915-541">Определяет относительный порядок двух последовательностей только для чтения путем сравнения их элементов с помощью IComparable{T}.CompareTo (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-541">Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-542">Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:</span><span class="sxs-lookup"><span data-stu-id="0d915-542">A signed integer that indicates the relative order of <paramref name="span" /> and <paramref name="other" />:</span></span><br/>   <span data-ttu-id="0d915-543">— Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-543">- If less than 0, <paramref name="span" /> precedes than <paramref name="other" />.</span></span><br/>   <span data-ttu-id="0d915-544">— Если 0, <paramref name="span" /> равно <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-544">- If 0, <paramref name="span" /> equals <paramref name="other" />.</span></span><br/>   <span data-ttu-id="0d915-545">— Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-545">- If greater than 0, <paramref name="span" /> follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceCompareTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SequenceCompareTo&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SequenceCompareTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceCompareTo(Of T As IComparable(Of T)) (span As Span(Of T), other As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int SequenceCompareTo(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceCompareTo : Span&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceCompareTo (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-546">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-546">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-547">Сравниваемый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-547">The span to compare.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-548">Доступный только для чтения диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="0d915-548">The read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="0d915-549">Определяет относительный порядок диапазона и диапазона только для чтения путем сравнения их элементов с помощью IComparable{T}.CompareTo (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-549">Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-550">Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:</span><span class="sxs-lookup"><span data-stu-id="0d915-550">A signed integer that indicates the relative order of <paramref name="span" /> and <paramref name="other" />:</span></span><br/>   <span data-ttu-id="0d915-551">— Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-551">- If less than 0, <paramref name="span" /> precedes than <paramref name="other" />.</span></span><br/>   <span data-ttu-id="0d915-552">— Если 0, <paramref name="span" /> равно <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-552">- If 0, <paramref name="span" /> equals <paramref name="other" />.</span></span><br/>   <span data-ttu-id="0d915-553">— Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-553">- If greater than 0, <paramref name="span" /> follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceEqual (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-554">Тип элементов в последовательности.</span><span class="sxs-lookup"><span data-stu-id="0d915-554">The type of elements in the sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-555">Сравниваемая первая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-555">The first sequence to compare.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-556">Сравниваемая вторая последовательность.</span><span class="sxs-lookup"><span data-stu-id="0d915-556">The second sequence to compare.</span></span></param>
        <summary><span data-ttu-id="0d915-557">Определяет, равны ли две последовательности только для чтения, сравнивая элементы с помощью IEquatable{T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-557">Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-558">Значение <see langword="true" />, если две последовательности равны, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-558"><see langword="true" /> if the two sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of T As IEquatable(Of T)) (span As Span(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceEqual (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-559">Тип элементов в последовательности.</span><span class="sxs-lookup"><span data-stu-id="0d915-559">The type of elements in the sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-560">Сравниваемый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-560">The span to compare.</span></span></param>
        <param name="other"><span data-ttu-id="0d915-561">Доступный только для чтения диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="0d915-561">The read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="0d915-562">Определяет, равны ли диапазон и диапазон только для чтения, сравнивая элементы с помощью IEquatable{T}.Equals (T).</span><span class="sxs-lookup"><span data-stu-id="0d915-562">Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="0d915-563">Значение <see langword="true" />, если две последовательности равны, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-563"><see langword="true" /> if the two sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public static bool StartsWith (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member StartsWith : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.StartsWith (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-564">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-564">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-565">Последовательность, сравниваемая с началом исходного диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-565">The sequence to compare to the beginning of the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="0d915-566">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-566">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="0d915-567">Определяет, начинается ли диапазон символов только для чтения с указанного значения при сравнении с использованием указанного значения <see cref="T:System.StringComparison" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-567">Determines whether a read-only character span begins with a specified value when compared using a specified <see cref="T:System.StringComparison" /> value.</span></span></summary>
        <returns><span data-ttu-id="0d915-568"><see langword="true"/>, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-568"><see langword="true"/> if <paramref name="value" /> matches the beginning of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool StartsWith&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member StartsWith : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.StartsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-569">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-569">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-570">Искомый диапазон символов только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-570">The read-only character span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-571">Последовательность для поиска в начале <paramref name="span" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-571">A sequence to search for at the start of <paramref name="span" />.</span></span></param>
        <summary><span data-ttu-id="0d915-572">Определяет, отображается ли указанная последовательность в начале диапазона, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-572">Determines whether a specified sequence appears at the start of a read-only span.</span></span></summary>
        <returns><span data-ttu-id="0d915-573"><see langword="true"/>, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-573"><see langword="true"/> if <paramref name="value" /> matches the beginning of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool StartsWith&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member StartsWith : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.StartsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-574">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-574">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="0d915-575">Искомый диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-575">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="0d915-576">Последовательность для поиска в начале <paramref name="span" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-576">A sequence to search for at the start of <paramref name="span" />.</span></span></param>
        <summary><span data-ttu-id="0d915-577">Определяет, отображается ли указанная последовательность в начале диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-577">Determines whether a specified sequence appears at the start of a span.</span></span></summary>
        <returns><span data-ttu-id="0d915-578"><see langword="true"/>, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d915-578"><see langword="true"/> if <paramref name="value" /> matches the beginning of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static int ToLower (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToLower(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLower (source As ReadOnlySpan(Of Char), destination As Span(Of Char), culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToLower(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * System.Globalization.CultureInfo -&gt; int" Usage="System.MemoryExtensions.ToLower (source, destination, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0d915-579">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-579">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="0d915-580">Целевой диапазон, содержащий преобразованные символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-580">The destination span which contains the transformed characters.</span></span></param>
        <param name="culture"><span data-ttu-id="0d915-581">Объект, задающий правила определения регистра для языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="0d915-581">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="0d915-582">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в нижний регистр, используя правила учета регистра указанного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="0d915-582">Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="0d915-583">Количество символов, записанных в целевой диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-583">The number of characters written into the destination span.</span></span> <span data-ttu-id="0d915-584">Если целевой диапазон слишком мал, возвращает значение –1.</span><span class="sxs-lookup"><span data-stu-id="0d915-584">If the destination is too small, returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-585">Если `culture` имеет `null`значение ,<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> будет использоваться.</span><span class="sxs-lookup"><span data-stu-id="0d915-585">If `culture` is `null`, <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> will be used.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d915-586">Исходный и целевой буферы перекрываются.</span><span class="sxs-lookup"><span data-stu-id="0d915-586">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static int ToLowerInvariant (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToLowerInvariant(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLowerInvariant (source As ReadOnlySpan(Of Char), destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToLowerInvariant(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; -&gt; int" Usage="System.MemoryExtensions.ToLowerInvariant (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0d915-587">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-587">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="0d915-588">Целевой диапазон, содержащий преобразованные символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-588">The destination span which contains the transformed characters.</span></span></param>
        <summary><span data-ttu-id="0d915-589">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в нижний регистр, используя правила учета регистра инвариантного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="0d915-589">Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="0d915-590">Количество символов, записанных в целевой диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-590">The number of characters written into the destination span.</span></span> <span data-ttu-id="0d915-591">Если целевой диапазон слишком мал, возвращает значение –1.</span><span class="sxs-lookup"><span data-stu-id="0d915-591">If the destination is too small, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d915-592">Исходный и целевой буферы перекрываются.</span><span class="sxs-lookup"><span data-stu-id="0d915-592">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static int ToUpper (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToUpper(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToUpper (source As ReadOnlySpan(Of Char), destination As Span(Of Char), culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToUpper(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * System.Globalization.CultureInfo -&gt; int" Usage="System.MemoryExtensions.ToUpper (source, destination, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0d915-593">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-593">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="0d915-594">Целевой диапазон, содержащий преобразованные символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-594">The destination span which contains the transformed characters.</span></span></param>
        <param name="culture"><span data-ttu-id="0d915-595">Объект, задающий правила определения регистра для языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="0d915-595">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="0d915-596">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в верхний регистр, используя правила учета регистра указанного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="0d915-596">Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="0d915-597">Количество символов, записанных в целевой диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-597">The number of characters written into the destination span.</span></span> <span data-ttu-id="0d915-598">Если целевой диапазон слишком мал, возвращает значение –1.</span><span class="sxs-lookup"><span data-stu-id="0d915-598">If the destination is too small, returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-599">Если `culture` имеет `null`значение ,<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> будет использоваться.</span><span class="sxs-lookup"><span data-stu-id="0d915-599">If `culture` is `null`, <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> will be used.</span></span>

               </format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d915-600">Исходный и целевой буферы перекрываются.</span><span class="sxs-lookup"><span data-stu-id="0d915-600">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static int ToUpperInvariant (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToUpperInvariant(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToUpperInvariant (source As ReadOnlySpan(Of Char), destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToUpperInvariant(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; -&gt; int" Usage="System.MemoryExtensions.ToUpperInvariant (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0d915-601">Исходный диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-601">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="0d915-602">Целевой диапазон, содержащий преобразованные символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-602">The destination span which contains the transformed characters.</span></span></param>
        <summary><span data-ttu-id="0d915-603">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в верхний регистр, используя правила учета регистра инвариантного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="0d915-603">Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="0d915-604">Количество символов, записанных в целевой диапазон.</span><span class="sxs-lookup"><span data-stu-id="0d915-604">The number of characters written into the destination span.</span></span> <span data-ttu-id="0d915-605">Если целевой диапазон слишком мал, возвращает значение –1.</span><span class="sxs-lookup"><span data-stu-id="0d915-605">If the destination is too small, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d915-606">Исходный и целевой буферы перекрываются.</span><span class="sxs-lookup"><span data-stu-id="0d915-606">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static Memory&lt;char&gt; Trim (this Memory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;char&gt; Trim(valuetype System.Memory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.Memory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (memory As Memory(Of Char)) As Memory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;char&gt; Trim(Memory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member Trim : Memory&lt;char&gt; -&gt; Memory&lt;char&gt;" Usage="System.MemoryExtensions.Trim memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="0d915-607">Исходная память, из которой удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-607">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-608">Удаляет все начальные и конечные пробелы из области памяти символов.</span><span class="sxs-lookup"><span data-stu-id="0d915-608">Removes all leading and trailing whitespace characters from a character memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; Trim (this ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; Trim(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; Trim(ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.Trim memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="0d915-609">Исходная память, из которой удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-609">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-610">Удаляет все начальные и конечные пробелы из области памяти символов только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-610">Removes all leading and trailing whitespace characters from a read-only character memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; Trim (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; Trim(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; Trim(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.Trim span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-611">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-611">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-612">Удаляет все начальные и конечные пробелы из диапазона символов только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-612">Removes all leading and trailing whitespace characters from a read-only character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static Span&lt;char&gt; Trim (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;char&gt; Trim(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As Span(Of Char)) As Span(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;char&gt; Trim(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member Trim : Span&lt;char&gt; -&gt; Span&lt;char&gt;" Usage="System.MemoryExtensions.Trim span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-613">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-613">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-614">Удаляет все начальные и конечные пробелы из диапазона символов.</span><span class="sxs-lookup"><span data-stu-id="0d915-614">Removes all leading and trailing whitespace characters from a character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; Trim (this ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; Trim(valuetype System.ReadOnlySpan`1&lt;char&gt; span, char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; Trim(ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;char&gt; * char -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.Trim (span, trimChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-615">Исходный диапазон, из которого удаляется символ.</span><span class="sxs-lookup"><span data-stu-id="0d915-615">The source span from which the character is removed.</span></span></param>
        <param name="trimChar"><span data-ttu-id="0d915-616">Указанный символ для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-616">The specified character to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-617">Удаляет все начальные и конечные вхождения указанного символа из диапазона символов, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-617">Removes all leading and trailing occurrences of a specified character from a read-only character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; Trim (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; Trim(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; Trim(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.Trim (span, trimChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-618">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-618">The source span from which the characters are removed.</span></span></param>
        <param name="trimChars"><span data-ttu-id="0d915-619">Диапазон, содержащий набор символов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-619">The span which contains the set of characters to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-620">Удаляет все начальные и конечные вхождения набора символов, указанного в диапазоне только для чтения, из диапазона символов, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-620">Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-621">Если `trimChars` является пустым, вместо них удаляются пробелы.</span><span class="sxs-lookup"><span data-stu-id="0d915-621">If `trimChars` is empty, whitespace characters are removed instead.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Trim&lt;T&gt; (this Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElements As ReadOnlySpan(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; Trim(Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-622">Тип элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-622">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-623">Исходная память, из которой удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-623">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-624">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-624">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-625">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-625">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-626">Если `trimElements` параметр пуст, память возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-626">If `trimElements` is empty, the memory is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Trim&lt;T&gt; (this Memory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElement As T) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; Trim(Memory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-627">Тип элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-627">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-628">Исходная память, из которой удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-628">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-629">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-629">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-630">Удаляет все начальные и конечные вхождения указанного элемента из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-630">Removes all leading and trailing occurrences of a specified element from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; Trim&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; Trim(ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-631">Тип элементов в области памяти, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-631">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-632">Исходная память, из которой удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-632">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-633">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-633">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-634">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-634">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-635">Если `trimElements` параметр пуст, память возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-635">If `trimElements` is empty, the memory is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; Trim&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElement As T) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; Trim(ReadOnlyMemory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-636">Тип элементов в области памяти, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-636">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-637">Исходная память, из которой удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-637">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-638">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-638">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-639">Удаляет все начальные и конечные вхождения указанного элемента из области памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-639">Removes all leading and trailing occurrences of a specified element from a read-only memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Trim&lt;T&gt; (this ReadOnlySpan&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As ReadOnlySpan(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; Trim(ReadOnlySpan&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-640">Тип элементов в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-640">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-641">Исходный диапазон, из которого удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-641">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-642">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-642">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-643">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-643">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-644">Если `trimElements` параметр пуст, то диапазон возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-644">If `trimElements` is empty, the span is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Trim&lt;T&gt; (this ReadOnlySpan&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As ReadOnlySpan(Of T), trimElement As T) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; Trim(ReadOnlySpan&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-645">Тип элементов в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-645">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-646">Исходный диапазон, из которого удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-646">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-647">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-647">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-648">Удаляет все начальные и конечные вхождения указанного элемента из диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-648">Removes all leading and trailing occurrences of a specified element from a read-only span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; Trim&lt;T&gt; (this Span&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As Span(Of T), trimElements As ReadOnlySpan(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; Trim(Span&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-649">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-649">The type of the elements in the span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-650">Исходный диапазон, из которого удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-650">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-651">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-651">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-652">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-652">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-653">Если `trimElements` параметр пуст, то диапазон возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-653">If `trimElements` is empty, the span is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; Trim&lt;T&gt; (this Span&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As Span(Of T), trimElement As T) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; Trim(Span&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-654">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-654">The type of the elements in the span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-655">Исходный диапазон, из которого удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-655">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-656">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-656">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-657">Удаляет все начальные и конечные вхождения указанного элемента из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-657">Removes all leading and trailing occurrences of a specified element from a span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static Memory&lt;char&gt; TrimEnd (this Memory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;char&gt; TrimEnd(valuetype System.Memory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (memory As Memory(Of Char)) As Memory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;char&gt; TrimEnd(Memory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Memory&lt;char&gt; -&gt; Memory&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="0d915-658">Исходная память, из которой удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-658">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-659">Удаляет все конечные пробелы из области памяти символов.</span><span class="sxs-lookup"><span data-stu-id="0d915-659">Removes all trailing whitespace characters from a character memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimEnd (this ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; TrimEnd(ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="0d915-660">Исходная память, из которой удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-660">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-661">Удаляет все конечные пробелы из области памяти символов только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-661">Removes all trailing whitespace characters from a read-only character memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEnd (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimEnd(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-662">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-662">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-663">Удаляет все конечные пробелы из диапазона символов только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-663">Removes all trailing whitespace characters from a read-only character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static Span&lt;char&gt; TrimEnd (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;char&gt; TrimEnd(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As Span(Of Char)) As Span(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;char&gt; TrimEnd(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Span&lt;char&gt; -&gt; Span&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-664">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-664">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-665">Удаляет все конечные пробелы из диапазона символов.</span><span class="sxs-lookup"><span data-stu-id="0d915-665">Removes all trailing whitespace characters from a character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEnd (this ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; span, char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimEnd(ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;char&gt; * char -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd (span, trimChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-666">Исходный диапазон, из которого удаляется символ.</span><span class="sxs-lookup"><span data-stu-id="0d915-666">The source span from which the character is removed.</span></span></param>
        <param name="trimChar"><span data-ttu-id="0d915-667">Указанный символ для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-667">The specified character to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-668">Удаляет все конечные вхождения указанного символа из диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-668">Removes all trailing occurrences of a specified character from a read-only span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEnd (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimEnd(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd (span, trimChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-669">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-669">The source span from which the characters are removed.</span></span></param>
        <param name="trimChars"><span data-ttu-id="0d915-670">Диапазон, содержащий набор символов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-670">The span which contains the set of characters to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-671">Удаляет все конечные вхождения набора символов, указанного в диапазоне только для чтения, из диапазона символов, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-671">Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-672">Если `trimChars` является пустым, вместо них удаляются пробелы.</span><span class="sxs-lookup"><span data-stu-id="0d915-672">If `trimChars` is empty, whitespace characters are removed instead.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimEnd&lt;T&gt; (this Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElements As ReadOnlySpan(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimEnd(Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-673">Тип элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-673">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-674">Исходная память, из которой удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-674">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-675">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-675">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-676">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-676">Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-677">Если `trimElements` параметр пуст, память возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-677">If `trimElements` is empty, the memory is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimEnd&lt;T&gt; (this Memory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElement As T) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimEnd(Memory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-678">Тип элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-678">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-679">Исходная память, из которой удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-679">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-680">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-680">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-681">Удаляет все конечные вхождения указанного элемента из области памяти символов.</span><span class="sxs-lookup"><span data-stu-id="0d915-681">Removes all trailing occurrences of a specified element from a character memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimEnd(ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-682">Тип элементов в области памяти, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-682">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-683">Исходная память, из которой удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-683">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-684">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-684">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-685">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-685">Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-686">Если `trimElements` параметр пуст, память возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-686">If `trimElements` is empty, the memory is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElement As T) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimEnd(ReadOnlyMemory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-687">Тип элементов в области памяти, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-687">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-688">Исходная память, из которой удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-688">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-689">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-689">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-690">Удаляет все конечные вхождения указанного элемента из области памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-690">Removes all trailing occurrences of a specified element from a read-only memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlySpan&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As ReadOnlySpan(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimEnd(ReadOnlySpan&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-691">Тип элементов в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-691">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-692">Исходный диапазон, из которого удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-692">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-693">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-693">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-694">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-694">Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-695">Если `trimElements` параметр пуст, то диапазон возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-695">If `trimElements` is empty, the span is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlySpan&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As ReadOnlySpan(Of T), trimElement As T) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimEnd(ReadOnlySpan&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-696">Тип элементов в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-696">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-697">Исходный диапазон, из которого удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-697">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-698">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-698">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-699">Удаляет все конечные вхождения указанного элемента из диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-699">Removes all trailing occurrences of a specified element from a read-only span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimEnd&lt;T&gt; (this Span&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As Span(Of T), trimElements As ReadOnlySpan(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimEnd(Span&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-700">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-700">The type of the elements in the span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-701">Исходный диапазон, из которого удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-701">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-702">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-702">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-703">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-703">Removes all trailing occurrences of a set of elements specified in a read-only span from a span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-704">Если `trimElements` параметр пуст, то диапазон возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-704">If `trimElements` is empty, the span is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimEnd&lt;T&gt; (this Span&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As Span(Of T), trimElement As T) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimEnd(Span&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-705">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-705">The type of the elements in the span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-706">Исходный диапазон, из которого удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-706">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-707">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-707">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-708">Удаляет все конечные вхождения указанного элемента из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-708">Removes all trailing occurrences of a specified element from a span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static Memory&lt;char&gt; TrimStart (this Memory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;char&gt; TrimStart(valuetype System.Memory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (memory As Memory(Of Char)) As Memory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;char&gt; TrimStart(Memory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Memory&lt;char&gt; -&gt; Memory&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="0d915-709">Исходная память, из которой удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-709">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-710">Удаляет все начальные пробелы из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-710">Removes all leading whitespace characters from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimStart (this ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimStart(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; TrimStart(ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="0d915-711">Исходная память, из которой удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-711">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-712">Удаляет все начальные пробелы из области памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-712">Removes all leading whitespace characters from a read-only memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimStart (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimStart(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimStart(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-713">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-713">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-714">Удаляет все начальные пробелы из диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-714">Removes all leading whitespace characters from a read-only span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static Span&lt;char&gt; TrimStart (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;char&gt; TrimStart(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As Span(Of Char)) As Span(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;char&gt; TrimStart(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Span&lt;char&gt; -&gt; Span&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-715">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-715">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="0d915-716">Удаляет все начальные пробелы из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-716">Removes all leading whitespace characters from a span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimStart (this ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimStart(valuetype System.ReadOnlySpan`1&lt;char&gt; span, char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimStart(ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;char&gt; * char -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart (span, trimChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-717">Исходный диапазон, из которого удаляется символ.</span><span class="sxs-lookup"><span data-stu-id="0d915-717">The source span from which the character is removed.</span></span></param>
        <param name="trimChar"><span data-ttu-id="0d915-718">Указанный символ для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-718">The specified character to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-719">Удаляет все начальные вхождения указанного символа из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-719">Removes all leading occurrences of a specified character from the span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimStart (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimStart(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimStart(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart (span, trimChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="0d915-720">Исходный диапазон, из которого удаляются символы.</span><span class="sxs-lookup"><span data-stu-id="0d915-720">The source span from which the characters are removed.</span></span></param>
        <param name="trimChars"><span data-ttu-id="0d915-721">Диапазон, содержащий набор символов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-721">The span which contains the set of characters to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-722">Удаляет все начальные вхождения набора символов, заданного в диапазоне только для чтения, из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-722">Removes all leading occurrences of a set of characters specified in a read-only span from the span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-723">Если `trimChars` является пустым, вместо них удаляются пробелы.</span><span class="sxs-lookup"><span data-stu-id="0d915-723">If `trimChars` is empty, whitespace characters are removed instead.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimStart&lt;T&gt; (this Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElements As ReadOnlySpan(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimStart(Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-724">Тип элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-724">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-725">Исходная память, из которой удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-725">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-726">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-726">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-727">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-727">Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-728">Если `trimElements` параметр пуст, память возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-728">If `trimElements` is empty, the memory is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimStart&lt;T&gt; (this Memory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElement As T) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimStart(Memory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-729">Тип элементов в области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-729">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-730">Исходная область памяти, из которой удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-730">The source memory region from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-731">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-731">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-732">Удаляет все начальные вхождения указанного элемента из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-732">Removes all leading occurrences of a specified element from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimStart(ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-733">Тип элементов в области памяти, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-733">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-734">Исходная память, из которой удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-734">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-735">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-735">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-736">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-736">Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-737">Если `trimElements` параметр пуст, память возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-737">If `trimElements` is empty, the memory is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElement As T) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimStart(ReadOnlyMemory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-738">Тип элементов в области памяти, доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-738">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-739">Исходная память, из которой удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-739">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-740">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-740">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-741">Удаляет все начальные вхождения указанного элемента из области памяти.</span><span class="sxs-lookup"><span data-stu-id="0d915-741">Removes all leading occurrences of a specified element from a memory region.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlySpan&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As ReadOnlySpan(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimStart(ReadOnlySpan&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-742">Тип элементов в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-742">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-743">Исходный диапазон, из которого удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-743">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-744">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-744">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-745">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-745">Removes all leading occurrences of a set of elements specified in a read-only span from the span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown">
        

## Remarks

<span data-ttu-id="0d915-746">Если `trimElements` параметр пуст, то диапазон возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-746">If `trimElements` is empty, the span is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlySpan&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As ReadOnlySpan(Of T), trimElement As T) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimStart(ReadOnlySpan&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-747">Тип элементов в диапазоне, доступном только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0d915-747">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-748">Исходный диапазон, из которого удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-748">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-749">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-749">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-750">Удаляет все начальные вхождения указанного элемента из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-750">Removes all leading occurrences of a specified element from the span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimStart&lt;T&gt; (this Span&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As Span(Of T), trimElements As ReadOnlySpan(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimStart(Span&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-751">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-751">The type of the elements in the span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-752">Исходный диапазон, из которого удаляются элементы.</span><span class="sxs-lookup"><span data-stu-id="0d915-752">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="0d915-753">Диапазон, содержащий набор элементов для удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-753">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="0d915-754">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-754">Removes all leading occurrences of a set of elements specified in a read-only span from the span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d915-755">Если `trimElements` параметр пуст, то диапазон возвращается без изменений.</span><span class="sxs-lookup"><span data-stu-id="0d915-755">If `trimElements` is empty, the span is returned unaltered.</span></span>

               </format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimStart&lt;T&gt; (this Span&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As Span(Of T), trimElement As T) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimStart(Span&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="0d915-756">Тип элементов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="0d915-756">The type of the elements in the span.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="0d915-757">Исходный диапазон, из которого удаляется элемент.</span><span class="sxs-lookup"><span data-stu-id="0d915-757">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="0d915-758">Указанный элемент для поиска и удаления.</span><span class="sxs-lookup"><span data-stu-id="0d915-758">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="0d915-759">Удаляет все начальные вхождения указанного элемента из диапазона.</span><span class="sxs-lookup"><span data-stu-id="0d915-759">Removes all leading occurrences of a specified element from the span.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
