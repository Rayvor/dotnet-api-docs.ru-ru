<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="373adafc0d60016d22a99b46096511e7bdd6d707" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75040426" /></Metadata><TypeSignature Language="C#" Value="public struct Memory&lt;T&gt; : IEquatable&lt;Memory&lt;T&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Memory`1&lt;!T&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)&#xA;Implements IEquatable(Of Memory(Of T))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory : IEquatable&lt;Memory&lt;T&gt;&gt;" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Memory&lt;T&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="1a289-101">Тип элементов в <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-101">The type of items in the <see cref="T:System.Memory`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="1a289-102">Представляет непрерывную область памяти.</span><span class="sxs-lookup"><span data-stu-id="1a289-102">Represents a contiguous region of memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="1a289-103">Как и <xref:System.Span%601>, `Memory<T>` представляет непрерывную область памяти.</span><span class="sxs-lookup"><span data-stu-id="1a289-103">Like <xref:System.Span%601>, `Memory<T>` represents a contiguous region of memory.</span></span> <span data-ttu-id="1a289-104">Однако в отличие от <xref:System.Span%601>`Memory<T>` не является [структурой ссылки](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span><span class="sxs-lookup"><span data-stu-id="1a289-104">Unlike <xref:System.Span%601>, however, `Memory<T>` is not a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span></span> <span data-ttu-id="1a289-105">Это означает, что `Memory<T>` можно разместить в управляемой куче, в то время как <xref:System.Span%601> не может.</span><span class="sxs-lookup"><span data-stu-id="1a289-105">This means that `Memory<T>` can be placed on the managed heap, whereas <xref:System.Span%601> cannot.</span></span> <span data-ttu-id="1a289-106">В результате структура `Memory<T>` не имеет тех же ограничений, что и экземпляр <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="1a289-106">As a result, the `Memory<T>` structure does not have the same restrictions as a <xref:System.Span%601> instance.</span></span> <span data-ttu-id="1a289-107">В частности:</span><span class="sxs-lookup"><span data-stu-id="1a289-107">In particular:</span></span>

- <span data-ttu-id="1a289-108">Его можно использовать в качестве поля в классе.</span><span class="sxs-lookup"><span data-stu-id="1a289-108">It can be used as a field in a class.</span></span>

- <span data-ttu-id="1a289-109">Его можно использовать в границах `await` и `yield`.</span><span class="sxs-lookup"><span data-stu-id="1a289-109">It can be used across `await` and `yield` boundaries.</span></span>

<span data-ttu-id="1a289-110">В дополнение к `Memory<T>`можно использовать <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType>, чтобы представить неизменяемую или доступную только для чтения память.</span><span class="sxs-lookup"><span data-stu-id="1a289-110">In addition to `Memory<T>`, you can use <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> to represent immutable or read-only memory.</span></span>

    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1a289-111">Массив, из которого создается объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-111">The array from which to create the <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="1a289-112">Создает новый объект <see cref="T:System.Memory`1" /> по всему указанному массиву.</span><span class="sxs-lookup"><span data-stu-id="1a289-112">Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-113">Если `array` `null`, этот конструктор возвращает объект <xref:System.Memory%601> со значением `default<T>`.</span><span class="sxs-lookup"><span data-stu-id="1a289-113">If `array` is `null`, this constructor returns a <xref:System.Memory%601> object with a `default<T>` value.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="1a289-114"><paramref name="T" /> является ссылочным типом, а <paramref name="array" /> не является массивом типа <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-114"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span>
        
<span data-ttu-id="1a289-115">-или-</span><span class="sxs-lookup"><span data-stu-id="1a289-115">-or-</span></span>

<span data-ttu-id="1a289-116">Массив является <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">ковариантным.</see></span><span class="sxs-lookup"><span data-stu-id="1a289-116">The array is <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1a289-117">Исходный массив.</span><span class="sxs-lookup"><span data-stu-id="1a289-117">The source array.</span></span></param>
        <param name="start"><span data-ttu-id="1a289-118">Индекс первого элемента, который будет включен в новый объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-118">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <param name="length"><span data-ttu-id="1a289-119">Количество элементов, которые будут включены в новый объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-119">The number of elements to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <summary><span data-ttu-id="1a289-120">Создает объект <see cref="T:System.Memory`1" />, который включает определенное число элементов массива, начиная с указанного индекса.</span><span class="sxs-lookup"><span data-stu-id="1a289-120">Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-121">Если `array` `null`, этот конструктор возвращает объект <xref:System.Memory%601> со значением `default<T>`.</span><span class="sxs-lookup"><span data-stu-id="1a289-121">If `array` is `null`, this constructor returns a  <xref:System.Memory%601> object with a `default<T>` value.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1a289-122"><paramref name="array" /> имеет значение <see langword="null" />, но <paramref name="start" /> или <paramref name="length" /> не равно нулю.</span><span class="sxs-lookup"><span data-stu-id="1a289-122"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>


<span data-ttu-id="1a289-123">-или-</span><span class="sxs-lookup"><span data-stu-id="1a289-123">-or-</span></span>

<span data-ttu-id="1a289-124"><paramref name="start" /> выходит за пределы растрового массива.</span><span class="sxs-lookup"><span data-stu-id="1a289-124"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="1a289-125">-или-</span><span class="sxs-lookup"><span data-stu-id="1a289-125">-or-</span></span>

<span data-ttu-id="1a289-126"><paramref name="start" /> и <paramref name="length" /> превышает количество элементов в массиве.</span><span class="sxs-lookup"><span data-stu-id="1a289-126"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="1a289-127"><paramref name="T" /> является ссылочным типом, а <paramref name="array" /> не является массивом типа <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-127"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="1a289-128">Целевой объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-128">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="1a289-129">Копирует содержимое объекта <see cref="T:System.Memory`1" /> в целевой объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-129">Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-130">Этот метод копирует все содержимое текущего экземпляра <xref:System.Memory%601> в `destination` даже в том случае, если содержимое текущего экземпляра и `destination` перекрываются.</span><span class="sxs-lookup"><span data-stu-id="1a289-130">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a289-131">Длина <paramref name="destination" /> меньше, чем длина текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="1a289-131">The length of <paramref name="destination" /> is less than the length of the current instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a289-132">Возвращает пустой объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-132">Returns an empty <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <value><span data-ttu-id="1a289-133">Пустой объект.</span><span class="sxs-lookup"><span data-stu-id="1a289-133">An empty object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Memory&lt;T&gt; other);" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="1a289-134">Объект, сравниваемый с текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="1a289-134">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="1a289-135">Определяет, равен ли указанный объект <see cref="T:System.Memory`1" /> текущему объекту.</span><span class="sxs-lookup"><span data-stu-id="1a289-135">Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="1a289-136">Значение <see langword="true" />, если объект <paramref name="other" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-136"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-137">Два объекта равны, если:</span><span class="sxs-lookup"><span data-stu-id="1a289-137">The two objects are equal if:</span></span>

   - <span data-ttu-id="1a289-138">`other` является объектом <xref:System.Memory%601> или <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="1a289-138">`other` is a <xref:System.Memory%601> or <xref:System.ReadOnlyMemory%601> object.</span></span>
   
   - <span data-ttu-id="1a289-139">Оба объекта указывают на один и тот же массив и имеют одинаковую длину.</span><span class="sxs-lookup"><span data-stu-id="1a289-139">Both objects point to the same array and have the same length.</span></span>

<span data-ttu-id="1a289-140">Метод `Equals(Memory<T>)` выполняет проверку на равенство ссылок; Он не сравнивает элементы <xref:System.Memory%601> на равенство.</span><span class="sxs-lookup"><span data-stu-id="1a289-140">The `Equals(Memory<T>)` method performs a test for reference equality; it does not compare the elements of <xref:System.Memory%601> for equality.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1a289-141">Объект, сравниваемый с текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="1a289-141">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="1a289-142">Определяет, равен ли указанный объект текущему объекту.</span><span class="sxs-lookup"><span data-stu-id="1a289-142">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="1a289-143">Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-143"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-144">Два объекта <xref:System.Memory%601> равны, если оба объекта указывают на один и тот же массив и имеют одинаковую длину.</span><span class="sxs-lookup"><span data-stu-id="1a289-144">Two <xref:System.Memory%601> objects are equal if both objects point to the same array and have the same length.</span></span> <span data-ttu-id="1a289-145">Обратите внимание, что проверка на равенство не проверяет, равно ли содержимое.</span><span class="sxs-lookup"><span data-stu-id="1a289-145">Note that the test for equality does not check whether the contents are equal.</span></span>
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a289-146">Возвращает хэш-код данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="1a289-146">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="1a289-147">Хэш-код в виде 32-разрядного целого числа со знаком.</span><span class="sxs-lookup"><span data-stu-id="1a289-147">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a289-148">Определяет, является ли текущий экземпляр пустым.</span><span class="sxs-lookup"><span data-stu-id="1a289-148">Indicates whether the current instance is empty.</span></span></summary>
        <value><span data-ttu-id="1a289-149"><see langword="true" />, если текущий экземпляр пуст; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-149"><see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks><span data-ttu-id="1a289-150">Объект <see cref="T:System.Memory`1" /> пустой, если его длина равна 0.</span><span class="sxs-lookup"><span data-stu-id="1a289-150">A <see cref="T:System.Memory`1" /> object is empty if its length is 0.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a289-151">Возвращает количество элементов в текущем экземпляре.</span><span class="sxs-lookup"><span data-stu-id="1a289-151">Gets the number of items in the current instance.</span></span></summary>
        <value><span data-ttu-id="1a289-152">Число элементов в текущем экземпляре.</span><span class="sxs-lookup"><span data-stu-id="1a289-152">The number of items in the current instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="1a289-153">Преобразовываемый объект.</span><span class="sxs-lookup"><span data-stu-id="1a289-153">The object to convert.</span></span></param>
        <summary><span data-ttu-id="1a289-154">Определяет неявное преобразование объекта <see cref="T:System.ArraySegment`1" /> в объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-154">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="1a289-155">Преобразованный объект <see cref="T:System.ArraySegment`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-155">The converted <see cref="T:System.ArraySegment`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="1a289-156">Преобразовываемый объект.</span><span class="sxs-lookup"><span data-stu-id="1a289-156">The object to convert.</span></span></param>
        <summary><span data-ttu-id="1a289-157">Определяется неявное преобразование объекта <see cref="T:System.Memory`1" /> в объект <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-157">Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="1a289-158">Преобразованный объект.</span><span class="sxs-lookup"><span data-stu-id="1a289-158">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1a289-159">Преобразуемый массив.</span><span class="sxs-lookup"><span data-stu-id="1a289-159">The array to convert.</span></span></param>
        <summary><span data-ttu-id="1a289-160">Определяет неявное преобразование массива в объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-160">Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="1a289-161">Преобразованный объект.</span><span class="sxs-lookup"><span data-stu-id="1a289-161">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a289-162">Создает дескриптор для объекта <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-162">Creates a handle for the <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="1a289-163">Дескриптор для объекта <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-163">A handle for the <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a><span data-ttu-id="1a289-164">См. также:</span><span class="sxs-lookup"><span data-stu-id="1a289-164">See also</span></span>

<span data-ttu-id="1a289-165">Сборщик мусора не переместит память, пока не будет удален возвращаемый объект <xref:System.Buffers.MemoryHandle>.</span><span class="sxs-lookup"><span data-stu-id="1a289-165">The garbage collector will not move the memory until the returned <xref:System.Buffers.MemoryHandle> object is disposed.</span></span> <span data-ttu-id="1a289-166">Это позволяет получить и использовать адрес памяти.</span><span class="sxs-lookup"><span data-stu-id="1a289-166">This enables you to retrieve and use the memory's address.</span></span>

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a289-167">Экземпляр с элементами, не являющимися примитивами (требующими преобразования), не может быть закреплен.</span><span class="sxs-lookup"><span data-stu-id="1a289-167">An instance with non-primitive (non-blittable) members cannot be pinned.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="1a289-168">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="1a289-168">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="1a289-169">Формирует срез текущей области памяти, начиная с начинается с указанного индекса.</span><span class="sxs-lookup"><span data-stu-id="1a289-169">Forms a slice out of the current memory that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="1a289-170">Объект, содержащий все элементы текущего экземпляра: от <paramref name="start" /> до последнего элемента экземпляра.</span><span class="sxs-lookup"><span data-stu-id="1a289-170">An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1a289-171"><paramref name="start" /> меньше нуля или больше <see cref="P:System.Memory`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-171"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="1a289-172">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="1a289-172">The index at which to begin the slice.</span></span></param>
        <param name="length"><span data-ttu-id="1a289-173">Количество элементов, добавляемых в срез.</span><span class="sxs-lookup"><span data-stu-id="1a289-173">The number of elements to include in the slice.</span></span></param>
        <summary><span data-ttu-id="1a289-174">Формирует срез текущей области памяти, начиная с указанного индекса до указанной длины.</span><span class="sxs-lookup"><span data-stu-id="1a289-174">Forms a slice out of the current memory starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="1a289-175">Объект, содержащий число элементов, равное <paramref name="length" />, из текущего экземпляра, начиная с <paramref name="start" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-175">An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1a289-176"><paramref name="start" /> меньше нуля или больше <see cref="P:System.Memory`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-176"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span>

<span data-ttu-id="1a289-177">-или-</span><span class="sxs-lookup"><span data-stu-id="1a289-177">-or-</span></span>

<span data-ttu-id="1a289-178"><paramref name="length" /> больше, чем <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span><span class="sxs-lookup"><span data-stu-id="1a289-178"><paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a289-179">Возвращает массив из текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="1a289-179">Returns a span from the current instance.</span></span></summary>
        <value><span data-ttu-id="1a289-180">Диапазон, созданный на основе текущего объекта <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-180">A span created from the current <see cref="T:System.Memory`1" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a289-181">Копирует содержимое из памяти в новый массив.</span><span class="sxs-lookup"><span data-stu-id="1a289-181">Copies the contents from the memory into a new array.</span></span></summary>
        <returns><span data-ttu-id="1a289-182">Массив, содержащий элементы в текущей области памяти.</span><span class="sxs-lookup"><span data-stu-id="1a289-182">An array containing the elements in the current memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-183">Поскольку вызов метода `ToArray` выполняет выделение кучи, его следует избегать.</span><span class="sxs-lookup"><span data-stu-id="1a289-183">Because a call to the `ToArray` method performs a heap allocation, it should generally be avoided.</span></span> <span data-ttu-id="1a289-184">Однако иногда необходимо воспользоваться преимуществами функций, доступных только для массивов.</span><span class="sxs-lookup"><span data-stu-id="1a289-184">However, it is sometimes necessary to take advantage of functionality that is only available for arrays.</span></span>

<span data-ttu-id="1a289-185">Каждый вызов метода `ToArray` возвращает новый массив.</span><span class="sxs-lookup"><span data-stu-id="1a289-185">Each call to the `ToArray` method returns a new array.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a289-186">Возвращает строковое представление конкретного объекта <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-186">Returns the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="1a289-187">Строковое представление этого объекта <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-187">the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-188">Для `Memory<Char>`метод `ToString` возвращает <xref:System.String>, содержащий символы, на которые указывает <xref:System.Memory%601>.</span><span class="sxs-lookup"><span data-stu-id="1a289-188">For a `Memory<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Memory%601>.</span></span> <span data-ttu-id="1a289-189">В противном случае возвращается <xref:System.String> с именем типа и числом элементов, содержащихся в <xref:System.Memory%601>.</span><span class="sxs-lookup"><span data-stu-id="1a289-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Memory%601> contains.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="1a289-190">Целевой объект <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-190">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="1a289-191">Копирует содержимое из памяти в целевой экземпляр <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-191">Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="1a289-192">Если копирование выполнено успешно, возвращается значение <see langword="true" />. В противном возвращается <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1a289-192"><see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1a289-193">Этот метод копирует все содержимое текущего экземпляра <xref:System.Memory%601> в `destination` даже в том случае, если содержимое текущего экземпляра и `destination` перекрываются.</span><span class="sxs-lookup"><span data-stu-id="1a289-193">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
