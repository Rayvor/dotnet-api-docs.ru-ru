<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4fe76e3afc43ee690b30abb01396e9e2a68d84b4" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75039597" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет перечислитель для элементов <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [](~/docs/csharp/language-reference/keywords/foreach-in.md) ForEach C# языка и [для каждого... Следующая](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) конструкция в Visual Basic скрывает сложность перечислителей. Вместо того, чтобы напрямую манипулировать перечислителем, рекомендуется использовать `foreach` или `For Each...Next`. 

Изначально перечислитель располагается перед первым элементом в <xref:System.Span%601>. В этой позиции значение свойства <xref:System.Span%601.Enumerator.Current> не определено. Необходимо вызвать <xref:System.Span%601.Enumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу в <xref:System.Span%601> перед чтением значения <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> возвращает то же значение, пока не будет вызвано <xref:System.Span%601.Enumerator.MoveNext%2A>. <xref:System.Span%601.Enumerator.MoveNext%2A> задает <xref:System.Span%601.Enumerator.Current> следующий элемент в <xref:System.Span%601>.

Если <xref:System.Span%601.Enumerator.MoveNext%2A> передает конец <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> возвращает `false`. Когда перечислитель находится в этом состоянии, последующие вызовы <xref:System.Span%601.Enumerator.MoveNext%2A> также возвращают `false` и <xref:System.Span%601.Enumerator.Current> не определены. Невозможно снова задать <xref:System.Span%601.Enumerator.Current> для первого элемента в <xref:System.Span%601>; Вместо этого необходимо создать новый экземпляр перечислителя. 

Перечислитель не имеет монопольного доступа к <xref:System.Span%601>. Кроме того, базовые данные, на которых основан диапазон, также могут быть изменены. Таким образом, перечисление по диапазону не является потокобезопасной процедурой. Чтобы обеспечить потокобезопасность во время перечисления, необходимо реализовать собственную синхронизацию. Например, следующий код имеет условие состязания. Он не гарантирует, что диапазон будет перечислен до выполнения метода `ClearContents`. В результате базовый массив удаляется во время перечисления диапазона:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Если вы синхронизируете доступ к массиву перед перечислением диапазона, так как пересмотренная версия метода `EnumerateSpan` выполняется в следующем примере, метод `ClearContents` не изменяет данные базового диапазона во время перечисления. Обратите внимание, что пример блокирует базовый массив, на котором основан диапазон.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

В отличие от других структур перечислителя в .NET, <xref:System.Span%601.Enumerator>:

- Не реализует интерфейс <xref:System.Collections.IEnumerator> или <xref:System.Collections.Generic.IEnumerator%601>. Это обусловлено тем, что <xref:System.Span%601.Enumerator> является [структурой ссылок](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Не включает метод `Reset`, который может установить исходное расположение перечислителя перед первым элементом в диапазоне. (Метод <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> должен быть реализован как часть интерфейса, но большинство методов реализации либо создают исключение, либо не предоставляют реализацию.) 
 
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ссылку на элемент в текущей позиции перечислителя.</summary>
        <value>Элемент коллекции <see cref="T:System.Span`1" />, находящийся в текущей позиции перечислителя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` не определена при выполнении любого из следующих условий: 

- Сразу после создания перечислителя перечислитель располагается перед первым элементом в диапазоне. чтобы переместить перечислитель к первому элементу диапазона перед считыванием значения `Current`, необходимо вызвать <xref:System.Span%601.Enumerator.MoveNext%2A>.

- Последний вызов <xref:System.Span%601.Enumerator.MoveNext%2A> вернул `false`, который указывает конец диапазона. 

`Current` возвращает то же значение, пока не будет вызвано <xref:System.Span%601.Enumerator.MoveNext%2A>. <xref:System.Span%601.Enumerator.MoveNext%2A> задает `Current` следующий элемент в диапазоне. 

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Span`1" />.</summary>
        <returns><see langword="true" />, если перечислитель успешно перемещен к следующему элементу; <see langword="false" />, если пройден конец диапазона.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

После создания перечислителя он располагается перед первым элементом в диапазоне, а первый вызов метода `MoveNext` перемещает перечислитель к первому элементу в диапазоне. 

Если `MoveNext` передает конец диапазона, `MoveNext` возвращает `false`. Когда перечислитель находится в этом состоянии, последующие вызовы `MoveNext` также возвращают `false`.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
