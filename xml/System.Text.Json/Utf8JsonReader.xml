<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f96f08bbedddf791c3a57f3e7a62c982af293c15" /><Meta Name="ms.sourcegitcommit" Value="406d23aba879fbb482c6da0f64c8ef9494f6a944" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/31/2019" /><Meta Name="ms.locfileid" Value="68686111" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c7307-101">Предоставляет высокопроизводительный API для однонаправленного доступа только для чтения к тексту JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="c7307-101">Provides a high-performance API for forward-only, read-only access to the UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-102">`Utf8JsonReader`обрабатывает текст последовательно без кэширования, и по умолчанию строго придерживается [формата JSON RFC](https://tools.ietf.org/html/rfc8259).</span><span class="sxs-lookup"><span data-stu-id="c7307-102">`Utf8JsonReader` processes the text sequentially with no caching and by default adheres strictly to the [JSON RFC](https://tools.ietf.org/html/rfc8259).</span></span>

<span data-ttu-id="c7307-103">При `Utf8JsonReader` обнаружении недопустимого формата JSON он <xref:System.Text.Json.JsonException> создает исключение со сведениями об основной ошибке, такими как номер строки и расположение байта в строке.</span><span class="sxs-lookup"><span data-stu-id="c7307-103">When `Utf8JsonReader` encounters invalid JSON, it throws a <xref:System.Text.Json.JsonException>  with basic error information like line number and byte position on the line.</span></span>

<span data-ttu-id="c7307-104">Так как этот тип является структурой ссылок, он не поддерживает асинхронность напрямую.</span><span class="sxs-lookup"><span data-stu-id="c7307-104">Since this type is a ref struct, it doesn't directly support async.</span></span> <span data-ttu-id="c7307-105">Однако он обеспечивает поддержку повторного входа для чтения незавершенных данных и продолжения чтения после представления большего количества данных.</span><span class="sxs-lookup"><span data-stu-id="c7307-105">However, it does provide support for reentrancy to read incomplete data and to continue reading once more data is presented.</span></span>

<span data-ttu-id="c7307-106">Чтобы задать максимальную глубину при чтении или разрешении пропущенных комментариев, создайте экземпляр <xref:System.Text.Json.JsonReaderState> и передайте его модулю чтения.</span><span class="sxs-lookup"><span data-stu-id="c7307-106">To be able to set max depth while reading OR allow skipping comments, create an instance of <xref:System.Text.Json.JsonReaderState> and pass it to the reader.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="c7307-107">Предназначенный для обработки текст JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="c7307-107">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="c7307-108">Значение <see langword="true" />, если входная последовательность содержит все данные для обработки.</span><span class="sxs-lookup"><span data-stu-id="c7307-108"><see langword="true" /> when the input sequence contains the entire data to process.</span></span> <span data-ttu-id="c7307-109">Значение <see langword="false" />, только если известно, что входной диапазон содержит лишь часть данных, и дополнительные данные поступят позднее.</span><span class="sxs-lookup"><span data-stu-id="c7307-109"><see langword="false" /> only if it's known that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="c7307-110">Если это первый вызов конструктора, передайте состояние по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c7307-110">If this is the first call to the constructor, pass in a default state.</span></span> <span data-ttu-id="c7307-111">В противном случае запишите состояние из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" /> и передайте его обратно.</span><span class="sxs-lookup"><span data-stu-id="c7307-111">Otherwise, capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="c7307-112">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonReader" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-112">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-113">Поскольку этот тип является структурой ссылок, он является типом, предназначенным только для стека, и к нему применяются все ограничения ссылочных структур.</span><span class="sxs-lookup"><span data-stu-id="c7307-113">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="c7307-114">Именно по этой причине конструктор принимает <xref:System.Text.Json.JsonReaderState>.</span><span class="sxs-lookup"><span data-stu-id="c7307-114">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="c7307-115">Предназначенный для обработки текст JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="c7307-115">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="c7307-116">Значение <see langword="true" />, если входной диапазон содержит все данные для обработки.</span><span class="sxs-lookup"><span data-stu-id="c7307-116"><see langword="true" /> when the input span contains the entire data to process.</span></span> <span data-ttu-id="c7307-117">Значение <see langword="false" />, только если известно, что входной диапазон содержит лишь часть данных, и дополнительные данные поступят позднее.</span><span class="sxs-lookup"><span data-stu-id="c7307-117"><see langword="false" /> only if it's known that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="c7307-118">Структура, содержащая состояние модуля чтения.</span><span class="sxs-lookup"><span data-stu-id="c7307-118">A struct that contains the reader state.</span></span> <span data-ttu-id="c7307-119">При первом вызове конструктора она должна отражать состояние по умолчанию, в противном случае — записать состояние из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" /> и передать его обратно.</span><span class="sxs-lookup"><span data-stu-id="c7307-119">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="c7307-120">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonReader" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-120">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-121">Поскольку этот тип является структурой ссылок, он является типом, предназначенным только для стека, и к нему применяются все ограничения ссылочных структур.</span><span class="sxs-lookup"><span data-stu-id="c7307-121">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="c7307-122">Именно по этой причине конструктор принимает <xref:System.Text.Json.JsonReaderState>.</span><span class="sxs-lookup"><span data-stu-id="c7307-122">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-123">Возвращает общее число байтов, использованных <see cref="T:System.Text.Json.Utf8JsonReader" /> к настоящему времени для текущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" /> с использованием заданного входного текста в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="c7307-123">Gets the total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> with the given UTF-8 encoded input text.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-124">Возвращает глубину текущего токена.</span><span class="sxs-lookup"><span data-stu-id="c7307-124">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="c7307-125">Глубина текущего маркера.</span><span class="sxs-lookup"><span data-stu-id="c7307-125">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-126">`CurrentDepth` Свойство отслеживает рекурсивную глубину вложенных объектов и массивов в тексте JSON, обработанном до сих пор.</span><span class="sxs-lookup"><span data-stu-id="c7307-126">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text processed so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-127">Возвращает текущий снимок состояния <see cref="T:System.Text.Json.Utf8JsonReader" />, которое должно быть записано вызывающим объектом и передано обратно в конструктор <see cref="T:System.Text.Json.Utf8JsonReader" /> с дополнительными данными.</span><span class="sxs-lookup"><span data-stu-id="c7307-127">Gets the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonReader" /> state that must  be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonReader" /> constructor with more data.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-128">В отличие <xref:System.Text.Json.Utf8JsonReader>от класса, который является структурой ссылок, состояние может содержаться в границах async/await и, следовательно, этот тип необходим для асинхронного чтения дополнительных данных перед тем, как продолжить работу с новым экземпляром <xref:System.Text.Json.Utf8JsonReader>.</span><span class="sxs-lookup"><span data-stu-id="c7307-128">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-129">Считывает следующее значение токена JSON из источника в виде <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-129">Reads the next JSON token value from the source as a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-130">Значение <see langword="true" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.True" />; значение <see langword="false" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.False" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-130"><see langword="true" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.False" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-131">Значение токена JSON не является логическим (то есть <see cref="F:System.Text.Json.JsonTokenType.True" /> или <see cref="F:System.Text.Json.JsonTokenType.False" />).</span><span class="sxs-lookup"><span data-stu-id="c7307-131">The value of the JSON token isn't a boolean value (that is, <see cref="F:System.Text.Json.JsonTokenType.True" /> or <see cref="F:System.Text.Json.JsonTokenType.False" />).</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public byte GetByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8 GetByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByte () As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Byte GetByte();" />
      <MemberSignature Language="F#" Value="member this.GetByte : unit -&gt; byte" Usage="utf8JsonReader.GetByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="utf8JsonReader.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-132">Анализирует текущее значение токена JSON из источника и декодирует строку JSON в кодировке Base64 в виде массива байтов.</span><span class="sxs-lookup"><span data-stu-id="c7307-132">Parses the current JSON token value from the source and decodes the base 64 encoded JSON string as a byte array.</span></span></summary>
        <returns><span data-ttu-id="c7307-133">Массив байтов, представляющий текущее значение токена JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-133">The byte array that represents the current JSON token value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-134">Тип токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-134">The type of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-135">Значение не закодировано в тексте Base64 и поэтому не может быть декодировано в байты.</span><span class="sxs-lookup"><span data-stu-id="c7307-135">The value is not encoded as base 64 text and hence cannot be decoded to bytes.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public string GetComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetComment" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComment () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComment();" />
      <MemberSignature Language="F#" Value="member this.GetComment : unit -&gt; string" Usage="utf8JsonReader.GetComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-136">Анализирует текущее значение токена JSON из источника как комментарий, перекодируя его как <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-136">Parses the current JSON token value from the source as a comment, transcoded it as a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-137">Комментарий, представляющий текущее значение токена JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-137">The comment that represents the current JSON token value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-138">Токен JSON не является комментарием.</span><span class="sxs-lookup"><span data-stu-id="c7307-138">The JSON token is not a comment.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-139">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTime" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-139">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-140">Дата и время, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</span><span class="sxs-lookup"><span data-stu-id="c7307-140">The date and time, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-141">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-141">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-142">Значение токена JSON имеет неподдерживаемый формат.</span><span class="sxs-lookup"><span data-stu-id="c7307-142">The JSON token value is in an unsupported format.</span></span> <span data-ttu-id="c7307-143">Поддерживается только подмножество форматов ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="c7307-143">Only a subset of ISO 8601 formats are supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-144">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTimeOffset" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-144">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-145">Значение даты и времени, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</span><span class="sxs-lookup"><span data-stu-id="c7307-145">The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-146">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-146">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-147">Значение токена JSON имеет неподдерживаемый формат.</span><span class="sxs-lookup"><span data-stu-id="c7307-147">The JSON token value is in an unsupported format.</span></span> <span data-ttu-id="c7307-148">Поддерживается только подмножество форматов ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="c7307-148">Only a subset of ISO 8601 formats are supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-149">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-149">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-150">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-150">The UTF-8 encoded token value parsed to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-151">Метод создает исключение, если не удается выполнить синтаксический анализ всего значения маркера в кодировке UTF-8 <xref:System.Decimal> до значения. `GetDecimal`</span><span class="sxs-lookup"><span data-stu-id="c7307-151">The `GetDecimal` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Decimal> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-152">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-152">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-153">Значение токена JSON представляет число, которое меньше <see cref="F:System.Decimal.MinValue" /> или больше <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-153">The JSON token value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-154">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-154">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-155">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-155">The UTF-8 encoded token value parsed to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-156">Метод создает исключение, если не удается выполнить синтаксический анализ всего значения маркера в кодировке UTF-8 <xref:System.Double> до значения. `GetDouble`</span><span class="sxs-lookup"><span data-stu-id="c7307-156">The `GetDouble` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Double> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-157">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-157">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-158">Значение токена JSON представляет число, которое меньше <see cref="F:System.Double.MinValue" /> или больше <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-158">The JSON token value represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-159">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Guid" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-159">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-160">Значение GUID, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</span><span class="sxs-lookup"><span data-stu-id="c7307-160">The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-161">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-161">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-162">Значение токена JSON имеет неподдерживаемый формат для GUID.</span><span class="sxs-lookup"><span data-stu-id="c7307-162">The JSON token value is in an unsupported format for a Guid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public short GetInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 GetInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt16 () As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; short GetInt16();" />
      <MemberSignature Language="F#" Value="member this.GetInt16 : unit -&gt; int16" Usage="utf8JsonReader.GetInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-163">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-163">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-164">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-164">The UTF-8 encoded token value parsed to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-165">Метод создает исключение, если не удается выполнить синтаксический анализ всего значения маркера в кодировке UTF-8 <xref:System.Int32> до значения. `GetInt32`</span><span class="sxs-lookup"><span data-stu-id="c7307-165">The `GetInt32` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int32> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-166">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-166">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-167">Значение токена JSON имеет неправильный числовой формат.</span><span class="sxs-lookup"><span data-stu-id="c7307-167">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="c7307-168">Например, оно содержит десятичную часть или записано в экспоненциальном представлении.</span><span class="sxs-lookup"><span data-stu-id="c7307-168">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="c7307-169">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-169">- or-</span></span>

<span data-ttu-id="c7307-170">Значение токена JSON представляет число, которое меньше <see cref="F:System.Int32.MinValue" /> или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-170">The JSON token value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-171">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-171">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-172">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-172">The UTF-8 encoded token value parsed to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-173">Метод создает исключение, если не удается выполнить синтаксический анализ всего значения маркера в кодировке UTF-8 <xref:System.Int64> до значения. `GetInt64`</span><span class="sxs-lookup"><span data-stu-id="c7307-173">The `GetInt64` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int64> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-174">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-174">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-175">Значение токена JSON имеет неправильный числовой формат.</span><span class="sxs-lookup"><span data-stu-id="c7307-175">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="c7307-176">Например, оно содержит десятичную часть или записано в экспоненциальном представлении.</span><span class="sxs-lookup"><span data-stu-id="c7307-176">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="c7307-177">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-177">- or-</span></span>

<span data-ttu-id="c7307-178">Значение токена JSON представляет число, которое меньше <see cref="F:System.Int64.MinValue" /> или больше <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-178">The JSON token value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSByte">
      <MemberSignature Language="C#" Value="public sbyte GetSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 GetSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSByte () As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::SByte GetSByte();" />
      <MemberSignature Language="F#" Value="member this.GetSByte : unit -&gt; sbyte" Usage="utf8JsonReader.GetSByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-179">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-179">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-180">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-180">The UTF-8 encoded token value parsed to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-181">Метод создает исключение, если не удается выполнить синтаксический анализ всего значения маркера в кодировке UTF-8 <xref:System.Single> до значения. `GetSingle`</span><span class="sxs-lookup"><span data-stu-id="c7307-181">The `GetSingle` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Single> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-182">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-182">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-183">Значение токена JSON представляет число, которое меньше <see cref="F:System.Single.MinValue" /> или больше <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-183">The JSON token value represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-184">Считывает следующее значение токена JSON из источника неэкранированным и перекодированным в <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-184">Reads the next JSON token value from the source, unescaped, and transcoded as a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-185">Значение токена, преобразуемое в <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-185">The token value parsed to a <see cref="T:System.String" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-186">Значение токена JSON не является строкой (то есть <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span><span class="sxs-lookup"><span data-stu-id="c7307-186">The JSON token value isn't a string (that is, not a <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span>

<span data-ttu-id="c7307-187">- или -</span><span class="sxs-lookup"><span data-stu-id="c7307-187">-or-</span></span>

<span data-ttu-id="c7307-188">Строка JSON содержит недопустимые байты UTF-8 либо недопустимые суррогаты UTF-16.</span><span class="sxs-lookup"><span data-stu-id="c7307-188">The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt16">
      <MemberSignature Language="C#" Value="public ushort GetUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int16 GetUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt16 () As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt16 GetUInt16();" />
      <MemberSignature Language="F#" Value="member this.GetUInt16 : unit -&gt; uint16" Usage="utf8JsonReader.GetUInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-189">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-189">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-190">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-190">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-191">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-191">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-192">Значение токена JSON имеет неправильный числовой формат.</span><span class="sxs-lookup"><span data-stu-id="c7307-192">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="c7307-193">Например, оно содержит десятичную часть или записано в экспоненциальном представлении.</span><span class="sxs-lookup"><span data-stu-id="c7307-193">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="c7307-194">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-194">- or-</span></span>

<span data-ttu-id="c7307-195">Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt32.MinValue" /> или больше <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-195">The JSON token value represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-196">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-196">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-197">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-197">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-198">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-198">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c7307-199">Значение токена JSON имеет неправильный числовой формат.</span><span class="sxs-lookup"><span data-stu-id="c7307-199">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="c7307-200">Например, оно содержит десятичную часть или записано в экспоненциальном представлении.</span><span class="sxs-lookup"><span data-stu-id="c7307-200">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="c7307-201">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-201">- or-</span></span>

<span data-ttu-id="c7307-202">Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt64.MinValue" /> или больше <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-202">The JSON token value represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-203">Возвращает значение, указывающее, какое свойство <c>Value</c> нужно использовать для получения значения токена.</span><span class="sxs-lookup"><span data-stu-id="c7307-203">Gets a value that indicates which <c>Value</c> property to use to get the token value.</span></span></summary>
        <value><span data-ttu-id="c7307-204"><see langword="true" />значение <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> , если необходимо использовать для получения значения токена.</span><span class="sxs-lookup"><span data-stu-id="c7307-204"><see langword="true" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> should be used to get the token value.</span></span> <span data-ttu-id="c7307-205"><see langword="false" />значение <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> , если вместо этого следует использовать.</span><span class="sxs-lookup"><span data-stu-id="c7307-205"><see langword="false" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> should be used instead.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-206">Если `HasValueSequence` имеет `false`значение ,<xref:System.Text.Json.Utf8JsonReader.ValueSequence> то является пустым.</span><span class="sxs-lookup"><span data-stu-id="c7307-206">If `HasValueSequence` is `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> is empty.</span></span> <span data-ttu-id="c7307-207">Поэтому считайте значение токена с помощью <xref:System.Text.Json.Utf8JsonReader.ValueSpan> свойства.</span><span class="sxs-lookup"><span data-stu-id="c7307-207">Therefore, read the token value using the <xref:System.Text.Json.Utf8JsonReader.ValueSpan> property.</span></span>

<span data-ttu-id="c7307-208">Для входных данных в `ReadOnlySpan<byte>`это всегда возвращает. `false`</span><span class="sxs-lookup"><span data-stu-id="c7307-208">For input data within a `ReadOnlySpan<byte>`, this always returns `false`.</span></span> <span data-ttu-id="c7307-209">Для входных данных в `ReadOnlySequence<byte>`объект возвращает `true` , только если значение маркера посекается более чем из одного сегмента и, следовательно, не может быть представлено в качестве диапазона.</span><span class="sxs-lookup"><span data-stu-id="c7307-209">For input data within a `ReadOnlySequence<byte>`, this only returns `true` if the token value straddles more than a single segment and hence can't be represented as a span.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalBlock">
      <MemberSignature Language="C#" Value="public bool IsFinalBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinalBlock" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinalBlock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinalBlock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinalBlock : bool" Usage="System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-210">Возвращает режим данного экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />, который указывает, были ли предоставлены все данные JSON или еще поступят дополнительные данные.</span><span class="sxs-lookup"><span data-stu-id="c7307-210">Gets the mode of this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> which indicates whether all the JSON data was provided or there is more data to come.</span></span></summary>
        <value><span data-ttu-id="c7307-211"><see langword="true" />значение, если модуль чтения был создан с входным диапазоном или последовательностью, содержащими все данные JSON для обработки.</span><span class="sxs-lookup"><span data-stu-id="c7307-211"><see langword="true" /> if the reader was constructed with the input span or sequence containing the entire JSON data to process.</span></span> <span data-ttu-id="c7307-212"><see langword="false" />Если модуль чтения был создан с входным диапазоном или последовательностью, которая может содержать часть данных JSON с дополнительными данными.</span><span class="sxs-lookup"><span data-stu-id="c7307-212"><see langword="false" /> if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-213">Возвращает текущий <see cref="T:System.SequencePosition" /> в рамках предоставленных входных данных ReadOnlySequence&lt;byte&gt; в кодировке UTF-8 или значение по умолчанию <see cref="T:System.SequencePosition" />, если структура <see cref="T:System.Text.Json.Utf8JsonReader" /> была создана с использованием ReadOnlySpan&lt;byte&gt;.</span><span class="sxs-lookup"><span data-stu-id="c7307-213">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></summary>
        <value><span data-ttu-id="c7307-214"><see cref="T:System.SequencePosition" /> Текущий в указанном реадонлисекуенце&lt;&gt; <see cref="T:System.SequencePosition" /> &gt; &lt;байте в кодировке UTF-8 или по умолчанию, <see cref="T:System.Text.Json.Utf8JsonReader" /> если структура была создана с реадонлиспан байтом.</span><span class="sxs-lookup"><span data-stu-id="c7307-214">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-215">Считывает следующий токен JSON из источника входных данных.</span><span class="sxs-lookup"><span data-stu-id="c7307-215">Read the next JSON token from the input source.</span></span></summary>
        <returns><span data-ttu-id="c7307-216">Значение <see langword="true" />, если токен был считан успешно, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-216"><see langword="true" /> if the token was read successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c7307-217">Обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-217">An invalid JSON token according to the JSON RFC is encountered.</span></span>
        
<span data-ttu-id="c7307-218">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-218">-or-</span></span>

<span data-ttu-id="c7307-219">Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</span><span class="sxs-lookup"><span data-stu-id="c7307-219">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skip();" />
      <MemberSignature Language="F#" Value="member this.Skip : unit -&gt; unit" Usage="utf8JsonReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-220">Пропускает дочерний узел текущего токена JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-220">Skips the children of the current JSON token.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-221">Если <xref:System.Text.Json.Utf8JsonReader.TokenType> имеет<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>значение, модуль чтения сначала переходит к значению свойства.</span><span class="sxs-lookup"><span data-stu-id="c7307-221">When <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, the reader first moves to the property value.</span></span>

<span data-ttu-id="c7307-222">Если <xref:System.Text.Json.Utf8JsonReader.TokenType> (изначально или после улучшения) — <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> или <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, то модуль чтения переходит к соответствующему <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c7307-222">When <xref:System.Text.Json.Utf8JsonReader.TokenType> (originally, or after advancing) is <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> or  <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, the reader advances to the matching <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="c7307-223">Для всех других типов токенов средство чтения не перемещается.</span><span class="sxs-lookup"><span data-stu-id="c7307-223">For all other token types, the reader does not move.</span></span> <span data-ttu-id="c7307-224">После следующего вызова методу <xref:System.Text.Json.Utf8JsonReader.Read>чтения будет присвоено следующее значение (когда в массиве), имя следующего свойства (в объекте) или маркер конца массива или объекта.</span><span class="sxs-lookup"><span data-stu-id="c7307-224">After the next call to <xref:System.Text.Json.Utf8JsonReader.Read>, the reader will be at the next value (when in an array), the next property name (when in an object), or the end array/object token.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-225">Модулю чтения были переданы частичные данные с последующими дополнительными данными (то есть <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> — это <see langword="false" />).</span><span class="sxs-lookup"><span data-stu-id="c7307-225">The reader was given partial data with more data to follow (that is, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> is <see langword="false" />).</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c7307-226">При пропуске обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-226">An invalid JSON token was encountered while skipping, according to the JSON RFC.</span></span>

<span data-ttu-id="c7307-227">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-227">- or -</span></span>

<span data-ttu-id="c7307-228">Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</span><span class="sxs-lookup"><span data-stu-id="c7307-228">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TokenStartIndex">
      <MemberSignature Language="C#" Value="public long TokenStartIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TokenStartIndex" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenStartIndex As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long TokenStartIndex { long get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenStartIndex : int64" Usage="System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-229">Возвращает индекс, с которого начинается последний обработанный токен JSON (в заданном входном тексте UTF-8), пропуская все пробелы.</span><span class="sxs-lookup"><span data-stu-id="c7307-229">Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.</span></span></summary>
        <value><span data-ttu-id="c7307-230">Начальный индекс последнего обработанного маркера JSON в заданном входном тексте в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="c7307-230">The starting index of the last processed JSON token within the given UTF-8 encoded input text.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-231">Для строк JSON (включая имена свойств) это значение указывает на начало цитаты.</span><span class="sxs-lookup"><span data-stu-id="c7307-231">For JSON strings (including property names), this value points to before the start quote.</span></span>

<span data-ttu-id="c7307-232">Для комментариев это значение указывает на перед первым разделителем комментариев (то есть "/").</span><span class="sxs-lookup"><span data-stu-id="c7307-232">For comments, this value points to before the first comment delimiter (that is, '/').</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-233">Возвращает тип последнего обработанного токена JSON в тексте JSON с кодировкой UTF-8.</span><span class="sxs-lookup"><span data-stu-id="c7307-233">Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.</span></span></summary>
        <value><span data-ttu-id="c7307-234">Тип последнего обработанного маркера JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-234">The type of the last processed JSON token.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetByte">
      <MemberSignature Language="C#" Value="public bool TryGetByte (out byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetByte([out] unsigned int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetByte (ByRef value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetByte([Runtime::InteropServices::Out] System::Byte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetByte :  -&gt; bool" Usage="utf8JsonReader.TryGetByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 :  -&gt; bool" Usage="utf8JsonReader.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-235">Если метод выполнен, содержит декодированное двоичное представление текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="c7307-235">If the method succeeds, contains the decoded binary representation of the base 64 text.</span></span></param>
        <summary><span data-ttu-id="c7307-236">Пытается проанализировать текущее значение токена JSON из источника и декодирует строку JSON в кодировке Base64 в виде массива байтов.</span><span class="sxs-lookup"><span data-stu-id="c7307-236">Tries to parse the current JSON token value from the source and decodes the base 64 encoded JSON string as a byte array.</span></span></summary>
        <returns><span data-ttu-id="c7307-237"><see langword="true" />, если все значение токена закодировано как допустимый текст в Base64 и может быть успешно декодировано в байты; <see langword="false" /> в противном случае.</span><span class="sxs-lookup"><span data-stu-id="c7307-237"><see langword="true" /> if the entire token value is encoded as valid base 64 text and can be successfully decoded to bytes; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-238">Токен JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-238">The JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-239">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-239">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-240">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTime" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-240">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-241">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.DateTime" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-241"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-242">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-242">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-243">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-243">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-244">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTimeOffset" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-244">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-245">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.DateTimeOffset" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-245"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-246">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-246">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-247">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-247">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-248">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-248">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-249">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Decimal" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-249"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-250">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-250">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-251">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-251">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-252">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-252">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-253">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-253"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-254">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-254">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid :  -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-255">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-255">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-256">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Guid" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-256">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-257">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Guid" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-257"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-258">Этот метод анализирует <xref:System.Guid> только значения с дефисами и без окружающих украшений.</span><span class="sxs-lookup"><span data-stu-id="c7307-258">This method only parses <xref:System.Guid> values with hyphens and without any surrounding decorations.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-259">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-259">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt16">
      <MemberSignature Language="C#" Value="public bool TryGetInt16 (out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt16([out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt16 (ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt16([Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt16 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-260">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-260">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-261">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-261">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-262">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-262"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-263">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-263">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-264">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-264">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-265">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-265">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-266">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-266"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-267">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-267">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSByte">
      <MemberSignature Language="C#" Value="public bool TryGetSByte (out sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSByte([out] int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSByte (ByRef value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSByte([Runtime::InteropServices::Out] System::SByte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSByte :  -&gt; bool" Usage="utf8JsonReader.TryGetSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-268">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-268">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-269">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-269">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-270">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-270"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Single" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-271">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-271">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt16">
      <MemberSignature Language="C#" Value="public bool TryGetUInt16 (out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt16([out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt16 (ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt16([Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt16 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-272">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-272">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-273">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-273">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-274">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-274"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-275">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-275">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c7307-276">Когда этот метод возвращает данные, содержит преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-276">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="c7307-277">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-277">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="c7307-278">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-278"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7307-279">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-279">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TrySkip">
      <MemberSignature Language="C#" Value="public bool TrySkip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySkip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TrySkip" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySkip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySkip();" />
      <MemberSignature Language="F#" Value="member this.TrySkip : unit -&gt; bool" Usage="utf8JsonReader.TrySkip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7307-280">Пытается пропустить дочерние узлы текущего токена JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-280">Tries to skip the children of the current JSON token.</span></span></summary>
        <returns><span data-ttu-id="c7307-281"><see langword="true" /> при наличии достаточного количества данных для успешного пропуска дочерних элементов; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7307-281"><see langword="true" /> if there was enough data for the children to be skipped successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-282">Если у читателя недостаточно данных для полного пропуска дочерних элементов текущего маркера, он будет сброшен до того состояния, в котором оно находилось до вызова метода.</span><span class="sxs-lookup"><span data-stu-id="c7307-282">If the reader did not have enough data to completely skip the children of the current token, it will be reset to the state it was in before the method was called.</span></span>
              
<span data-ttu-id="c7307-283">Если <xref:System.Text.Json.Utf8JsonReader.TokenType> имеет<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>значение, модуль чтения сначала переходит к значению свойства.</span><span class="sxs-lookup"><span data-stu-id="c7307-283">When <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, the reader first moves to the property value.</span></span>

<span data-ttu-id="c7307-284">Если <xref:System.Text.Json.Utf8JsonReader.TokenType> (изначально или после улучшения) — <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, то модуль чтения переходит к соответствующему <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c7307-284">When <xref:System.Text.Json.Utf8JsonReader.TokenType> (originally, or after advancing) is <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, the reader advances to the matching <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="c7307-285">Для всех других типов токенов средство чтения не перемещается.</span><span class="sxs-lookup"><span data-stu-id="c7307-285">For all other token types, the reader does not move.</span></span> <span data-ttu-id="c7307-286">После следующего вызова методу <xref:System.Text.Json.Utf8JsonReader.Read>чтения будет присвоено следующее значение (когда в массиве), имя следующего свойства (в объекте) или маркер конца массива или объекта.</span><span class="sxs-lookup"><span data-stu-id="c7307-286">After the next call to <xref:System.Text.Json.Utf8JsonReader.Read>, the reader will be at the next value (when in an array), the next property name (when in an object), or the end array/object token.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c7307-287">При пропуске обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="c7307-287">An invalid JSON token was encountered while skipping, according to the JSON RFC.</span></span>
          
<span data-ttu-id="c7307-288">-или-</span><span class="sxs-lookup"><span data-stu-id="c7307-288">- or -</span></span>

<span data-ttu-id="c7307-289">Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</span><span class="sxs-lookup"><span data-stu-id="c7307-289">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-290">Возвращает значение последнего обработанного токена в виде среза ReadOnlySpan&lt;byte&gt; входных полезных данных.</span><span class="sxs-lookup"><span data-stu-id="c7307-290">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="c7307-291">Если JSON предоставляется внутри ReadOnlySequence&lt;byte&gt; и срез, представляющий значение токена, умещается в отдельный сегмент, то <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> содержит фрагментированное значение, так как его можно представить в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="c7307-291">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span>
<span data-ttu-id="c7307-292">В противном случае <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> содержит значение токена.</span><span class="sxs-lookup"><span data-stu-id="c7307-292">Otherwise, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks


<span data-ttu-id="c7307-293">Если <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> имеет `false`значение ,`ValueSequence` то является пустым.</span><span class="sxs-lookup"><span data-stu-id="c7307-293">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`, `ValueSequence` is empty.</span></span> <span data-ttu-id="c7307-294">Таким образом, доступ `ValueSequence` предоставляется <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> только `true`в том случае, если имеет значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-294">Therefore, only access `ValueSequence` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`.</span></span>
<span data-ttu-id="c7307-295">В противном случае доступ к значению маркера должен осуществляться из <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span><span class="sxs-lookup"><span data-stu-id="c7307-295">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7307-296">Возвращает значение последнего обработанного токена в виде среза ReadOnlySpan&lt;byte&gt; входных полезных данных.</span><span class="sxs-lookup"><span data-stu-id="c7307-296">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="c7307-297">Если JSON предоставляется внутри ReadOnlySequence&lt;byte&gt; и срез, представляющий значение токена, умещается в отдельный сегмент, то <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> содержит фрагментированное значение, так как его можно представить в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="c7307-297">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span>
<span data-ttu-id="c7307-298">В противном случае <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> содержит значение токена.</span><span class="sxs-lookup"><span data-stu-id="c7307-298">Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c7307-299">Если <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> имеет `true`значение ,<xref:System.Text.Json.Utf8JsonReader.ValueSpan> то является пустым.</span><span class="sxs-lookup"><span data-stu-id="c7307-299">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> is empty.</span></span> <span data-ttu-id="c7307-300">Таким образом, доступ `ValueSpan` предоставляется <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> только `false`в том случае, если имеет значение.</span><span class="sxs-lookup"><span data-stu-id="c7307-300">Therefore, only access `ValueSpan` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`.</span></span>
<span data-ttu-id="c7307-301">В противном случае доступ к значению маркера должен осуществляться из <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span><span class="sxs-lookup"><span data-stu-id="c7307-301">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (utf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : string -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>