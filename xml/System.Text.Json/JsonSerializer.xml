<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d9e5f13f1c1536077c3fd4008c88d20f055f5ac" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75054300" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет функциональные возможности сериализации объектов или типов значений в JSON и десериализации JSON в объекты или типы значений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Анализируемый текст JSON.</param>
        <param name="returnType">Тип объекта для преобразования и возврата.</param>
        <param name="options">Параметры для управления поведением во время анализа.</param>
        <summary>Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</summary>
        <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="returnType" /> несовместим с JSON.

-или-

Остались данные в диапазоне больше одного значения JSON.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json">Анализируемый текст JSON.</param>
        <param name="returnType">Тип объекта для преобразования и возврата.</param>
        <param name="options">Параметры для управления поведением во время анализа.</param>
        <summary>Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр указанного типа.</summary>
        <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Использование <xref:System.String> не так эффективно, как использование методов UTF-8, поскольку реализация изначально использует UTF-8.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Остались данные в строке больше одного значения JSON.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader">Модуль чтения, из которого читается JSON.</param>
        <param name="returnType">Тип объекта для преобразования и возврата.</param>
        <param name="options">Параметры для управления поведением сериализатора во время чтения.</param>
        <summary>Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения и преобразует его в экземпляр указанного типа.</summary>
        <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Если свойство <xref:System.Text.Json.Utf8JsonReader.TokenType> для `reader` имеет значение <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, то для определения начала этого средства чтения будет расширен один вызов <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>.

После завершения этого метода `reader` будет размещен в конечном токене в значении JSON.  При возникновении исключения модуль чтения сбрасывается в состояние, в котором он находился при вызове метода.

Этот метод создает копию данных, в которой действует устройство чтения, поэтому нет необходимости поддерживать целостность данных после возврата этого метода.

<xref:System.Text.Json.JsonReaderOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonReader>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют. Таким образом, при чтении используются <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>и <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="returnType" /> несовместим с JSON.

-или-

Не удалось считать значение из модуля чтения.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> использует неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Целевой тип текста в кодировке UTF-8.</typeparam>
        <param name="utf8Json">Анализируемый текст JSON.</param>
        <param name="options">Параметры для управления поведением во время анализа.</param>
        <summary>Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</summary>
        <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Остались данные в диапазоне больше одного значения JSON.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Целевой тип значения JSON.</typeparam>
        <param name="json">Анализируемый текст JSON.</param>
        <param name="options">Параметры для управления поведением во время анализа.</param>
        <summary>Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</summary>
        <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Использование <xref:System.String> не так эффективно, как использование методов UTF-8, поскольку реализация изначально использует UTF-8.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="json" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Остались данные в строке больше одного значения JSON.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Целевой тип значения JSON.</typeparam>
        <param name="reader">Модуль чтения, из которого читается JSON.</param>
        <param name="options">Параметры для управления поведением сериализатора во время чтения.</param>
        <summary>Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения в экземпляр типа, заданного параметром универсального типа.</summary>
        <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Если свойство <xref:System.Text.Json.Utf8JsonReader.TokenType> для `reader` имеет значение <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, то для определения начала этого средства чтения будет расширен один вызов <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>.
               
После завершения этого метода `reader` будет размещен в конечном токене в значении JSON. При возникновении исключения модуль чтения сбрасывается в состояние, в котором он находился при вызове метода.
               
Этот метод создает копию данных, в которой действует устройство чтения, поэтому нет необходимости поддерживать целостность данных после возврата этого метода.
               
<xref:System.Text.Json.JsonReaderOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonReader>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют. Таким образом, при чтении используются <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>и <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Не удалось считать значение из модуля чтения.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> использует неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Анализируемые данные JSON.</param>
        <param name="returnType">Тип объекта для преобразования и возврата.</param>
        <param name="options">Параметры для управления поведением во время чтения.</param>
        <param name="cancellationToken">Токен отмены, который может использоваться для отмены операции чтения.</param>
        <summary>Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа. Поток считывается до завершения.</summary>
        <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="utf8Json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

В потоке остались данные.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Целевой тип значения JSON.</typeparam>
        <param name="utf8Json">Анализируемые данные JSON.</param>
        <param name="options">Параметры для управления поведением во время чтения.</param>
        <param name="cancellationToken">Токен, который можно использовать для отмены операции чтения.</param>
        <summary>Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа. Поток считывается до завершения.</summary>
        <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

В потоке остались данные.</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value">Преобразуемое значение.</param>
        <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
        <param name="options">Параметры для управления поведением преобразования.</param>
        <summary>Преобразует значение указанного типа в строку JSON.</summary>
        <returns>Строковое представление JSON значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Использование <xref:System.String> не так эффективно, как использование кодировки UTF-8, так как реализация внутри использует UTF-8. См. также <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> и <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer">Модуль записи JSON, в который производится запись.</param>
        <param name="value">Значение для преобразования и записи.</param>
        <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
        <param name="options">Параметры управления поведением сериализации.</param>
        <summary>Записывает представление JSON указанного типа в предоставленный модуль записи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Text.Json.JsonWriterOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonWriter>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют. Поэтому при записи используются <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>и <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Тип значения для сериализации.</typeparam>
        <param name="value">Преобразуемое значение.</param>
        <param name="options">Параметры управления поведением сериализации.</param>
        <summary>Преобразует значение типа, заданного параметром универсального типа, в строку JSON.</summary>
        <returns>Строковое представление JSON значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Использование <xref:System.String> не так эффективно, как использование кодировки UTF-8, так как реализация внутри использует UTF-8. См. также <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> и <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Тип значения для сериализации.</typeparam>
        <param name="writer">Модуль записи JSON, в который производится запись.</param>
        <param name="value">Значение для преобразования и записи.</param>
        <param name="options">Параметры управления поведением сериализации.</param>
        <summary>Записывает представление JSON типа, указанного параметром универсального типа, в предоставленный модуль записи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Text.Json.JsonWriterOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonWriter>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют. Поэтому при записи используются <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>и <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Поток UTF-8, в который требуется выполнить запись.</param>
        <param name="value">Преобразуемое значение.</param>
        <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
        <param name="options">Параметры управления поведением сериализации.</param>
        <param name="cancellationToken">Токен, который можно использовать для отмены операции записи.</param>
        <summary>Асинхронно преобразует значение указанного типа в текст JSON в кодировке UTF-8 и записывает его в указанный поток.</summary>
        <returns>Задача, представляющая асинхронную операцию записи.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Тип значения для сериализации.</typeparam>
        <param name="utf8Json">Поток UTF-8, в который требуется выполнить запись.</param>
        <param name="value">Преобразуемое значение.</param>
        <param name="options">Параметры управления поведением сериализации.</param>
        <param name="cancellationToken">Токен, который можно использовать для отмены операции записи.</param>
        <summary>Асинхронно преобразует значение типа, заданного параметром универсального типа, в текст JSON в кодировке UTF-8 и записывает его в поток.</summary>
        <returns>Задача, представляющая асинхронную операцию записи.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value">Преобразуемое значение.</param>
        <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
        <param name="options">Параметры для управления поведением преобразования.</param>
        <summary>Преобразует значение указанного типа в строку JSON, закодированную как байты UTF-8.</summary>
        <returns>Строковое представление JSON значения, закодированное как байты UTF-8.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Тип значения.</typeparam>
        <param name="value">Преобразуемое значение.</param>
        <param name="options">Параметры для управления поведением преобразования.</param>
        <summary>Преобразует значение типа, указанного параметром универсального типа, в строку JSON, закодированную как байты UTF-8.</summary>
        <returns>Строковое представление JSON значения, закодированное как байты UTF-8.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
