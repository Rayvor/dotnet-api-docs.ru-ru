<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55efe259c3954694d75aef7b8fdde8fe9e9d2cf0" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70499180" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="df960-101">Предоставляет функциональные возможности сериализации объектов или типов значений в JSON и десериализации JSON в объекты или типы значений.</span><span class="sxs-lookup"><span data-stu-id="df960-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="df960-102">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="df960-103">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="df960-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="df960-104">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="df960-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="df960-105">Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="df960-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="df960-106">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="df960-107"><paramref name="returnType" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="df960-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-108">Недопустимый формат JSON, <paramref name="returnType" /> несовместим с JSON, или в потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-108">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="df960-109">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-109">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="df960-110">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="df960-110">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="df960-111">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="df960-111">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="df960-112">Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="df960-112">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="df960-113">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-113">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="df960-114"><xref:System.String> Использование метода не так эффективно, как использование методов UTF-8, поскольку реализация изначально использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-114">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="df960-115">Параметр <paramref name="json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="df960-115"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-116">Недопустимый формат JSON, <paramref name="returnType" /> несовместим с JSON, или в потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-116">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="df960-117">Модуль чтения, используемый для чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-117">The reader to read.</span></span></param>
        <param name="returnType"><span data-ttu-id="df960-118">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="df960-118">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="df960-119">Параметры для управления поведением сериализатора во время чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-119">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="df960-120">Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения и преобразует его в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="df960-120">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="df960-121">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-121">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="df960-122">`reader` Если свойство объекта имеет <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>  значение <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, то читатель будет расширен на один вызов для определения начала значения. <xref:System.Text.Json.Utf8JsonReader.TokenType></span><span class="sxs-lookup"><span data-stu-id="df960-122">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="df960-123">После завершения этого метода `reader` будет размещен в конечном токене в значении JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-123">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="df960-124">При возникновении исключения модуль чтения сбрасывается в состояние, в котором он находился при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="df960-124">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="df960-125">Этот метод создает копию данных, в которой действует устройство чтения, поэтому нет необходимости поддерживать целостность данных после возврата этого метода.</span><span class="sxs-lookup"><span data-stu-id="df960-125">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="df960-126">Объект <xref:System.Text.Json.JsonReaderOptions> , используемый для создания экземпляра класса, <xref:System.Text.Json.Utf8JsonReader> имеет приоритет над тем <xref:System.Text.Json.JsonSerializerOptions> моментом, когда они конфликтуют.</span><span class="sxs-lookup"><span data-stu-id="df960-126">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="df960-127">Следовательно,, и <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>  используются при чтении. <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="df960-127">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="df960-128"><paramref name="returnType" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="df960-128"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-129">Недопустимый формат JSON, <paramref name="returnType" /> несовместим с JSON, или не удалось прочитать значение из модуля чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-129">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or a value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="df960-130"><paramref name="reader" /> использует неподдерживаемые параметры.</span><span class="sxs-lookup"><span data-stu-id="df960-130"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-131">Целевой тип текста в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-131">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="df960-132">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-132">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="df960-133">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="df960-133">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="df960-134">Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="df960-134">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="df960-135">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-135">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-136">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-136">The JSON is invalid.</span></span>
          
<span data-ttu-id="df960-137">-или-</span><span class="sxs-lookup"><span data-stu-id="df960-137">-or-</span></span>

<span data-ttu-id="df960-138"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-138"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="df960-139">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-139">-or-</span></span>

<span data-ttu-id="df960-140">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-140">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-141">Целевой тип значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-141">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="df960-142">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-142">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="df960-143">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="df960-143">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="df960-144">Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="df960-144">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="df960-145">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-145">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="df960-146"><xref:System.String> Использование метода не так эффективно, как использование методов UTF-8, поскольку реализация изначально использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-146">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="df960-147">Свойство <paramref name="json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="df960-147"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-148">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-148">The JSON is invalid.</span></span>
          
<span data-ttu-id="df960-149">-или-</span><span class="sxs-lookup"><span data-stu-id="df960-149">-or-</span></span>

<span data-ttu-id="df960-150"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-150"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="df960-151">-или-</span><span class="sxs-lookup"><span data-stu-id="df960-151">-or-</span></span>

<span data-ttu-id="df960-152">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-152">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-153">Целевой тип значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-153">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="df960-154">Модуль чтения, используемый для чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-154">The reader to read.</span></span></param>
        <param name="options"><span data-ttu-id="df960-155">Параметры для управления поведением сериализатора во время чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-155">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="df960-156">Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="df960-156">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="df960-157">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-157">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="df960-158">`reader` Если свойство объекта имеет <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>  значение <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, то читатель будет расширен на один вызов для определения начала значения. <xref:System.Text.Json.Utf8JsonReader.TokenType></span><span class="sxs-lookup"><span data-stu-id="df960-158">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="df960-159">После завершения этого метода `reader` будет размещен в конечном токене в значении JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-159">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="df960-160">При возникновении исключения модуль чтения сбрасывается в состояние, в котором он находился при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="df960-160">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="df960-161">Этот метод создает копию данных, в которой действует устройство чтения, поэтому нет необходимости поддерживать целостность данных после возврата этого метода.</span><span class="sxs-lookup"><span data-stu-id="df960-161">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="df960-162">Объект <xref:System.Text.Json.JsonReaderOptions> , используемый для создания экземпляра класса, <xref:System.Text.Json.Utf8JsonReader> имеет приоритет над тем <xref:System.Text.Json.JsonSerializerOptions> моментом, когда они конфликтуют.</span><span class="sxs-lookup"><span data-stu-id="df960-162">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="df960-163">Следовательно,, и <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>  используются при чтении. <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="df960-163">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-164">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-164">The JSON is invalid.</span></span>
          
<span data-ttu-id="df960-165">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-165">-or-</span></span>

<span data-ttu-id="df960-166"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-166"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="df960-167">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-167">-or-</span></span>

<span data-ttu-id="df960-168">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-168">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="df960-169"><paramref name="reader" /> использует неподдерживаемые параметры.</span><span class="sxs-lookup"><span data-stu-id="df960-169"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="df960-170">Анализируемые данные JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-170">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="df960-171">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="df960-171">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="df960-172">Параметры для управления поведением во время чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-172">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="df960-173">Токен отмены, который может использоваться для отмены операции чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-173">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="df960-174">Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="df960-174">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="df960-175">Поток считывается до завершения.</span><span class="sxs-lookup"><span data-stu-id="df960-175">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="df960-176">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-176">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="df960-177">Значение параметра <paramref name="utf8Json" /> или <paramref name="returnType" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="df960-177"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-178">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-178">The JSON is invalid.</span></span>
          
<span data-ttu-id="df960-179">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-179">-or-</span></span>

<span data-ttu-id="df960-180"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-180"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="df960-181">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-181">-or-</span></span>

<span data-ttu-id="df960-182">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-182">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-183">Целевой тип значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-183">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="df960-184">Анализируемые данные JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-184">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="df960-185">Параметры для управления поведением во время чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-185">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="df960-186">Токен, который можно использовать для отмены операции чтения.</span><span class="sxs-lookup"><span data-stu-id="df960-186">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="df960-187">Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="df960-187">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="df960-188">Поток считывается до завершения.</span><span class="sxs-lookup"><span data-stu-id="df960-188">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="df960-189">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-189">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="df960-190">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-190">The JSON is invalid.</span></span>
          
<span data-ttu-id="df960-191">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-191">-or-</span></span>

<span data-ttu-id="df960-192"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-192"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="df960-193">- или -</span><span class="sxs-lookup"><span data-stu-id="df960-193">-or-</span></span>

<span data-ttu-id="df960-194">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="df960-194">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="df960-195">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="df960-195">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="df960-196">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-196">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-197">Параметры для управления поведением преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-197">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="df960-198">Преобразует значение указанного типа в <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="df960-198">Converts the value of a specified type into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="df960-199">Строковое представление значения.</span><span class="sxs-lookup"><span data-stu-id="df960-199">The string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="df960-200"><xref:System.String> Использование метода не так эффективно, как использование кодировки UTF-8, так как реализация внутри использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-200">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="df960-201">См. также <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> и <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="df960-201">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="df960-202">Модуль записи JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-202">The JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="df960-203">Значение для преобразования и записи.</span><span class="sxs-lookup"><span data-stu-id="df960-203">The value to convert and write.</span></span></param>
        <param name="type"><span data-ttu-id="df960-204">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-204">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-205">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-205">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="df960-206">Записывает одно значение JSON (включая объекты или массивы) указанного типа в предоставленный модуль записи.</span><span class="sxs-lookup"><span data-stu-id="df960-206">Writes one JSON value (including objects or arrays) of a specified type to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-207">Тип значения для сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-207">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="df960-208">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="df960-208">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-209">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-209">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="df960-210">Преобразует значение типа, заданного параметром универсального типа, в <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="df960-210">Converts the value of a type specified by a generic type parameter into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="df960-211">Строковое представление значения.</span><span class="sxs-lookup"><span data-stu-id="df960-211">A string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="df960-212"><xref:System.String> Использование метода не так эффективно, как использование кодировки UTF-8, так как реализация внутри использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-212">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="df960-213">См. также <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> и <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="df960-213">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-214">Тип значения для сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-214">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="df960-215">Модуль записи JSON.</span><span class="sxs-lookup"><span data-stu-id="df960-215">A JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="df960-216">Значение для преобразования и записи.</span><span class="sxs-lookup"><span data-stu-id="df960-216">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="df960-217">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-217">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="df960-218">Записывает одно значение JSON (включая объекты или массивы) типа, заданного параметром универсального типа, в предоставленный модуль записи.</span><span class="sxs-lookup"><span data-stu-id="df960-218">Writes one JSON value (including objects or arrays) of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type type, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, type, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="df960-219">Поток UTF-8, в который требуется выполнить запись.</span><span class="sxs-lookup"><span data-stu-id="df960-219">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="df960-220">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="df960-220">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="df960-221">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-221">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-222">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-222">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="df960-223">Токен, который можно использовать для отмены операции записи.</span><span class="sxs-lookup"><span data-stu-id="df960-223">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="df960-224">Асинхронно преобразует значение указанного типа в текст JSON в кодировке UTF-8 и записывает его в указанный поток.</span><span class="sxs-lookup"><span data-stu-id="df960-224">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="df960-225">Задача, представляющая асинхронную операцию записи.</span><span class="sxs-lookup"><span data-stu-id="df960-225">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-226">Тип значения для сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-226">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="df960-227">Поток UTF-8, в который требуется выполнить запись.</span><span class="sxs-lookup"><span data-stu-id="df960-227">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="df960-228">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="df960-228">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-229">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="df960-229">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="df960-230">Токен, который можно использовать для отмены операции записи.</span><span class="sxs-lookup"><span data-stu-id="df960-230">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="df960-231">Асинхронно преобразует значение типа, заданного параметром универсального типа, в текст JSON в кодировке UTF-8 и записывает его в поток.</span><span class="sxs-lookup"><span data-stu-id="df960-231">Asynchronously converts a value of a type specified by a generic type parametaer to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="df960-232">Задача, представляющая асинхронную операцию записи.</span><span class="sxs-lookup"><span data-stu-id="df960-232">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="df960-233">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="df960-233">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="df960-234">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-234">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-235">Параметры для управления поведением преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-235">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="df960-236">Преобразует значение указанного типа в массив байтов в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-236">Converts a value of the specified type into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="df960-237">Представление значения в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-237">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="df960-238">Тип значения.</span><span class="sxs-lookup"><span data-stu-id="df960-238">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="df960-239">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="df960-239">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="df960-240">Параметры для управления поведением преобразования.</span><span class="sxs-lookup"><span data-stu-id="df960-240">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="df960-241">Преобразует значение типа, заданного параметром универсального типа, в массив байтов в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-241">Converts the value of a type specifed by a generic type parameter into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="df960-242">Представление значения в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="df960-242">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
