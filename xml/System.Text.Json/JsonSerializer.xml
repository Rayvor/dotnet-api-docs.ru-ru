<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="373a655bab82fa6568f5f7ec921c5a822210e755" /><Meta Name="ms.sourcegitcommit" Value="394eb46af92ad32373cd2c7855b688846886ed40" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/23/2019" /><Meta Name="ms.locfileid" Value="74425627" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7411f-101">Предоставляет функциональные возможности сериализации объектов или типов значений в JSON и десериализации JSON в объекты или типы значений.</span><span class="sxs-lookup"><span data-stu-id="7411f-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-102">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-102">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="7411f-103">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-103">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="7411f-104">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="7411f-104">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-105">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="7411f-105">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7411f-106">Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-106">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="7411f-107">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-107">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-108">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-108">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7411f-109">Свойство <paramref name="returnType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7411f-109"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-110">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-110">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-111">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-111">-or-</span></span>

<span data-ttu-id="7411f-112"><typeparamref name="returnType" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-112"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-113">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-113">-or-</span></span>

<span data-ttu-id="7411f-114">Остались данные в диапазоне больше одного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-114">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="7411f-115">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-115">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="7411f-116">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="7411f-116">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-117">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="7411f-117">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7411f-118">Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-118">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="7411f-119">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-119">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-120">Использование <xref:System.String> не так эффективно, как использование методов UTF-8, поскольку реализация изначально использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-120">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="7411f-121">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-121">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7411f-122">Параметр <paramref name="json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7411f-122"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-123">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-123">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-124">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-124">-or-</span></span>

<span data-ttu-id="7411f-125"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-125"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-126">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-126">-or-</span></span>

<span data-ttu-id="7411f-127">Остались данные в строке больше одного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-127">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="7411f-128">Модуль чтения, из которого читается JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-128">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="7411f-129">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="7411f-129">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-130">Параметры для управления поведением сериализатора во время чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-130">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="7411f-131">Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения и преобразует его в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-131">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="7411f-132">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-132">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-133">Если свойство <xref:System.Text.Json.Utf8JsonReader.TokenType> для `reader` имеет значение <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, то для определения начала этого средства чтения будет расширен один вызов <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7411f-133">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="7411f-134">После завершения этого метода `reader` будет размещен в конечном токене в значении JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-134">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="7411f-135">При возникновении исключения модуль чтения сбрасывается в состояние, в котором он находился при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="7411f-135">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="7411f-136">Этот метод создает копию данных, в которой действует устройство чтения, поэтому нет необходимости поддерживать целостность данных после возврата этого метода.</span><span class="sxs-lookup"><span data-stu-id="7411f-136">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="7411f-137"><xref:System.Text.Json.JsonReaderOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonReader>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют.</span><span class="sxs-lookup"><span data-stu-id="7411f-137">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7411f-138">Таким образом, при чтении используются <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>и <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7411f-138">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="7411f-139">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-139">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7411f-140">Свойство <paramref name="returnType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7411f-140"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-141">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-141">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-142">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-142">-or-</span></span>

<span data-ttu-id="7411f-143"><typeparamref name="returnType" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-143"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-144">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-144">-or-</span></span>

<span data-ttu-id="7411f-145">Не удалось считать значение из модуля чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-145">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7411f-146"><paramref name="reader" /> использует неподдерживаемые параметры.</span><span class="sxs-lookup"><span data-stu-id="7411f-146"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-147">Целевой тип текста в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-147">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="7411f-148">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-148">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-149">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="7411f-149">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7411f-150">Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-150">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="7411f-151">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-151">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-152">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-152">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-153">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-153">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-154">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-154">-or-</span></span>

<span data-ttu-id="7411f-155"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-155"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-156">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-156">-or-</span></span>

<span data-ttu-id="7411f-157">Остались данные в диапазоне больше одного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-157">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-158">Целевой тип значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-158">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="7411f-159">Анализируемый текст JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-159">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-160">Параметры для управления поведением во время анализа.</span><span class="sxs-lookup"><span data-stu-id="7411f-160">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7411f-161">Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-161">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="7411f-162">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-162">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-163">Использование <xref:System.String> не так эффективно, как использование методов UTF-8, поскольку реализация изначально использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-163">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="7411f-164">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-164">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7411f-165">Свойство <paramref name="json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7411f-165"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-166">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-166">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-167">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-167">-or-</span></span>

<span data-ttu-id="7411f-168"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-168"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-169">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-169">-or-</span></span>

<span data-ttu-id="7411f-170">Остались данные в строке больше одного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-170">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-171">Целевой тип значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-171">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="7411f-172">Модуль чтения, из которого читается JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-172">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-173">Параметры для управления поведением сериализатора во время чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-173">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="7411f-174">Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-174">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="7411f-175">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-175">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-176">Если свойство <xref:System.Text.Json.Utf8JsonReader.TokenType> для `reader` имеет значение <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, то для определения начала этого средства чтения будет расширен один вызов <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7411f-176">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="7411f-177">После завершения этого метода `reader` будет размещен в конечном токене в значении JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-177">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="7411f-178">При возникновении исключения модуль чтения сбрасывается в состояние, в котором он находился при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="7411f-178">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="7411f-179">Этот метод создает копию данных, в которой действует устройство чтения, поэтому нет необходимости поддерживать целостность данных после возврата этого метода.</span><span class="sxs-lookup"><span data-stu-id="7411f-179">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="7411f-180"><xref:System.Text.Json.JsonReaderOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonReader>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют.</span><span class="sxs-lookup"><span data-stu-id="7411f-180">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7411f-181">Таким образом, при чтении используются <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>и <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7411f-181">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="7411f-182">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-182">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-183">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-183">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-184">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-184">-or-</span></span>

<span data-ttu-id="7411f-185"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-185"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-186">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-186">-or-</span></span>

<span data-ttu-id="7411f-187">Не удалось считать значение из модуля чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-187">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7411f-188"><paramref name="reader" /> использует неподдерживаемые параметры.</span><span class="sxs-lookup"><span data-stu-id="7411f-188"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="7411f-189">Анализируемые данные JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-189">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="7411f-190">Тип объекта для преобразования и возврата.</span><span class="sxs-lookup"><span data-stu-id="7411f-190">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-191">Параметры для управления поведением во время чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-191">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7411f-192">Токен отмены, который может использоваться для отмены операции чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-192">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="7411f-193">Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-193">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="7411f-194">Поток считывается до завершения.</span><span class="sxs-lookup"><span data-stu-id="7411f-194">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="7411f-195">Представление <paramref name="returnType" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-195">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-196">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-196">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7411f-197">Параметр <paramref name="utf8Json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7411f-197"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-198">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-198">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-199">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-199">-or-</span></span>

<span data-ttu-id="7411f-200"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-200"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-201">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-201">-or-</span></span>

<span data-ttu-id="7411f-202">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="7411f-202">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-203">Целевой тип значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-203">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="7411f-204">Анализируемые данные JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-204">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-205">Параметры для управления поведением во время чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-205">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7411f-206">Токен, который можно использовать для отмены операции чтения.</span><span class="sxs-lookup"><span data-stu-id="7411f-206">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="7411f-207">Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="7411f-207">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="7411f-208">Поток считывается до завершения.</span><span class="sxs-lookup"><span data-stu-id="7411f-208">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="7411f-209">Представление <typeparamref name="TValue" /> данного значения JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-209">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-210">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-210">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7411f-211">Недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-211">The JSON is invalid.</span></span>
          
<span data-ttu-id="7411f-212">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-212">-or-</span></span>

<span data-ttu-id="7411f-213"><typeparamref name="TValue" /> несовместим с JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-213"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7411f-214">-или-</span><span class="sxs-lookup"><span data-stu-id="7411f-214">-or-</span></span>

<span data-ttu-id="7411f-215">В потоке остались данные.</span><span class="sxs-lookup"><span data-stu-id="7411f-215">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7411f-216">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="7411f-216">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="7411f-217">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-217">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-218">Параметры для управления поведением преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-218">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="7411f-219">Преобразует значение указанного типа в строку JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-219">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="7411f-220">Строковое представление JSON значения.</span><span class="sxs-lookup"><span data-stu-id="7411f-220">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-221">Использование <xref:System.String> не так эффективно, как использование кодировки UTF-8, так как реализация внутри использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-221">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="7411f-222">См. также <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> и <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="7411f-222">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="7411f-223">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-223">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="7411f-224">Модуль записи JSON, в который производится запись.</span><span class="sxs-lookup"><span data-stu-id="7411f-224">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7411f-225">Значение для преобразования и записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-225">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="7411f-226">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-226">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-227">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-227">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="7411f-228">Записывает представление JSON указанного типа в предоставленный модуль записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-228">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-229"><xref:System.Text.Json.JsonWriterOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonWriter>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют.</span><span class="sxs-lookup"><span data-stu-id="7411f-229">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7411f-230">Поэтому при записи используются <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>и <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7411f-230">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="7411f-231">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-231">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-232">Тип значения для сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-232">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="7411f-233">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="7411f-233">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-234">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-234">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="7411f-235">Преобразует значение типа, заданного параметром универсального типа, в строку JSON.</span><span class="sxs-lookup"><span data-stu-id="7411f-235">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="7411f-236">Строковое представление JSON значения.</span><span class="sxs-lookup"><span data-stu-id="7411f-236">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-237">Использование <xref:System.String> не так эффективно, как использование кодировки UTF-8, так как реализация внутри использует UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-237">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="7411f-238">См. также <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> и <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="7411f-238">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="7411f-239">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-239">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-240">Тип значения для сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-240">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="7411f-241">Модуль записи JSON, в который производится запись.</span><span class="sxs-lookup"><span data-stu-id="7411f-241">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7411f-242">Значение для преобразования и записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-242">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-243">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-243">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="7411f-244">Записывает представление JSON типа, указанного параметром универсального типа, в предоставленный модуль записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-244">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-245"><xref:System.Text.Json.JsonWriterOptions>, используемый для создания экземпляра <xref:System.Text.Json.Utf8JsonWriter>, имеют приоритет над <xref:System.Text.Json.JsonSerializerOptions>, когда они конфликтуют.</span><span class="sxs-lookup"><span data-stu-id="7411f-245">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7411f-246">Поэтому при записи используются <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>и <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7411f-246">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="7411f-247">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-247">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="7411f-248">Поток UTF-8, в который требуется выполнить запись.</span><span class="sxs-lookup"><span data-stu-id="7411f-248">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7411f-249">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="7411f-249">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="7411f-250">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-250">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-251">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-251">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7411f-252">Токен, который можно использовать для отмены операции записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-252">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="7411f-253">Асинхронно преобразует значение указанного типа в текст JSON в кодировке UTF-8 и записывает его в указанный поток.</span><span class="sxs-lookup"><span data-stu-id="7411f-253">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="7411f-254">Задача, представляющая асинхронную операцию записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-254">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-255">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-255">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-256">Тип значения для сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-256">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="7411f-257">Поток UTF-8, в который требуется выполнить запись.</span><span class="sxs-lookup"><span data-stu-id="7411f-257">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7411f-258">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="7411f-258">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-259">Параметры управления поведением сериализации.</span><span class="sxs-lookup"><span data-stu-id="7411f-259">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7411f-260">Токен, который можно использовать для отмены операции записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-260">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="7411f-261">Асинхронно преобразует значение типа, заданного параметром универсального типа, в текст JSON в кодировке UTF-8 и записывает его в поток.</span><span class="sxs-lookup"><span data-stu-id="7411f-261">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="7411f-262">Задача, представляющая асинхронную операцию записи.</span><span class="sxs-lookup"><span data-stu-id="7411f-262">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-263">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-263">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7411f-264">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="7411f-264">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="7411f-265">Тип <paramref name="value" /> для преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-265">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-266">Параметры для управления поведением преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-266">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="7411f-267">Преобразует значение указанного типа в строку JSON, закодированную как байты UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-267">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="7411f-268">Строковое представление JSON значения, закодированное как байты UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-268">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-269">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-269">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7411f-270">Тип значения.</span><span class="sxs-lookup"><span data-stu-id="7411f-270">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="7411f-271">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="7411f-271">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7411f-272">Параметры для управления поведением преобразования.</span><span class="sxs-lookup"><span data-stu-id="7411f-272">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="7411f-273">Преобразует значение типа, указанного параметром универсального типа, в строку JSON, закодированную как байты UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-273">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="7411f-274">Строковое представление JSON значения, закодированное как байты UTF-8.</span><span class="sxs-lookup"><span data-stu-id="7411f-274">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7411f-275">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span><span class="sxs-lookup"><span data-stu-id="7411f-275">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
