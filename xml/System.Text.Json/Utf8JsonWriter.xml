<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2f11fddbebdd376a1cb2abc431829b3cbd6c433" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75054001" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f4a69-101">Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-102">`Utf8JsonWriter` записывает текст последовательно без кэширования, и по умолчанию соблюдает [Формат JSON RFC](https://tools.ietf.org/html/rfc8259), за исключением написания комментариев.</span><span class="sxs-lookup"><span data-stu-id="f4a69-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="f4a69-103">Метод, который пытается записать недопустимый JSON при включенной проверке, вызывает исключение <xref:System.InvalidOperationException> с сообщением об ошибке, зависящим от контекста.</span><span class="sxs-lookup"><span data-stu-id="f4a69-103">A method that attempts to write invalid JSON when validation is enabled throws an <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="f4a69-104">Чтобы иметь возможность форматировать выходные данные с отступами и пробелами, пропускать проверку или настраивать поведение экранирования, создайте экземпляр <xref:System.Text.Json.JsonWriterOptions> и передайте его в модуль записи.</span><span class="sxs-lookup"><span data-stu-id="f4a69-104">To be able to format the output with indentation and white space, to skip validation, OR to customize the escaping behavior, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

<span data-ttu-id="f4a69-105">Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#use-utf8jsonwriter).</span><span class="sxs-lookup"><span data-stu-id="f4a69-105">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#use-utf8jsonwriter).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="f4a69-106">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-106">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="f4a69-107">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-107">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="f4a69-108">По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-108">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="f4a69-109">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный <see cref="T:System.Buffers.IBufferWriter`1" /> для записи в него выходных данных и параметров настройки.</span><span class="sxs-lookup"><span data-stu-id="f4a69-109">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified <see cref="T:System.Buffers.IBufferWriter`1" /> to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-110"><paramref name="bufferWriter" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-110"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f4a69-111">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-111">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="f4a69-112">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-112">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="f4a69-113">По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-113">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="f4a69-114">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный поток для записи в него выходных данных и параметров настройки.</span><span class="sxs-lookup"><span data-stu-id="f4a69-114">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified stream to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-115"><paramref name="utf8Json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-115"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a69-116">Возвращает общее число байтов, зафиксированных в выходных данных к настоящему времени текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="f4a69-116">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="f4a69-117">Общее число байтов, зафиксированных на выходе <see cref="T:System.Text.Json.Utf8JsonWriter" /> до сих пор.</span><span class="sxs-lookup"><span data-stu-id="f4a69-117">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-118">В случае <xref:System.Buffers.IBufferWriter%601>это свойство указывает, насколько сложным является Ибуффервритер.</span><span class="sxs-lookup"><span data-stu-id="f4a69-118">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="f4a69-119">В случае <xref:System.IO.Stream>это свойство указывает, сколько данных было записано в поток.</span><span class="sxs-lookup"><span data-stu-id="f4a69-119">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a69-120">Возвращает число байтов, записанных к настоящему времени объектом <see cref="T:System.Text.Json.Utf8JsonWriter" /> и еще не зафиксированных в выходных данных.</span><span class="sxs-lookup"><span data-stu-id="f4a69-120">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="f4a69-121">Число байтов, записанных на данный момент <see cref="T:System.Text.Json.Utf8JsonWriter" />, которые еще не были сброшены в выходные данные и зафиксированы.</span><span class="sxs-lookup"><span data-stu-id="f4a69-121">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a69-122">Возвращает глубину текущего токена.</span><span class="sxs-lookup"><span data-stu-id="f4a69-122">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="f4a69-123">Глубина текущего маркера.</span><span class="sxs-lookup"><span data-stu-id="f4a69-123">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-124">Свойство `CurrentDepth` отслеживает рекурсивную глубину вложенных объектов и массивов в тексте JSON, записанном на данный момент.</span><span class="sxs-lookup"><span data-stu-id="f4a69-124">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-125">Фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="f4a69-125">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-126">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="f4a69-126">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="f4a69-127">В случае с потоком поток данных записывает данные в поток и сбрасывает их.</span><span class="sxs-lookup"><span data-stu-id="f4a69-127">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="f4a69-128">Экземпляр <xref:System.Text.Json.Utf8JsonWriter> нельзя использовать повторно после удаления.</span><span class="sxs-lookup"><span data-stu-id="f4a69-128">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-129">Асинхронно фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="f4a69-129">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="f4a69-130">Задача, представляющая асинхронную операцию удаления.</span><span class="sxs-lookup"><span data-stu-id="f4a69-130">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-131">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="f4a69-131">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="f4a69-132">В случае с потоком поток данных записывает данные в поток и сбрасывает их.</span><span class="sxs-lookup"><span data-stu-id="f4a69-132">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="f4a69-133">Экземпляр <xref:System.Text.Json.Utf8JsonWriter> нельзя использовать повторно после удаления.</span><span class="sxs-lookup"><span data-stu-id="f4a69-133">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-134">Фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="f4a69-134">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-135">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="f4a69-135">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="f4a69-136">В случае <xref:System.IO.Stream>данные записываются в поток и сбрасываются.</span><span class="sxs-lookup"><span data-stu-id="f4a69-136">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f4a69-137">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="f4a69-137">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="f4a69-138">Токен для отслеживания запросов отмены.</span><span class="sxs-lookup"><span data-stu-id="f4a69-138">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="f4a69-139">Значение по умолчанию — <see cref="P:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-139">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="f4a69-140">Асинхронно фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="f4a69-140">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="f4a69-141">Задача, представляющая асинхронную операцию освобождения.</span><span class="sxs-lookup"><span data-stu-id="f4a69-141">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-142">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="f4a69-142">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="f4a69-143">В случае <xref:System.IO.Stream>эти данные записываются в поток и очищаются асинхронно, при этом отслеживаются запросы на отмену.</span><span class="sxs-lookup"><span data-stu-id="f4a69-143">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f4a69-144">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="f4a69-144">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a69-145">Возвращает пользовательский режим записи JSON с использованием этого экземпляра, который определяет, необходимо ли форматировать выходные данные при записи, следует ли пропускать структурную проверку JSON и какие символы экранировановать.</span><span class="sxs-lookup"><span data-stu-id="f4a69-145">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.</span></span></summary>
        <value><span data-ttu-id="f4a69-146">Пользовательское поведение данного экземпляра модуля записи для форматирования, проверки и экранирования.</span><span class="sxs-lookup"><span data-stu-id="f4a69-146">The custom behavior of this instance of the writer for formatting, validating, and escaping.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-147">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно.</span><span class="sxs-lookup"><span data-stu-id="f4a69-147">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-148"><xref:System.Text.Json.Utf8JsonWriter> будет продолжать использовать исходные параметры модуля записи и исходные выходные данные (<xref:System.Buffers.IBufferWriter`1> или <xref:System.IO.Stream>) в качестве места назначения.</span><span class="sxs-lookup"><span data-stu-id="f4a69-148">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f4a69-149">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="f4a69-149">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="f4a69-150">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-150">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="f4a69-151">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-151">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-152"><xref:System.Text.Json.Utf8JsonWriter> продолжит использовать исходные параметры модуля записи, но теперь записывает в `bufferWriter` в качестве нового назначения.</span><span class="sxs-lookup"><span data-stu-id="f4a69-152">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-153"><paramref name="bufferWriter" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-153"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f4a69-154">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="f4a69-154">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f4a69-155">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-155">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="f4a69-156">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-156">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-157"><xref:System.Text.Json.Utf8JsonWriter> продолжит использовать исходные параметры модуля записи, но теперь записывает в `utf8Json` в качестве нового назначения.</span><span class="sxs-lookup"><span data-stu-id="f4a69-157">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-158"><paramref name="utf8Json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-158"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f4a69-159">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="f4a69-159">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-160">Имя записываемого свойства в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-160">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="f4a69-161">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="f4a69-161">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="f4a69-162">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-162">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-163">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="f4a69-163">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="f4a69-164">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-164">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="f4a69-165">Имя свойства преобразуется в escape-последовательность, а байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-165">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-166">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-166">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-167">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-167">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-168">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-168">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="f4a69-169">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="f4a69-169">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="f4a69-170">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-170">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-171">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="f4a69-171">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="f4a69-172">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-172">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="f4a69-173">Имя свойства преобразуется в escape-последовательность, а байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-173">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-174">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-174">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-175">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-175">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-176">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-176">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="f4a69-177">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="f4a69-177">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="f4a69-178">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-178">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-179">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="f4a69-179">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="f4a69-180">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-180">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="f4a69-181">Имя свойства преобразуется в escape-последовательность, а байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-181">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-182">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-182">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-183">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-183">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-184">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-184">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-185">Имя записываемого свойства в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-185">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="f4a69-186">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="f4a69-186">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="f4a69-187">Записывает заранее закодированное имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-187">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-188">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="f4a69-188">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="f4a69-189">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-189">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="f4a69-190">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-190">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-191">Байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-191">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-192">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-192">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-193">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-193">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f4a69-194">Двоичные данные, которые нужно записать в виде строкового элемента JSON массива JSON в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="f4a69-194">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-195">Записывает необработанные байты (в виде строки JSON в кодировке Base64) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-195">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-196">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="f4a69-196">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="f4a69-197">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-197">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="f4a69-198">Байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-198">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-199">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-199">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-200">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-200">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-201">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-201">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-202">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-202">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-203">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-203">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-204">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-204">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-205">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-205">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-206">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-206">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-207">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-207">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-208">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-208">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-209">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-209">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-210">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-210">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-211">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-211">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-212">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-212">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-213">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-213">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-214">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-214">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-215">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-215">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-216">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-216">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-217">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-217">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-218">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-218">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-219">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-219">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-220">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-220">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-221">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-221">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-222">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-222">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-223">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-223">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-224">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-224">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-225">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-225">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-226">Записывает значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-226">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-227">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-227">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="f4a69-228">Значение в кодировке UTF-8, записываемое в виде комментария JSON, заключенного в `/*..*/`.</span><span class="sxs-lookup"><span data-stu-id="f4a69-228">The UTF-8 encoded value to be written as a JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="f4a69-229">Записывает текстовое значение UTF-8 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-229">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-230">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-230">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-231">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-231">The specified value is too large.</span></span>
        
<span data-ttu-id="f4a69-232">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-232">-or-</span></span>

<span data-ttu-id="f4a69-233"><paramref name="utf8Value" /> содержит разделитель комментария (`*/`).</span><span class="sxs-lookup"><span data-stu-id="f4a69-233"><paramref name="utf8Value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-234">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в `/*..*/`.</span><span class="sxs-lookup"><span data-stu-id="f4a69-234">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="f4a69-235">Записывает текстовое значение UTF-16 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-235">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-236">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-236">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-237">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-237">The specified value is too large.</span></span>
        
<span data-ttu-id="f4a69-238">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-238">-or-</span></span>

<span data-ttu-id="f4a69-239"><paramref name="value" /> содержит разделитель комментария (`*/`).</span><span class="sxs-lookup"><span data-stu-id="f4a69-239"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-240">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в `/*..*/`.</span><span class="sxs-lookup"><span data-stu-id="f4a69-240">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="f4a69-241">Записывает строковое текстовое значение в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-241">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-242">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="f4a69-242">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-243">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-243">The specified value is too large.</span></span>
        
<span data-ttu-id="f4a69-244">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-244">-or-</span></span>

<span data-ttu-id="f4a69-245"><paramref name="value" /> содержит разделитель комментария (`*/`).</span><span class="sxs-lookup"><span data-stu-id="f4a69-245"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-246">Параметр <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-246">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-247">Записывает конец массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-247">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-248">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-248">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-249">Записывает конец объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-249">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-250">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-250">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-251">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-251">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="f4a69-252">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-252">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-253">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-253">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-254">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-254">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-255">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-255">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-256">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-256">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-257">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-257">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-258">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-258">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-259">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-259">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-260">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-260">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-261">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-261">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-262">Записывает имя свойства, указываемое как строка, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-262">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-263">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-263">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-264">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-264">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-265">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-265">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-266">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-266">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-267">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-267">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-268">Записывает заранее закодированное имя свойства и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-268">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-269">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-269">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-270">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-270">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-271">Записывает литерал JSON <b>null</b> в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-271">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-272">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-272">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-273">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-273">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-274">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-275">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-275">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="f4a69-276">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="f4a69-276">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="f4a69-277">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-277">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-278">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-278">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-279">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-279">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-280">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-280">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-281">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-281">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-282">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-282">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-283">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-283">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-284">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-284">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="f4a69-285">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-285">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-286">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-286">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-287">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-287">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-288">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-288">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-289">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-289">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-290">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-290">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-291">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-291">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-292">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-292">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-293">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-293">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-294">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-294">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-295">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-295">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-296">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-296">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-297">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-297">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-298">Записывает <xref:System.Int64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-298">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-299">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-299">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-300">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-300">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-301">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-301">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-302">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-302">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-303">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-303">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-304">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-304">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-305">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-305">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-306">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-306">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="f4a69-307">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-307">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-308">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-308">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-309">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-309">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-310">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-310">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-311">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-311">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-312">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-312">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-313">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-313">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-314">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-314">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-315">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-315">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-316">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-316">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-317">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-317">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-318">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-319">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-319">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-320">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-320">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-321">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-321">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-322">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-322">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-323">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-323">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-324">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-324">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-325">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-325">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-326">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-326">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-327">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="f4a69-327">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="f4a69-328">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-328">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-329">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-329">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-330">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-330">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-331">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-331">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-332">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-332">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-333">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-333">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-334">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-334">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-335">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-335">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="f4a69-336">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-336">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-337">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-337">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-338">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-338">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-339">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-339">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-340">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-340">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-341">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-341">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-342">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-342">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-343">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-343">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-344">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-344">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-345">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-345">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-346">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-346">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-347">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-347">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-348">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-348">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-349">Записывает <xref:System.Int64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-349">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-350">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-350">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-351">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-351">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-352">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-352">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-353">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-353">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-354">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-354">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-355">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-355">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-356">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-356">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-357">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-357">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="f4a69-358">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-358">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-359">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-359">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-360">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-360">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-361">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-361">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-362">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-362">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-363">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-363">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-364">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-364">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-365">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-365">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-366">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-366">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-367">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-367">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-368">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-369">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-370">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-370">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-371">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-371">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-372">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-372">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-373">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-373">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-374">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-374">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-375">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-375">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-376">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-376">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-377">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-377">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-378">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="f4a69-378">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="f4a69-379">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-379">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-380">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-380">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-381">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-381">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-382">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-382">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-383">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-383">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-384">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-384">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-385">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-385">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-386">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-386">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-387">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-387">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="f4a69-388">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-388">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-389">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-389">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-390">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-390">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-391">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-391">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-392">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-392">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-393">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-393">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-394">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-394">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-395">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-395">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-396">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-396">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-397">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-397">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-398">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-398">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-399">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-399">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-400">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-400">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-401">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-401">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-402">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-402">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-403">Записывает <xref:System.Int64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-403">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-404">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-404">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-405">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-405">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-406">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-406">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-407">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-407">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-408">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-408">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-409">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-409">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-410">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-410">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-411">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-411">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-412">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-412">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="f4a69-413">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-413">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-414">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-414">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-415">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-415">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-416">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-416">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-417">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-417">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-418">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-418">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-419">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-419">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-420">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-420">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-421">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-421">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-422">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-422">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-423">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-423">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-424">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-424">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-425">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-425">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-426">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-426">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-427">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-427">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-428">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-428">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-429">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-429">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-430">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-430">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-431">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-431">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-432">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-432">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-433">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-433">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-434">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-434">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-435">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-435">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-436">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="f4a69-436">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="f4a69-437">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-437">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-438">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-438">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-439">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-439">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-440">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-440">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-441">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-441">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-442">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-442">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-443">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-443">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="f4a69-444">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-444">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-445">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-445">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-446">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-446">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-447">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-447">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-448">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-448">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-449">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-449">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-450">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-450">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-451">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-451">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-452">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-452">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-453">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-453">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-454">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-454">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-455">Записывает <xref:System.Int64>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G"); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-455">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-456">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-456">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-457">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-457">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-458">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-458">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-459">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-459">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-460">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-460">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-461">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-461">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-462">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-462">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="f4a69-463">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-463">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-464">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-464">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-465">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-465">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-466">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-466">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-467">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-467">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-468">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-468">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-469">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-469">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-470">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-470">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-471">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-471">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-472">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-472">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-473">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-473">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-474">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-474">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="f4a69-475">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-475">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-476">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-476">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-477">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-477">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-478">Записывает значение <see cref="T:System.Decimal" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-478">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-479">Этот метод записывает значение <xref:System.Decimal>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="f4a69-479">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-480">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-480">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-481">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-481">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-482">Записывает значение <see cref="T:System.Double" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-482">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-483">Этот метод записывает значение <xref:System.Double>, используя <xref:System.Buffers.StandardFormat> по умолчанию (то есть "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-483">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-484">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-484">Uses 'G17' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-485">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-485">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-486">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-486">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-487">Записывает значение <see cref="T:System.Int32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-487">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-488">Этот метод записывает значение <xref:System.Int32>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="f4a69-488">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="f4a69-489">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-489">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-490">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-490">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-491">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-491">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-492">Записывает значение <see cref="T:System.Int64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-492">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-493">Этот метод записывает значение <xref:System.Int64>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="f4a69-493">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="f4a69-494">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-494">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-495">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-495">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-496">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-496">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-497">Записывает значение <see cref="T:System.Single" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-497">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-498">Этот метод записывает значение <xref:System.Single>, используя <xref:System.Buffers.StandardFormat> по умолчанию (то есть "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="f4a69-498">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="f4a69-499">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="f4a69-499">Uses 'G9' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-500">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-500">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-501">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-501">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-502">Записывает значение <see cref="T:System.UInt32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-502">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-503">Этот метод записывает значение <xref:System.UInt32>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="f4a69-503">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="f4a69-504">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-504">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-505">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-505">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-506">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-506">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-507">Записывает значение <see cref="T:System.UInt64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-507">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-508">Этот метод записывает значение <xref:System.UInt64>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="f4a69-508">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="f4a69-509">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="f4a69-509">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-510">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-510">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-511">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-511">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="f4a69-512">Записывает имя свойства в кодировке UTF-8 (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-512">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-513">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-513">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-514">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-514">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-515">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-515">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-516">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-516">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-517">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-517">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-518">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-518">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-519">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-519">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-520">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-520">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-521">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-521">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-522">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-522">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-523">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-523">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-524">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-524">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-525">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-525">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-526"><paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-526"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-527">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-527">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-528">Записывает заранее закодированное имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-528">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-529">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-529">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-530">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-530">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-531">Записывает начало массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-531">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-532">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-532">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="f4a69-533">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-533">-or-</span></span>

<span data-ttu-id="f4a69-534">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-534">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-535">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-535">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="f4a69-536">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-536">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-537">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-537">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-538">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-538">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-539">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-539">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="f4a69-540">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-540">-or-</span></span>
       
<span data-ttu-id="f4a69-541">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-541">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-542">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-542">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-543">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-543">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-544">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-544">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-545">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-545">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-546">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-546">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="f4a69-547">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-547">-or-</span></span>
       
<span data-ttu-id="f4a69-548">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-548">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-549">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-549">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-550">Записывает начало массива JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-550">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-551">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-551">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-552">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-552">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-553">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-553">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="f4a69-554">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-554">-or-</span></span>
       
<span data-ttu-id="f4a69-555">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-555">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-556">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-556">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-557">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-557">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-558">Записывает начало массива JSON с заранее закодированным именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-558">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-559">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-559">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-560">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-560">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
    
<span data-ttu-id="f4a69-561">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-561">-or-</span></span>

<span data-ttu-id="f4a69-562">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-562">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a69-563">Записывает начало объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-563">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-564">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-564">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="f4a69-565">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-565">-or-</span></span>

<span data-ttu-id="f4a69-566">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-566">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-567">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-567">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="f4a69-568">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-568">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-569">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-569">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-570">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-570">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-571">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-571">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="f4a69-572">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-572">-or-</span></span>
       
<span data-ttu-id="f4a69-573">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-573">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-574">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-574">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-575">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-575">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-576">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-576">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-577">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-577">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-578">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-578">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="f4a69-579">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-579">-or-</span></span>
       
<span data-ttu-id="f4a69-580">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-580">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-581">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-581">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-582">Записывает начало объекта JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-582">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-583">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-583">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-584">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-584">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-585">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-585">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="f4a69-586">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-586">-or-</span></span>
       
<span data-ttu-id="f4a69-587">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-587">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-588">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-588">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-589">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-589">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="f4a69-590">Записывает начало объекта JSON с заранее закодированным именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="f4a69-590">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-591">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-591">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-592">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-592">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
          
<span data-ttu-id="f4a69-593">-или-</span><span class="sxs-lookup"><span data-stu-id="f4a69-593">-or-</span></span>

<span data-ttu-id="f4a69-594">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-594">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-595">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-595">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-596">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-596">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-597">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-597">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-598">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-598">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="f4a69-599">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-599">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-600">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-600">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-601">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-601">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-602">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-602">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-603">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-603">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-604">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-604">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-605">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="f4a69-605">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="f4a69-606">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-606">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-607">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-607">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-608">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-608">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-609">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-609">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-610">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-610">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-611">Записывает имя свойства UTF-8 и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-611">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-612">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="f4a69-612">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="f4a69-613">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-613">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-614">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-614">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-615">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-615">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-616">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-616">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="f4a69-617">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-617">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-618">Записывает имя свойства UTF-8 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-618">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-619">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-619">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-620">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-620">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-621">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-621">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-622">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-622">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-623">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-623">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-624">Записывает имя свойства UTF-8 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-624">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-625">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-625">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-626">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-626">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-627">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-627">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-628">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-628">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-629">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-629">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-630">Записывает имя свойства UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-630">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-631">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-631">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="f4a69-632">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-632">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-633">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-633">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-634">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-634">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="f4a69-635">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-635">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-636">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-636">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-637">Записывает имя свойства в кодировке UTF-8 и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-637">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-638">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-638">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-639">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-639">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-640">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-640">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-641">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-641">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-642">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-642">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-643">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-643">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-644">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-644">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-645">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-645">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="f4a69-646">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-646">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-647">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-647">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-648">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-648">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-649">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-649">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-650">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-650">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-651">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-651">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-652">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="f4a69-652">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="f4a69-653">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-653">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-654">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-654">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-655">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-655">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-656">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-656">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-657">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-657">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-658">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-658">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-659">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="f4a69-659">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="f4a69-660">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-660">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-661">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-661">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-662">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-662">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-663">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-663">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="f4a69-664">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-664">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-665">Записывает имя свойства UTF-16 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-665">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-666">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-666">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-667">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-667">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-668">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-668">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-669">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-669">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-670">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-670">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-671">Записывает имя свойства UTF-16 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-671">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-672">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-672">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-673">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-673">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-674">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-674">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-675">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-675">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-676">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-676">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-677">Записывает имя свойства UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-677">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-678">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-678">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="f4a69-679">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-679">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-680">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-680">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-681">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-681">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-682">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-682">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-683">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-683">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-684">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-684">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-685">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-685">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-686">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-686">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-687">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-687">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-688">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-688">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-689">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-689">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-690">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-690">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-691">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-691">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-692">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-692">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="f4a69-693">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-693">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-694">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-694">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-695">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-695">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-696">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-696">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-697">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-697">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-698">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-698">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-699">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-699">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-700">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="f4a69-700">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="f4a69-701">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-701">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-702">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-702">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-703">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-703">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-704">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-704">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-705">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-705">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-706">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-706">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-707">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-707">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-708">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="f4a69-708">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="f4a69-709">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-709">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-710">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-710">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-711">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-711">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-712">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-712">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-713">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-713">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="f4a69-714">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-714">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-715">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-715">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-716">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-716">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-717">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-717">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-718">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-718">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-719">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-719">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-720">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-720">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-721">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-721">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-722">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-722">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-723">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-723">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-724">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-724">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-725">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-725">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-726">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-726">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-727">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-727">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-728">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-728">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-729">Записывает имя свойства, указываемое как строка, и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-729">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-730">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-730">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="f4a69-731">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-731">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-732">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-732">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-733">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-733">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-734">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-734">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-735">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-735">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-736">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-736">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-737">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-737">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-738">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-738">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-739">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-739">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-740">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="f4a69-740">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-741">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-741">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f4a69-742">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f4a69-742">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-743">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-743">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-744">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-744">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-745">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-745">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-746">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-746">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="f4a69-747">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-747">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-748">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-748">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-749">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-749">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-750">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-750">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-751">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-751">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-752">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="f4a69-752">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="f4a69-753">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-753">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-754">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-754">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-755">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-755">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-756">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-756">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-757">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-757">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-758">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="f4a69-758">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="f4a69-759">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-759">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-760">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-760">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-761">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-761">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="f4a69-762">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="f4a69-762">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-763">Записывает заранее закодированное имя свойства и текстовое значение в UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-763">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-764">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-764">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-765">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="f4a69-765">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-766">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-766">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-767">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-767">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-768">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-768">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-769">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-769">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-770">Записывает заранее закодированное имя свойства и текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-770">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-771">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-771">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-772">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="f4a69-772">The value is escaped before writing.</span></span>

<span data-ttu-id="f4a69-773">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-773">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-774">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-774">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-775">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-775">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-776">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-776">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-777">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-777">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-778">Записывает заранее закодированное имя свойства и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-778">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-779">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-779">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="f4a69-780">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="f4a69-780">The value is escaped before writing.</span></span>

<span data-ttu-id="f4a69-781">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-781">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-782">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-782">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-783">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-783">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="f4a69-784">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-784">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="f4a69-785">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="f4a69-785">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="f4a69-786">Записывает заранее закодированные имя свойства и значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-786">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-787">Имя и значение свойства должны быть преобразованы в escape-последовательность при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-787">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-788">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-788">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-789">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-789">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-790">Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-790">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-791">Этот метод записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="f4a69-791">This method writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-792">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-792">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-793">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-793">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-794">Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-794">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-795">Этот метод записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="f4a69-795">This method writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-796">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-796">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-797">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-797">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-798">Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-798">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-799">Этот метод записывает значение <xref:System.Guid>, используя <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d"), в виде: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="f4a69-799">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-800">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-800">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="f4a69-801">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="f4a69-801">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-802">Записывает текстовое значение UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-802">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-803">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="f4a69-803">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-804">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-804">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-805">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-805">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-806">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-806">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-807">Записывает текстовое значение UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-807">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-808">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="f4a69-808">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-809">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-809">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-810">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-810">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-811">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="f4a69-811">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-812">Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-812">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="f4a69-813">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="f4a69-813">The value is escaped before writing.</span></span>

<span data-ttu-id="f4a69-814">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue>.</span><span class="sxs-lookup"><span data-stu-id="f4a69-814">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a69-815">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="f4a69-815">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-816">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-816">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f4a69-817">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-817">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="f4a69-818">Записывает заранее закодированное значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-818">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f4a69-819">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="f4a69-819">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f4a69-820">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="f4a69-820">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
