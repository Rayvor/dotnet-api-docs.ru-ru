<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15c2c7b144d76ebb0777c62aa2a8aafb86bef966" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70528835" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b5f0c-101">Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-102">`Utf8JsonWriter`Записывает текст последовательно без кэширования, и по умолчанию соблюдает [Формат JSON RFC](https://tools.ietf.org/html/rfc8259), за исключением написания комментариев.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="b5f0c-103">Метод, который пытается записать недопустимый JSON при включенной проверке <xref:System.InvalidOperationException> , создает исключение с сообщением об ошибке, зависящим от контекста.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="b5f0c-104">Чтобы иметь возможность форматировать выходные данные с отступами и пробелами или пропустить проверку, создайте экземпляр <xref:System.Text.Json.JsonWriterOptions> и передайте его в модуль записи.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-104">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="b5f0c-105">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="b5f0c-106">Определяет особое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="b5f0c-107">Создает экземпляр <see cref="T:System.Text.Json.Utf8JsonWriter" /> с указанным <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-107">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-108">Элемент <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-108"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="b5f0c-109">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-109">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="b5f0c-110">Определяет особое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-110">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="b5f0c-111">Создает экземпляр <see cref="T:System.Text.Json.Utf8JsonWriter" /> с указанным <paramref name="utf8Json" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-111">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-112">Свойство <paramref name="utf8Json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-112"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5f0c-113">Возвращает общее число байтов, зафиксированных в выходных данных к настоящему времени текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-113">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="b5f0c-114">Общее число байтов, зафиксированных на выход <see cref="T:System.Text.Json.Utf8JsonWriter" /> на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-114">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-115">В случае <xref:System.Buffers.IBufferWriter%601>, это свойство указывает, сколько ибуффервритер имеет расширенное значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-115">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="b5f0c-116">В случае <xref:System.IO.Stream>, это свойство указывает, сколько данных было записано в поток.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-116">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5f0c-117">Возвращает число байтов, записанных к настоящему времени объектом <see cref="T:System.Text.Json.Utf8JsonWriter" /> и еще не зафиксированных в выходных данных.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-117">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="b5f0c-118">Число байтов, записанных на <see cref="T:System.Text.Json.Utf8JsonWriter" /> данный момент, которые еще не были сброшены в выходные данные и зафиксированы.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-118">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5f0c-119">Возвращает глубину текущего токена.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-119">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="b5f0c-120">Глубина текущего маркера.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-120">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-121">`CurrentDepth` Свойство отслеживает рекурсивную глубину вложенных объектов и массивов в тексте JSON, записанном на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-121">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-122">Фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-122">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-123">В случае с ибуффервритер он перемещается <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-123">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="b5f0c-124">В случае с потоком поток данных записывает данные в поток и сбрасывает их.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-124">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="b5f0c-125"><xref:System.Text.Json.Utf8JsonWriter> Экземпляр нельзя использовать повторно после удаления.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-125">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-126">Асинхронно фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-126">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="b5f0c-127">Задача, представляющая асинхронную операцию удаления.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-127">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-128">В случае с ибуффервритер он перемещается <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-128">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="b5f0c-129">В случае с потоком поток данных записывает данные в поток и сбрасывает их.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-129">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="b5f0c-130"><xref:System.Text.Json.Utf8JsonWriter> Экземпляр нельзя использовать повторно после удаления.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-130">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-131">Фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-131">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-132">В случае с ибуффервритер он перемещается <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-132">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="b5f0c-133">В этом случае <xref:System.IO.Stream>данные записываются в поток и сбрасываются.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-133">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5f0c-134">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-134">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="b5f0c-135">Токен для отслеживания запросов отмены.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-135">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="b5f0c-136">Значение по умолчанию — <see cref="T:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-136">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="b5f0c-137">Асинхронно фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-137">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="b5f0c-138">Задача, представляющая асинхронную операцию освобождения.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-138">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-139">В случае с ибуффервритер он перемещается <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-139">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="b5f0c-140">В этом случае <xref:System.IO.Stream>данные записываются в поток и очищаются асинхронно, при этом отслеживаются запросы на отмену.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-140">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5f0c-141">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-141">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5f0c-142">Возвращает пользовательский режим записи JSON с использованием этого экземпляра, который определяет, необходимо ли форматировать выходные данные при записи и следует ли пропускать структурную проверку JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-142">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value><span data-ttu-id="b5f0c-143">Объект, определяющий поведение данного экземпляра для форматирования и проверки.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-143">An object that defines the behavior of this instance for formatting and validation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-144">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-144">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-145">Компонент будет продолжать использовать исходные параметры модуля записи и исходные выходные данные <xref:System.Buffers.IBufferWriter`1> (или <xref:System.IO.Stream>) в качестве назначения. <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="b5f0c-145">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5f0c-146">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-146">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="b5f0c-147">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-147">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="b5f0c-148">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-148">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-149">Компонент продолжит использовать исходные параметры модуля записи, но теперь записывает в `bufferWriter` качестве нового назначения. <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="b5f0c-149">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-150"><paramref name="bufferWriter" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-150"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5f0c-151">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-151">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="b5f0c-152">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-152">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="b5f0c-153">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-153">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-154">Компонент продолжит использовать исходные параметры модуля записи, но теперь запишет в `utf8Json` качестве нового назначения. <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="b5f0c-154">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-155"><paramref name="utf8Json" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-155"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5f0c-156">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-156">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-157">Имя записываемого свойства в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-157">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="b5f0c-158">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-158">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="b5f0c-159">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-159">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-160">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-160">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-161">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-161">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-162">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-162">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-163">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-163">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="b5f0c-164">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-164">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="b5f0c-165">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-165">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-166">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-166">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-167">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-167">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-168">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-168">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-169">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-169">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="b5f0c-170">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-170">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="b5f0c-171">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-171">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-172">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-172">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-173">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-173">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-174">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-174">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-175">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-175">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-176">Имя записываемого свойства в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-176">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="b5f0c-177">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-177">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="b5f0c-178">Записывает заранее закодированное имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-178">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-179">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-179">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-180">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-180">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b5f0c-181">Двоичные данные, которые нужно записать в виде строкового элемента JSON массива JSON в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-181">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-182">Записывает необработанные байты (в виде строки JSON в кодировке Base64) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-182">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-183">Байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-183">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-184">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-184">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-185">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-185">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-186">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-186">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-187">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-187">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-188">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-188">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-189">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-189">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-190">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-190">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-191">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-191">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-192">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-192">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-193">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-193">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-194">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-194">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-195">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-195">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-196">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-196">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-197">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-197">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-198">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-198">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-199">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-199">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-200">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-200">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-201">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-201">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-202">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-202">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-203">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-203">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-204">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-204">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-205">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-205">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-206">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-206">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-207">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-207">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-208">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-208">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-209">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-209">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-210">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-210">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-211">Записывает значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-211">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-212">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-212">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="b5f0c-213">Значение в кодировке UTF-8, записываемое в виде комментария JSON, заключенного в /*..*/.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-213">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="b5f0c-214">Записывает текстовое значение UTF-8 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-214">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-215">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-215">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-216">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-216">The specified value is too large.</span></span>
        
<span data-ttu-id="b5f0c-217">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-217">-or-</span></span>

<span data-ttu-id="b5f0c-218"><paramref name="utf8Value" /> содержит разделитель комментария (\*/).</span><span class="sxs-lookup"><span data-stu-id="b5f0c-218"><paramref name="utf8Value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-219">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в /*..*/.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-219">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="b5f0c-220">Записывает текстовое значение UTF-16 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-220">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-221">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-221">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-222">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-222">The specified value is too large OR.</span></span>
        
<span data-ttu-id="b5f0c-223">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-223">-or-</span></span>

<span data-ttu-id="b5f0c-224"><paramref name="value" /> содержит разделитель комментария (\*/).</span><span class="sxs-lookup"><span data-stu-id="b5f0c-224"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-225">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в /*..*/.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-225">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="b5f0c-226">Записывает строковое текстовое значение в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-226">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-227">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-227">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-228">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-228">The specified value is too large.</span></span>
        
<span data-ttu-id="b5f0c-229">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-229">-or-</span></span>

<span data-ttu-id="b5f0c-230"><paramref name="value" /> содержит разделитель комментария (\*/).</span><span class="sxs-lookup"><span data-stu-id="b5f0c-230"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-231">Параметр <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-231">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-232">Записывает конец массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-232">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-233">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-233">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-234">Записывает конец объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-234">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-235">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-235">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-236">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-236">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="b5f0c-237">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-237">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-238">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-238">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-239">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-239">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-240">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-240">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-241">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-241">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-242">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-242">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-243">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-243">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-244">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-244">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-245">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-245">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-246">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-246">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-247">Записывает имя свойства, указываемое как строка, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-247">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-248">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-248">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-249">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-249">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-250">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-250">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-251">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-251">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-252">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-252">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-253">Записывает заранее закодированное имя свойства и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-253">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-254">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-254">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-255">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-255">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-256">Записывает литерал JSON <b>null</b> в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-256">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-257">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-257">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-258">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-258">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-259">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-259">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-260">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-260">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="b5f0c-261">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="b5f0c-261">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-262">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-262">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-263">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-264">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-265">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-265">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-266">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-267">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-267">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-268">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="b5f0c-268">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-269">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-269">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-270">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-270">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-271">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-271">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-272">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-272">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-273">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-273">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-274">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-274">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-275">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-275">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-276">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-276">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-277">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-277">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-278">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-278">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-279">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-279">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-280">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-280">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-281">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-281">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-282">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-282">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-283">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-283">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-284">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-284">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-285">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-285">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-286">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-286">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-287">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-287">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-288">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-288">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-289">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="b5f0c-289">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-290">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-290">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-291">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-291">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-292">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-292">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-293">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-293">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-294">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-294">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-295">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-295">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-296">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-296">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-297">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-297">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-298">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-298">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-299">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-299">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-300">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-300">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-301">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-301">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-302">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-302">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-303">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-303">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-304">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-304">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-305">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-305">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-306">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-306">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-307">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-307">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-308">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-308">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-309">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-309">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-310">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="b5f0c-310">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-311">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-311">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-312">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-312">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-313">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-313">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-314">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-314">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-315">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-315">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-316">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-316">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-317">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="b5f0c-317">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-318">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-318">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-319">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-319">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-320">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-320">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-321">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-321">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-322">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-322">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-323">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-323">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-324">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-324">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-325">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-325">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-326">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-326">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-327">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-327">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-328">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-328">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-329">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-329">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-330">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-330">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-331">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-331">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-332">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-332">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-333">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-333">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-334">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-334">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-335">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-335">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-336">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-336">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-337">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-337">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-338">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="b5f0c-338">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-339">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-339">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-340">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-340">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-341">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-341">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-342">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-343">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-344">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-344">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-345">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-345">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-346">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-346">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-347">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-347">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-348">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-348">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-349">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-349">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-350">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-350">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-351">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-351">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-352">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-352">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-353">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-353">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-354">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-354">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-355">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-355">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-356">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-356">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-357">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-357">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-358">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-358">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-359">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="b5f0c-359">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-360">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-360">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-361">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-361">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-362">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-362">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-363">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-363">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-364">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-364">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-365">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-365">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-366">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-366">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-367">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="b5f0c-367">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-368">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-368">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-369">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-369">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-370">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-370">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-371">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-371">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-372">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-372">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-373">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-373">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-374">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-374">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-375">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-375">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-376">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-376">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-377">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-377">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-378">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-378">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-379">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-379">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-380">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-380">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-381">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-381">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-382">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-382">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-383">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-383">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-384">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-384">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-385">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-385">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-386">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-386">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-387">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-387">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-388">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-388">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-389">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-389">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-390">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-390">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-391">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="b5f0c-391">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-392">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-392">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-393">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-393">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-394">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-394">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-395">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-395">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-396">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-396">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-397">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-397">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-398">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-398">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-399">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-399">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-400">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-400">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-401">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-401">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-402">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-402">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-403">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-403">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-404">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-404">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-405">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-405">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-406">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-406">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-407">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-407">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-408">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-408">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-409">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-409">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-410">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-410">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-411">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-411">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-412">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-412">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-413">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-413">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-414">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-414">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-415">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="b5f0c-415">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-416">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-416">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-417">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-417">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-418">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-418">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-419">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-419">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-420">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-420">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-421">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="b5f0c-421">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-422">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-422">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-423">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-423">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-424">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-424">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-425">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-425">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-426">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-426">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-427">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-427">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-428">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-428">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-429">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-429">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-430">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-430">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-431">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-431">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-432">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-432">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-433">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию ("G"), например 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-433">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-434">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-434">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-435">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-435">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-436">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-436">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-437">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-437">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-438">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-438">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-439">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="b5f0c-439">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="b5f0c-440">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-440">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-441">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-441">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-442">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-442">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-443">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-443">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-444">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-444">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-445">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="b5f0c-445">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-446">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-446">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-447">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-447">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-448">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-448">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-449">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-449">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-450">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-450">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-451">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «G»), например 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="b5f0c-451">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="b5f0c-452">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-452">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-453">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-453">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-454">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-454">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-455">Записывает значение <see cref="T:System.Decimal" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-455">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-456">Этот метод записывает <xref:System.Decimal> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-456">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-457">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-457">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-458">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-458">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-459">Записывает значение <see cref="T:System.Double" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-459">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-460">Этот метод записывает <xref:System.Double> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-460">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-461">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-461">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-462">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-462">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-463">Записывает значение <see cref="T:System.Int32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-463">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-464">Этот метод записывает <xref:System.Int32> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-464">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="b5f0c-465">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-465">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-466">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-466">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-467">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-467">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-468">Записывает значение <see cref="T:System.Int64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-468">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-469">Этот метод записывает <xref:System.Int64> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-469">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="b5f0c-470">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-470">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-471">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-471">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-472">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-472">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-473">Записывает значение <see cref="T:System.Single" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-473">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-474">Этот метод записывает <xref:System.Single> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-474">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-475">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-475">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-476">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-476">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-477">Записывает значение <see cref="T:System.UInt32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-477">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-478">Этот метод записывает <xref:System.UInt32> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-478">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="b5f0c-479">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-479">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-480">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-480">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-481">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-481">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-482">Записывает значение <see cref="T:System.UInt64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-482">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-483">Этот метод записывает <xref:System.UInt64> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="b5f0c-483">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="b5f0c-484">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-484">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-485">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-485">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-486">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-486">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="b5f0c-487">Записывает имя свойства в кодировке UTF-8 (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-487">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-488">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-488">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-489">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-489">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-490">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-490">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-491">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-491">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-492">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-492">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-493">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-493">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-494">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-494">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-495">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-495">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-496">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-496">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-497">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-497">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-498">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-498">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-499">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-499">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-500">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-500">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-501"><paramref name="propertyName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-501"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-502">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-502">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-503">Записывает заранее закодированное имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-503">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-504">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-504">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-505">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-505">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-506">Записывает начало массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-506">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-507">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-507">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b5f0c-508">-или-</span><span class="sxs-lookup"><span data-stu-id="b5f0c-508">-or-</span></span>

<span data-ttu-id="b5f0c-509">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-509">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-510">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-510">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="b5f0c-511">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-511">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-512">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-512">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-513">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-513">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-514">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-514">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b5f0c-515">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-515">-or-</span></span>
       
<span data-ttu-id="b5f0c-516">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-516">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-517">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-517">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-518">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-518">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-519">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-519">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-520">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-520">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-521">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-521">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b5f0c-522">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-522">-or-</span></span>
       
<span data-ttu-id="b5f0c-523">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-523">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-524">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-524">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-525">Записывает начало массива JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-525">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-526">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-526">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-527">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-527">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-528">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-528">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b5f0c-529">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-529">-or-</span></span>
       
<span data-ttu-id="b5f0c-530">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-530">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-531">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-531">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-532">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-532">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-533">Записывает начало массива JSON с заранее закодированным именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-533">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-534">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-534">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-535">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-535">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
    
<span data-ttu-id="b5f0c-536">-или-</span><span class="sxs-lookup"><span data-stu-id="b5f0c-536">- or -</span></span>

<span data-ttu-id="b5f0c-537">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-537">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5f0c-538">Записывает начало объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-538">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-539">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-539">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b5f0c-540">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-540">-or-</span></span>

<span data-ttu-id="b5f0c-541">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-541">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-542">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-542">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="b5f0c-543">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-543">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-544">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-544">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-545">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-545">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-546">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-546">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="b5f0c-547">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-547">-or-</span></span>
       
<span data-ttu-id="b5f0c-548">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-548">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-549">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-549">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-550">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-550">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-551">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-551">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-552">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-552">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-553">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-553">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="b5f0c-554">-или-</span><span class="sxs-lookup"><span data-stu-id="b5f0c-554">-or-</span></span>
       
<span data-ttu-id="b5f0c-555">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-555">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-556">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-556">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-557">Записывает начало объекта JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-557">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-558">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-558">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-559">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-559">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-560">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-560">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="b5f0c-561">- или -</span><span class="sxs-lookup"><span data-stu-id="b5f0c-561">-or-</span></span>
       
<span data-ttu-id="b5f0c-562">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-562">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-563">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-563">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-564">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-564">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b5f0c-565">Записывает начало объекта JSON с заранее закодированным именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-565">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-566">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-566">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-567">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-567">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
          
<span data-ttu-id="b5f0c-568">-или-</span><span class="sxs-lookup"><span data-stu-id="b5f0c-568">- or -</span></span>

<span data-ttu-id="b5f0c-569">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-569">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-570">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-570">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-571">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-571">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-572">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-572">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-573">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000. <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="b5f0c-573">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="b5f0c-574">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-574">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-575">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-575">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-576">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-576">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-577">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-577">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-578">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-579">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-579">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-580">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000-07:00. <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="b5f0c-580">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="b5f0c-581">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-581">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-582">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-582">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-583">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-583">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-584">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-584">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-585">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-585">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-586">Записывает имя свойства UTF-8 и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-586">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-587">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «d») в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="b5f0c-587">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="b5f0c-588">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-588">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-589">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-589">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-590">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-590">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-591">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-591">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b5f0c-592">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-592">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-593">Записывает имя свойства UTF-8 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-593">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-594">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-594">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-595">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-595">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-596">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-596">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-597">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-597">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-598">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-598">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-599">Записывает имя свойства UTF-8 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-599">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-600">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-600">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-601">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-601">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-602">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-602">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-603">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-603">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-604">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-604">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-605">Записывает имя свойства UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-605">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-606">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-606">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-607">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-607">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-608">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-608">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b5f0c-609">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-609">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-610">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-610">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-611">Записывает имя свойства в кодировке UTF-8 и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-611">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-612">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-612">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="b5f0c-613">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-613">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-614">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-614">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-615">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-615">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-616">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-616">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-617">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-617">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-618">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-618">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-619">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000. <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="b5f0c-619">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="b5f0c-620">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-620">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-621">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-621">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-622">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-622">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-623">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-623">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-624">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-624">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-625">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-625">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-626">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000-07:00. <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="b5f0c-626">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="b5f0c-627">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-627">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-628">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-628">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-629">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-629">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-630">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-630">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-631">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-631">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-632">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-632">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-633">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «d») в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="b5f0c-633">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="b5f0c-634">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-634">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-635">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-635">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-636">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-636">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-637">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-637">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b5f0c-638">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-638">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-639">Записывает имя свойства UTF-16 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-639">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-640">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-640">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-641">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-641">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-642">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-642">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-643">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-643">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-644">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-644">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-645">Записывает имя свойства UTF-16 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-645">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-646">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-646">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-647">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-647">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-648">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-648">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-649">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-649">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-650">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-650">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-651">Записывает имя свойства UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-651">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-652">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-652">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-653">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-653">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-654">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-654">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-655">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-655">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-656">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-656">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-657">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-657">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-658">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-658">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="b5f0c-659">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-659">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-660">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-660">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-661">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-661">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-662">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-662">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-663">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-663">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-664">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-664">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-665">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000. <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="b5f0c-665">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="b5f0c-666">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-666">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-667">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-667">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-668">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-668">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-669">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-669">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-670">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-670">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-671">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-671">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-672">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-672">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-673">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000-07:00. <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="b5f0c-673">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="b5f0c-674">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-674">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-675">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-675">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-676">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-676">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-677">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-677">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-678">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-678">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-679">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-679">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-680">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-680">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-681">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «d») в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="b5f0c-681">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="b5f0c-682">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-682">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-683">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-683">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-684">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-684">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-685">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-685">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-686">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-686">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b5f0c-687">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-687">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-688">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-688">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-689">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-689">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-690">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-690">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-691">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-691">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-692">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-692">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-693">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-693">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-694">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-694">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-695">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-695">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-696">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-696">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-697">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-697">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-698">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-698">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-699">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-699">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-700">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-700">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-701">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-701">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-702">Записывает имя свойства, указываемое как строка, и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-702">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-703">Имя и значение свойства переэкранированы перед записью.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-703">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-704">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-704">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-705">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-705">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-706">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-706">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-707">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-707">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-708">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-708">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-709">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-709">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-710">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-710">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="b5f0c-711">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-711">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-712">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-712">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-713">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-713">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5f0c-714">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-714">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-715">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-715">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-716">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-716">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-717">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-717">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-718">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000. <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="b5f0c-718">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="b5f0c-719">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-719">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-720">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-720">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-721">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-721">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-722">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-722">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-723">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-723">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-724">Записывает с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000-07:00. <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="b5f0c-724">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="b5f0c-725">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-725">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-726">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-726">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-727">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-727">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-728">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-728">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-729">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-729">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-730">Записывает <xref:System.Buffers.StandardFormat> с использованием значения по умолчанию (т. е. «d») в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="b5f0c-730">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="b5f0c-731">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-731">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-732">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-732">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-733">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-733">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b5f0c-734">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-734">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-735">Записывает заранее закодированное имя свойства и текстовое значение в UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-735">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-736">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-736">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="b5f0c-737">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-737">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-738">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-738">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-739">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-739">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-740">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-740">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-741">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-741">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-742">Записывает заранее закодированное имя свойства и текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-742">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-743">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-743">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="b5f0c-744">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-744">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-745">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-745">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-746">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-746">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-747">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-747">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-748">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-748">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-749">Записывает заранее закодированное имя свойства и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-749">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-750">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="b5f0c-750">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="b5f0c-751">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-751">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-752">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-752">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-753">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-753">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b5f0c-754">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-754">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b5f0c-755">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="b5f0c-755">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b5f0c-756">Записывает заранее закодированные имя свойства и значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-756">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-757">Имя и значение свойства должны быть преобразованы в escape-последовательность при <xref:System.Text.Json.JsonEncodedText> создании экземпляра.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-757">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-758">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-758">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-759">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-759">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-760">Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-760">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-761">Этот метод записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-761">This method writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-762">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-762">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-763">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-763">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-764">Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-764">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-765">Этот метод записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)), например 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-765">This method writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-766">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-766">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-767">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-767">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-768">Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-768">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-769">Этот метод записывает <xref:System.Guid> значение с помощью значения <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «d»), как в следующем виде: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-769">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-770">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-770">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="b5f0c-771">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-771">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-772">Записывает текстовое значение UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-772">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-773">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-773">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-774">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-774">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-775">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-775">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-776">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-776">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-777">Записывает текстовое значение UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-777">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-778">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-778">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-779">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-779">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-780">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-780">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-781">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-781">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-782">Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-782">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-783">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-783">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5f0c-784">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-784">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-785">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-785">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5f0c-786">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-786">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b5f0c-787">Записывает заранее закодированное значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-787">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b5f0c-788">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-788">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5f0c-789">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b5f0c-789">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
