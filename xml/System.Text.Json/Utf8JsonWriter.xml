<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="034cf5e0f42e28ed370f3808a6f6cc66720c30a5" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66381212" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b1fa5-101">Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b1fa5-102">`Utf8JsonWriter` Записывает текст последовательно с без кэширования и по умолчанию соответствует [RFC по JSON](https://tools.ietf.org/html/rfc8259), за исключением написания комментариев.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="b1fa5-103">Метод, который пытается выполнить запись недопустимый JSON, когда проверка включена вызывает <xref:System.InvalidOperationException> с сообщением об ошибке зависящего от контекста.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="b1fa5-104">Так как этот тип является ссылочной структурой, он не поддерживает непосредственно async.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="b1fa5-105">Тем не менее он обеспечивает поддержку для повторного входа для записи части данных и продолжить запись в виде фрагментов.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>

<span data-ttu-id="b1fa5-106">Чтобы иметь возможность форматирования выходных данных с помощью отступов и пробелов или пропустить проверку, создать экземпляр <xref:System.Text.Json.JsonWriterOptions> и передать его в модуль записи.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="b1fa5-107">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-107">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="b1fa5-108">Определяет особое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-108">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="b1fa5-109">Создает экземпляр <see cref="T:System.Text.Json.Utf8JsonWriter" /> с указанным <see cref="T:System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-109">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see cref="T:System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1fa5-110">Элемент <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-110"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="b1fa5-111">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-111">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="b1fa5-112">Определяет особое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-112">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="b1fa5-113">Создает экземпляр <see cref="T:System.Text.Json.Utf8JsonWriter" /> с указанным <paramref name="utf8Json" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-113">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1fa5-114"><paramref name="utf8Json" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-114"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1fa5-115">Возвращает общее число байтов, зафиксированных в выходных данных к настоящему времени текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-115">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="b1fa5-116">Общее число байтов, зафиксированных в выходные данные с учетом <see cref="T:System.Text.Json.Utf8JsonWriter" /> данный момент.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-117">В случае использования <xref:System.Buffers.IBufferWriter%601>, это свойство указывает, сколько предусмотрена IBufferWriter.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-117">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="b1fa5-118">В случае использования <xref:System.IO.Stream>, это свойство указывает, какой объем данных будет записана в поток.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-118">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1fa5-119">Возвращает число байтов, записанных к настоящему времени объектом <see cref="T:System.Text.Json.Utf8JsonWriter" /> и еще не зафиксированных в выходных данных.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-119">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1fa5-120">Возвращает глубину текущего токена.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="b1fa5-121">Глубина текущего маркера.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b1fa5-122">`CurrentDepth` Свойство отслеживает глубину рекурсивных вложенных объектов / массивы в текст JSON, записаны на данный момент.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-123">Фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-123">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-124">В случае IBufferWriter, это увеличивает базовый <xref:System.Buffers.IBufferWriter`1> зависимости от того, что было записано данный момент.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-124">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="b1fa5-125">В случае Stream записывает данные в поток и записать его.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-125">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-126">Асинхронно фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-126">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-127">В случае IBufferWriter, это увеличивает базовый <xref:System.Buffers.IBufferWriter`1> зависимости от того, что было записано данный момент.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-127">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="b1fa5-128">В случае Stream записывает данные в поток и записать его.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-128">In the case of Stream, this writes the data to the stream and flushes it.</span></span>
            
            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-129">Фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-129">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-130">В случае IBufferWriter, это увеличивает базовый <xref:System.Buffers.IBufferWriter`1> зависимости от того, что было записано данный момент.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-130">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="b1fa5-131">В случае использования <xref:System.IO.Stream>, это записывает данные в поток и записать его.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-131">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b1fa5-132">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-132">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary><span data-ttu-id="b1fa5-133">Асинхронно фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-133">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-134">В случае IBufferWriter, это увеличивает базовый <xref:System.Buffers.IBufferWriter`1> зависимости от того, что было записано данный момент.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-134">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="b1fa5-135">В случае использования <xref:System.IO.Stream>, это записывает данные в поток и записать его асинхронно, в процессе отслеживания запросов на отмену.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-135">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b1fa5-136">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-136">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1fa5-137">Возвращает пользовательский режим записи JSON с использованием этого экземпляра, который определяет, необходимо ли форматировать выходные данные при записи и следует ли пропускать структурную проверку JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-137">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-138">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-138">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-139"><xref:System.Text.Json.Utf8JsonWriter> Продолжат использовать первоначальные значения параметров модуля записи и первоначальные выходные данные (либо <xref:System.Buffers.IBufferWriter`1> или <xref:System.IO.Stream>) в качестве цели.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-139">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b1fa5-140">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-140">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="b1fa5-141">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-141">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="b1fa5-142">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-142">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-143"><xref:System.Text.Json.Utf8JsonWriter> Продолжат использовать первоначальные значения параметров модуля записи, но теперь записывает `bufferWriter` как новое место назначения.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-143">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1fa5-144"><paramref name="bufferWriter" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-144"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b1fa5-145">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-145">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="b1fa5-146">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-146">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="b1fa5-147">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-147">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-148"><xref:System.Text.Json.Utf8JsonWriter> Будут продолжать использовать первоначальные значения параметров модуля записи, но теперь записи `utf8Json` как новое место назначения.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-148">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1fa5-149"><paramref name="utf8Json" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-149"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b1fa5-150">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-150">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-151">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-151">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-152">Значение, которое нужно записать в виде литерала JSON "true" или "false" в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-152">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-153">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-153">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-154">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-154">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-155">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-155">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-156">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-156">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-157">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-157">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-158">Значение, которое нужно записать в виде литерала JSON "true" или "false" в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-158">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-159">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-159">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-160">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-160">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-161">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-161">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-162">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-162">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-163">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-163">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-164">Значение, которое нужно записать в виде литерала JSON "true" или "false" в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-164">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-165">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-165">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-166">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-166">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-167">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-167">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-168">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-168">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-169">Значение, которое нужно записать в виде литерала JSON "true" или "false" в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-169">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-170">Записывает значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-170">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-171">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-171">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="b1fa5-172">Значение в кодировке UTF-8, записываемое в виде комментария JSON, заключенного в /*..*/.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-172">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="b1fa5-173">Записывает текстовое значение UTF-8 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-173">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-174">Значение комментария не кодируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-174">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-175">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-175">The specified value is too large.</span></span>
        
<span data-ttu-id="b1fa5-176">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-176">-or-</span></span>

<span data-ttu-id="b1fa5-177"><paramref name="utf8Value" /> содержит разделитель комментария (\*/).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-177"><paramref name="utf8Value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-178">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в /*..*/.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-178">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="b1fa5-179">Записывает текстовое значение UTF-16 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-179">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-180">Значение комментария не кодируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-180">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-181">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-181">The specified value is too large OR.</span></span>
        
<span data-ttu-id="b1fa5-182">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-182">-or-</span></span>

<span data-ttu-id="b1fa5-183"><paramref name="value" /> содержит разделитель комментария (\*/).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-183"><paramref name="value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-184">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в /*..*/.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-184">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="b1fa5-185">Записывает строковое текстовое значение в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-185">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-186">Значение комментария не кодируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-186">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-187">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-187">The specified value is too large.</span></span>
        
<span data-ttu-id="b1fa5-188">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-188">-or-</span></span>

<span data-ttu-id="b1fa5-189"><paramref name="value" /> содержит разделитель комментария (\*/).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-189"><paramref name="value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-190">Записывает конец массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-190">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-191">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-191">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-192">Записывает конец объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-192">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-193">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-193">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-194">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-194">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="b1fa5-195">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и литерал JSON null в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-195">Writes a property name specified as a read-only span of bytes and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-196">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-196">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-197">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-197">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-198">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-198">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-199">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-199">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b1fa5-200">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и литерал JSON null в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-200">Writes a property name specified as a read-only character span and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-201">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-201">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-202">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-202">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-203">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-203">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-204">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-204">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b1fa5-205">Записывает имя свойства, указываемое как строка, и литерал JSON null в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-205">Writes a property name specified as a string and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-206">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-206">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-207">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-207">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-208">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-208">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-209">Записывает литерал JSON "null" в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-209">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-210">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-210">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-211">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-211">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-212">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-212">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-213">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-213">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-214">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-214">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-215">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-215">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-216">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-216">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-217">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-217">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-218">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-218">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-219">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-219">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-220">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-220">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-221">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-221">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-222">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-222">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-223">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-223">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-224">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-224">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-225">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-225">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-226">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-226">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-227">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-227">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-228">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-228">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-229">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-229">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-230">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-230">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-231">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-231">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-232">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-232">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-233">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-233">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-234">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-234">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-235">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-235">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-236">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-236">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-237">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-237">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-238">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-238">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-239">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-239">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-240">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-240">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-241">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-241">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-242">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-242">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-243">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-243">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-244">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-244">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-245">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-245">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-246">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-246">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-247">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-247">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-248">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-248">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-249">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-249">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-250">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-250">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-251">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-251">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-252">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-252">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-253">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-253">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-254">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-254">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-255">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-255">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-256">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-256">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-257">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-257">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-258">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-258">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-259">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-259">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-260">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-260">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-261">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-261">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="b1fa5-262">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-262">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-263">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-264">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-265">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-266">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-267">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-267">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-268">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-268">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-269">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-269">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-270">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-270">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-271">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-271">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-272">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-272">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-273">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-273">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-274">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-274">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-275">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-275">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-276">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-276">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-277">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-277">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-278">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-278">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-279">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-279">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-280">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-280">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-281">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-281">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-282">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-282">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-283">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-283">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-284">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-284">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-285">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-285">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-286">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-286">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-287">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-287">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-288">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-288">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-289">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-289">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-290">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-290">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-291">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-291">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-292">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-292">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-293">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-293">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-294">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-294">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-295">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-295">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-296">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-296">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-297">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-297">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-298">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-298">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-299">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-299">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-300">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-300">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-301">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-301">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-302">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-302">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-303">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-303">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-304">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-304">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-305">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-305">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-306">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-306">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-307">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-307">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-308">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-308">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-309">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-309">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-310">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-310">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-311">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-311">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-312">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-312">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-313">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-313">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-314">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-314">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-315">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-315">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-316">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-316">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-317">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-317">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-318">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-318">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-319">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-319">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-320">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-320">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-321">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-321">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-322">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-322">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-323">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-323">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-324">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-324">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-325">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-326">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-327">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-327">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-328">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-328">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-329">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-329">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-330">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-330">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-331">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-331">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-332">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-332">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-333">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-333">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-334">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-334">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-335">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-335">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-336">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-336">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-337">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-337">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-338">Записывает значение <see cref="T:System.Decimal" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-338">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-339">Этот метод записывает <see cref="T:System.Decimal" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-339">This method writes the <see cref="T:System.Decimal" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-340">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-340">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-341">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-341">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-342">Записывает значение <see cref="T:System.Double" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-342">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-343">Этот метод записывает <see cref="T:System.Double" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-343">This method writes the <see cref="T:System.Double" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-344">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-344">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-345">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-345">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-346">Записывает значение <see cref="T:System.Int32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-346">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-347">Этот метод записывает <see cref="T:System.Int32" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-347">This method writes the <see cref="T:System.Int32" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="b1fa5-348">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-349">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-349">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-350">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-350">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-351">Записывает значение <see cref="T:System.Int64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-351">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-352">Этот метод записывает <see cref="T:System.Int64" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-352">This method writes the <see cref="T:System.Int64" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="b1fa5-353">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-353">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-354">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-354">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-355">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-355">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-356">Записывает значение <see cref="T:System.Single" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-356">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-357">Этот метод записывает <see cref="T:System.Single" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-357">This method writes the <see cref="T:System.Single" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-358">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-358">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-359">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-359">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-360">Записывает значение <see cref="T:System.UInt32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-360">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-361">Этот метод записывает <see cref="T:System.UInt32" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-361">This method writes the <see cref="T:System.UInt32" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="b1fa5-362">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-362">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-363">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-363">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-364">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-364">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-365">Записывает значение <see cref="T:System.UInt64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-365">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-366">Этот метод записывает <see cref="T:System.UInt64" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="b1fa5-366">This method writes the <see cref="T:System.UInt64" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="b1fa5-367">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-367">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-368">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-368">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-369">Записывает начало массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-369">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-370">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-370">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b1fa5-371">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-371">-or-</span></span>

<span data-ttu-id="b1fa5-372">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-372">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-373">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-373">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="b1fa5-374">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-374">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-375">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-375">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-376">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-376">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-377">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-377">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b1fa5-378">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-378">-or-</span></span> 
<span data-ttu-id="b1fa5-379">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-379">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-380">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-380">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b1fa5-381">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-381">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-382">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-382">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-383">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-383">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-384">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-384">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b1fa5-385">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-385">-or-</span></span> 
<span data-ttu-id="b1fa5-386">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-386">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-387">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-387">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b1fa5-388">Записывает начало массива JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-388">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-389">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-389">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-390">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-390">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-391">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-391">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b1fa5-392">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-392">-or-</span></span> 
<span data-ttu-id="b1fa5-393">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-393">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1fa5-394">Записывает начало объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-394">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-395">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-395">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="b1fa5-396">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-396">-or-</span></span>

<span data-ttu-id="b1fa5-397">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-397">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-398">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-398">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="b1fa5-399">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-399">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-400">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-400">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-401">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-401">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-402">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-402">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="b1fa5-403">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-403">-or-</span></span> 
<span data-ttu-id="b1fa5-404">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-404">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-405">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-405">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b1fa5-406">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-406">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-407">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-407">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-408">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-408">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-409">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-409">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="b1fa5-410">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-410">-or-</span></span> 
<span data-ttu-id="b1fa5-411">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-411">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-412">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-412">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="b1fa5-413">Записывает начало объекта JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-413">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-414">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-414">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-415">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-415">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-416">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-416">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="b1fa5-417">-или-</span><span class="sxs-lookup"><span data-stu-id="b1fa5-417">-or-</span></span> 
<span data-ttu-id="b1fa5-418">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-418">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-419">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-419">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-420">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-420">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-421">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-421">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-422">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-422">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-423">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-423">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-424">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-424">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-425">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-425">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-426">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-426">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-427">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-427">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-428">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-428">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-429">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-429">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-430">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-430">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-431">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-431">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-432">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-432">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-433">Записывает имя свойства UTF-8 и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-433">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-434">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-434">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-435">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-435">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-436">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-436">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-437">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-437">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b1fa5-438">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-438">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-439">Записывает имя свойства UTF-8 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-439">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-440">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-440">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-441">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-441">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-442">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-442">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-443">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-443">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-444">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-444">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-445">Записывает имя свойства UTF-8 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-445">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-446">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-446">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-447">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-447">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-448">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-448">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="b1fa5-449">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-449">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-450">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-450">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-451">Записывает имя свойства UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-451">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-452">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-452">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-453">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-453">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-454">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-454">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-455">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-455">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-456">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-456">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-457">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-457">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-458">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-458">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-459">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-459">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-460">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-460">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-461">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-461">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-462">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-462">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-463">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-463">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-464">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-464">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-465">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-465">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-466">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-466">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-467">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-467">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-468">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-468">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-469">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-469">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-470">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-470">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-471">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-471">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-472">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-472">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-473">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-473">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b1fa5-474">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-474">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-475">Записывает имя свойства UTF-16 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-475">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-476">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-476">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-477">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-477">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-478">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-478">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-479">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-479">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-480">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-480">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-481">Записывает имя свойства UTF-16 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-481">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-482">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-482">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-483">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-483">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-484">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-484">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-485">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-485">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-486">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-486">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-487">Записывает имя свойства UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-487">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-488">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-488">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-489">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-489">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-490">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-490">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-491">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-491">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-492">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-492">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-493">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-493">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-494">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-494">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-495">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-495">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-496">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-496">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-497">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-497">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-498">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-498">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-499">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-499">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-500">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-500">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-501">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-501">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-502">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-502">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-503">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-503">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-504">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-504">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-505">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-505">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-506">Имя свойства, экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-506">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-507">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-507">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-508">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-508">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-509">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-509">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="b1fa5-510">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-510">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-511">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-511">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-512">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-512">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-513">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-513">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-514">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-514">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-515">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-515">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-516">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-516">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-517">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-517">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-518">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-518">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-519">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-519">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-520">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-520">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="b1fa5-521">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="b1fa5-522">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-522">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="b1fa5-523">Записывает имя свойства, указываемое как строка, и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-523">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-524">Имя свойства и значение экранируется перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-524">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-525">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-525">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-526">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-526">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-527">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-527">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-528">Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-528">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-529">Этот метод записывает <see cref="T:System.DateTime" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-529">This method writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="b1fa5-530">Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-530">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-531">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-531">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-532">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-532">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-533">Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-533">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-534">Этот метод записывает <see cref="T:System.DateTimeOffset" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-534">This method writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="b1fa5-535">Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-535">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-536">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-536">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-537">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-537">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-538">Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-538">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="b1fa5-539">Этот метод записывает <see cref="T:System.Guid" /> значение по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть было "), так как форма: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-539">This method writes the <see cref="T:System.Guid" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-540">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-540">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="b1fa5-541">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-541">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-542">Записывает текстовое значение UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-542">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-543">Escape-последовательность значение перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-543">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-544">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-544">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-545">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-545">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-546">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-547">Записывает текстовое значение UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-547">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-548">Escape-последовательность значение перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-548">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-549">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-549">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-550">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-550">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1fa5-551">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-551">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="b1fa5-552">Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-552">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="b1fa5-553">Escape-последовательность значение перед записью.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-553">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1fa5-554">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-554">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1fa5-555">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b1fa5-555">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>