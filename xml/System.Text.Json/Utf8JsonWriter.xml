<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0289f40fe104361daf9e25a0bd3e7e2a913bae5" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381108" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="6ead3-101">Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-102">`Utf8JsonWriter` записывает текст последовательно без кэширования, и по умолчанию соблюдает [Формат JSON RFC](https://tools.ietf.org/html/rfc8259), за исключением написания комментариев.</span><span class="sxs-lookup"><span data-stu-id="6ead3-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="6ead3-103">Метод, который пытается записать недопустимый JSON при включенной проверке, вызывает исключение <xref:System.InvalidOperationException> с сообщением об ошибке, зависящим от контекста.</span><span class="sxs-lookup"><span data-stu-id="6ead3-103">A method that attempts to write invalid JSON when validation is enabled throws an <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="6ead3-104">Чтобы иметь возможность форматировать выходные данные с отступами и пробелами, пропускать проверку или настраивать поведение экранирования, создайте экземпляр <xref:System.Text.Json.JsonWriterOptions> и передайте его в модуль записи.</span><span class="sxs-lookup"><span data-stu-id="6ead3-104">To be able to format the output with indentation and white space, to skip validation, OR to customize the escaping behavior, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="6ead3-105">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="6ead3-106">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="6ead3-107">По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-107">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="6ead3-108">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный <see cref="T:System.Buffers.IBufferWriter`1" /> для записи в него выходных данных и параметров настройки.</span><span class="sxs-lookup"><span data-stu-id="6ead3-108">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified <see cref="T:System.Buffers.IBufferWriter`1" /> to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-109">Свойство <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-109"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="6ead3-110">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-110">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="6ead3-111">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-111">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="6ead3-112">По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-112">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="6ead3-113">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный поток для записи в него выходных данных и параметров настройки.</span><span class="sxs-lookup"><span data-stu-id="6ead3-113">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified stream to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-114">Свойство <paramref name="utf8Json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-114"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ead3-115">Возвращает общее число байтов, зафиксированных в выходных данных к настоящему времени текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="6ead3-115">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="6ead3-116">Общее число байтов, зафиксированных на выходе <see cref="T:System.Text.Json.Utf8JsonWriter" /> до сих пор.</span><span class="sxs-lookup"><span data-stu-id="6ead3-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-117">В случае <xref:System.Buffers.IBufferWriter%601>это свойство указывает, насколько сложным является Ибуффервритер.</span><span class="sxs-lookup"><span data-stu-id="6ead3-117">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="6ead3-118">В случае <xref:System.IO.Stream>это свойство указывает, сколько данных было записано в поток.</span><span class="sxs-lookup"><span data-stu-id="6ead3-118">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ead3-119">Возвращает число байтов, записанных к настоящему времени объектом <see cref="T:System.Text.Json.Utf8JsonWriter" /> и еще не зафиксированных в выходных данных.</span><span class="sxs-lookup"><span data-stu-id="6ead3-119">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="6ead3-120">Число байтов, записанных на данный момент <see cref="T:System.Text.Json.Utf8JsonWriter" />, которые еще не были сброшены в выходные данные и зафиксированы.</span><span class="sxs-lookup"><span data-stu-id="6ead3-120">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ead3-121">Возвращает глубину текущего токена.</span><span class="sxs-lookup"><span data-stu-id="6ead3-121">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="6ead3-122">Глубина текущего маркера.</span><span class="sxs-lookup"><span data-stu-id="6ead3-122">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-123">Свойство `CurrentDepth` отслеживает рекурсивную глубину вложенных объектов и массивов в тексте JSON, записанном на данный момент.</span><span class="sxs-lookup"><span data-stu-id="6ead3-123">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-124">Фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="6ead3-124">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-125">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="6ead3-125">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="6ead3-126">В случае с потоком поток данных записывает данные в поток и сбрасывает их.</span><span class="sxs-lookup"><span data-stu-id="6ead3-126">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="6ead3-127">Экземпляр <xref:System.Text.Json.Utf8JsonWriter> нельзя использовать повторно после удаления.</span><span class="sxs-lookup"><span data-stu-id="6ead3-127">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-128">Асинхронно фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="6ead3-128">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="6ead3-129">Задача, представляющая асинхронную операцию удаления.</span><span class="sxs-lookup"><span data-stu-id="6ead3-129">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-130">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="6ead3-130">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="6ead3-131">В случае с потоком поток данных записывает данные в поток и сбрасывает их.</span><span class="sxs-lookup"><span data-stu-id="6ead3-131">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="6ead3-132">Экземпляр <xref:System.Text.Json.Utf8JsonWriter> нельзя использовать повторно после удаления.</span><span class="sxs-lookup"><span data-stu-id="6ead3-132">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-133">Фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="6ead3-133">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-134">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="6ead3-134">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="6ead3-135">В случае <xref:System.IO.Stream>данные записываются в поток и сбрасываются.</span><span class="sxs-lookup"><span data-stu-id="6ead3-135">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6ead3-136">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="6ead3-136">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="6ead3-137">Токен для отслеживания запросов отмены.</span><span class="sxs-lookup"><span data-stu-id="6ead3-137">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="6ead3-138">Значение по умолчанию — <see cref="T:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-138">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="6ead3-139">Асинхронно фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</span><span class="sxs-lookup"><span data-stu-id="6ead3-139">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="6ead3-140">Задача, представляющая асинхронную операцию освобождения.</span><span class="sxs-lookup"><span data-stu-id="6ead3-140">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-141">В случае с Ибуффервритер он перемещает базовый <xref:System.Buffers.IBufferWriter`1> в зависимости от того, что было написано ранее.</span><span class="sxs-lookup"><span data-stu-id="6ead3-141">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="6ead3-142">В случае <xref:System.IO.Stream>эти данные записываются в поток и очищаются асинхронно, при этом отслеживаются запросы на отмену.</span><span class="sxs-lookup"><span data-stu-id="6ead3-142">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6ead3-143">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="6ead3-143">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ead3-144">Возвращает пользовательский режим записи JSON с использованием этого экземпляра, который определяет, необходимо ли форматировать выходные данные при записи, следует ли пропускать структурную проверку JSON и какие символы экранировановать.</span><span class="sxs-lookup"><span data-stu-id="6ead3-144">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.</span></span></summary>
        <value><span data-ttu-id="6ead3-145">Пользовательское поведение данного экземпляра модуля записи для форматирования, проверки и экранирования.</span><span class="sxs-lookup"><span data-stu-id="6ead3-145">The custom behavior of this instance of the writer for formatting, validating, and escaping.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-146">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно.</span><span class="sxs-lookup"><span data-stu-id="6ead3-146">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-147"><xref:System.Text.Json.Utf8JsonWriter> будет продолжать использовать исходные параметры модуля записи и исходные выходные данные (<xref:System.Buffers.IBufferWriter`1> или <xref:System.IO.Stream>) в качестве места назначения.</span><span class="sxs-lookup"><span data-stu-id="6ead3-147">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6ead3-148">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="6ead3-148">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="6ead3-149">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-149">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="6ead3-150">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-150">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-151"><xref:System.Text.Json.Utf8JsonWriter> продолжит использовать исходные параметры модуля записи, но теперь записывает в `bufferWriter` в качестве нового назначения.</span><span class="sxs-lookup"><span data-stu-id="6ead3-151">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-152">Свойство <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-152"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6ead3-153">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="6ead3-153">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="6ead3-154">Назначение для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-154">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="6ead3-155">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-155">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-156"><xref:System.Text.Json.Utf8JsonWriter> продолжит использовать исходные параметры модуля записи, но теперь записывает в `utf8Json` в качестве нового назначения.</span><span class="sxs-lookup"><span data-stu-id="6ead3-156">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-157">Свойство <paramref name="utf8Json" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-157"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6ead3-158">Этот экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="6ead3-158">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-159">Имя записываемого свойства в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-159">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="6ead3-160">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="6ead3-160">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="6ead3-161">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-161">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-162">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="6ead3-162">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="6ead3-163">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-163">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="6ead3-164">Имя свойства преобразуется в escape-последовательность, а байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-164">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-165">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-165">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-166">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-166">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-167">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-167">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="6ead3-168">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="6ead3-168">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="6ead3-169">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-169">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-170">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="6ead3-170">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="6ead3-171">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-171">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="6ead3-172">Имя свойства преобразуется в escape-последовательность, а байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-172">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-173">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-173">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-174">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-174">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-175">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-175">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="6ead3-176">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="6ead3-176">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="6ead3-177">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-177">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-178">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="6ead3-178">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="6ead3-179">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-179">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="6ead3-180">Имя свойства преобразуется в escape-последовательность, а байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-180">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-181">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-181">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-182">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-182">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-183">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-183">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-184">Имя записываемого свойства в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-184">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="6ead3-185">Двоичные данные для записи в виде текста в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="6ead3-185">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="6ead3-186">Записывает заранее закодированное имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-186">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-187">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="6ead3-187">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="6ead3-188">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-188">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="6ead3-189">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-189">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-190">Байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-190">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-191">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-191">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-192">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-192">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="6ead3-193">Двоичные данные, которые нужно записать в виде строкового элемента JSON массива JSON в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="6ead3-193">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-194">Записывает необработанные байты (в виде строки JSON в кодировке Base64) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-194">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-195">Максимально допустимый размер двоичных данных для записи в формате Base64 составляет 125 000 000 байт (или приблизительно 125 МБ).</span><span class="sxs-lookup"><span data-stu-id="6ead3-195">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="6ead3-196">Превышение этого ограничения приводит к возникновению <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-196">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="6ead3-197">Байты кодируются перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-197">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-198">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-198">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-199">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-199">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-200">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-200">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-201">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-201">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-202">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-202">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-203">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-203">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-204">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-204">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-205">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-205">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-206">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-206">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-207">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-207">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-208">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-208">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-209">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-209">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-210">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-210">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-211">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-211">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-212">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-212">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-213">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-213">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-214">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-214">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-215">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-215">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-216">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-216">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-217">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-217">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-218">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-218">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-219">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-219">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-220">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-220">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-221">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-221">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-222">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-222">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-223">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-223">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-224">Значение, которое нужно записать в виде литерала JSON <b>true</b> или <b>false</b> в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-224">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-225">Записывает значение <see cref="T:System.Boolean" /> (в виде литерала JSON <b>true</b> или <b>false</b>) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-225">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-226">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-226">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="6ead3-227">Значение в кодировке UTF-8, записываемое в виде комментария JSON, заключенного в `/*..*/`.</span><span class="sxs-lookup"><span data-stu-id="6ead3-227">The UTF-8 encoded value to be written as a JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="6ead3-228">Записывает текстовое значение UTF-8 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-228">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-229">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-229">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-230">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-230">The specified value is too large.</span></span>
        
<span data-ttu-id="6ead3-231">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-231">-or-</span></span>

<span data-ttu-id="6ead3-232"><paramref name="utf8Value" /> содержит разделитель комментария (`*/`).</span><span class="sxs-lookup"><span data-stu-id="6ead3-232"><paramref name="utf8Value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-233">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в `/*..*/`.</span><span class="sxs-lookup"><span data-stu-id="6ead3-233">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="6ead3-234">Записывает текстовое значение UTF-16 в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-234">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-235">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-235">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-236">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-236">The specified value is too large.</span></span>
        
<span data-ttu-id="6ead3-237">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-237">-or-</span></span>

<span data-ttu-id="6ead3-238"><paramref name="value" /> содержит разделитель комментария (`*/`).</span><span class="sxs-lookup"><span data-stu-id="6ead3-238"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-239">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в `/*..*/`.</span><span class="sxs-lookup"><span data-stu-id="6ead3-239">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="6ead3-240">Записывает строковое текстовое значение в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-240">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-241">Значение комментария не будет экранировано перед записью.</span><span class="sxs-lookup"><span data-stu-id="6ead3-241">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-242">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-242">The specified value is too large.</span></span>
        
<span data-ttu-id="6ead3-243">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-243">-or-</span></span>

<span data-ttu-id="6ead3-244"><paramref name="value" /> содержит разделитель комментария (`*/`).</span><span class="sxs-lookup"><span data-stu-id="6ead3-244"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-245">Параметр <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-245">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-246">Записывает конец массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-246">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-247">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-247">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-248">Записывает конец объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-248">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-249">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-249">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-250">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-250">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="6ead3-251">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-251">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-252">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-252">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-253">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-253">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-254">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-254">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-255">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-255">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-256">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-256">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-257">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-257">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-258">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-258">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-259">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-259">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-260">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-260">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-261">Записывает имя свойства, указываемое как строка, и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-261">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-262">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-262">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-263">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-264">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-265">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-265">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-266">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-266">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-267">Записывает заранее закодированное имя свойства и литерал JSON <b>null</b> в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-267">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-268">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-268">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-269">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-269">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-270">Записывает литерал JSON <b>null</b> в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-270">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-271">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-271">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-272">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-272">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-273">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-273">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-274">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-274">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="6ead3-275">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="6ead3-275">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="6ead3-276">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-276">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-277">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-277">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-278">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-278">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-279">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-279">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-280">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-280">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-281">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-281">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-282">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-282">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-283">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-283">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="6ead3-284">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-284">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-285">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-285">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-286">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-286">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-287">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-287">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-288">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-288">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-289">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-289">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-290">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-290">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-291">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-291">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-292">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-292">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-293">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-293">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-294">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-294">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-295">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-295">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-296">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-296">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-297">Записывает <xref:System.Int64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-297">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-298">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-298">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-299">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-299">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-300">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-300">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-301">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-301">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-302">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-302">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-303">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-303">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-304">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-304">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-305">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-305">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="6ead3-306">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-306">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-307">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-307">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-308">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-308">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-309">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-309">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-310">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-310">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-311">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-311">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-312">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-312">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-313">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-313">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-314">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-314">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-315">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-315">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-316">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-316">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-317">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-317">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-318">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-318">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-319">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-319">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-320">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-320">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-321">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-321">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-322">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-322">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-323">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-323">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-324">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-324">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-325">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-325">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-326">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="6ead3-326">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="6ead3-327">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-327">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-328">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-328">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-329">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-329">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-330">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-330">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-331">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-331">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-332">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-332">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-333">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-333">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-334">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-334">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="6ead3-335">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-335">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-336">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-336">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-337">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-337">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-338">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-338">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-339">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-339">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-340">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-340">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-341">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-341">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-342">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-342">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-343">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-343">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-344">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-344">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-345">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-345">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-346">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-346">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-347">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-347">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-348">Записывает <xref:System.Int64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-348">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-349">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-349">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-350">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-350">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-351">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-351">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-352">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-352">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-353">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-353">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-354">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-354">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-355">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-355">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-356">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-356">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="6ead3-357">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-357">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-358">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-358">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-359">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-359">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-360">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-360">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-361">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-361">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-362">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-362">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-363">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-363">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-364">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-364">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-365">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-365">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-366">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-366">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-367">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-367">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-368">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-368">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-369">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-369">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-370">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-370">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-371">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-371">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-372">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-372">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-373">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-373">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-374">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-374">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-375">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-375">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-376">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-376">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-377">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="6ead3-377">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="6ead3-378">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-378">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-379">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-379">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-380">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-380">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-381">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-381">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-382">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-382">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-383">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-383">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-384">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-384">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-385">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-385">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-386">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-386">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="6ead3-387">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-387">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-388">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-388">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-389">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-389">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-390">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-390">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-391">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-391">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-392">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-392">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-393">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-393">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-394">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-394">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-395">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-395">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-396">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-396">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-397">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-397">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-398">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-398">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-399">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-399">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-400">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-400">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-401">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-401">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-402">Записывает <xref:System.Int64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-402">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-403">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-403">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-404">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-404">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-405">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-405">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-406">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-406">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-407">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-407">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-408">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-408">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-409">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-409">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-410">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-410">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-411">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-411">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="6ead3-412">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-412">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-413">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-413">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-414">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-414">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-415">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-415">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-416">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-416">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-417">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-417">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-418">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-418">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-419">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-419">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-420">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-420">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-421">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-421">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-422">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-422">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-423">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-423">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-424">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-424">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-425">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-425">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-426">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-426">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-427">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-427">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-428">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-428">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-429">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-429">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-430">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-430">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-431">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-431">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-432">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-432">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-433">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-433">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-434">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-434">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-435">Записывает <xref:System.Decimal> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»).</span><span class="sxs-lookup"><span data-stu-id="6ead3-435">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="6ead3-436">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-436">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-437">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-437">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-438">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-438">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-439">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-439">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-440">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-440">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-441">Записывает <xref:System.Double> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-441">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-442">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-442">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="6ead3-443">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-443">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-444">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-444">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-445">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-445">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-446">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-446">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-447">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-447">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-448">Записывает <xref:System.Int32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-448">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-449">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-449">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-450">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-450">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-451">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-451">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-452">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-452">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-453">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-453">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-454">Записывает <xref:System.Int64>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G"); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-454">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-455">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-455">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-456">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-456">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-457">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-457">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-458">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-458">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-459">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-459">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-460">Записывает <xref:System.Single> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-460">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-461">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-461">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="6ead3-462">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-462">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-463">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-463">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-464">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-464">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-465">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-465">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-466">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-466">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-467">Записывает <xref:System.UInt32> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-467">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-468">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-468">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-469">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-469">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-470">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-470">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-471">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-471">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-472">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-472">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-473">Записывает <xref:System.UInt64> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (т. е. «G»); Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-473">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="6ead3-474">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-474">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-475">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-475">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-476">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-476">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-477">Записывает значение <see cref="T:System.Decimal" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-477">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-478">Этот метод записывает значение <xref:System.Decimal>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="6ead3-478">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-479">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-479">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-480">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-480">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-481">Записывает значение <see cref="T:System.Double" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-481">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-482">Этот метод записывает значение <xref:System.Double>, используя <xref:System.Buffers.StandardFormat> по умолчанию (то есть "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-482">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-483">Использует "G17" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-483">Uses 'G17' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-484">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-484">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-485">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-485">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-486">Записывает значение <see cref="T:System.Int32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-486">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-487">Этот метод записывает значение <xref:System.Int32>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="6ead3-487">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="6ead3-488">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-488">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-489">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-489">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-490">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-490">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-491">Записывает значение <see cref="T:System.Int64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-491">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-492">Этот метод записывает значение <xref:System.Int64>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="6ead3-492">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="6ead3-493">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-493">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-494">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-494">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-495">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-495">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-496">Записывает значение <see cref="T:System.Single" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-496">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-497">Этот метод записывает значение <xref:System.Single>, используя <xref:System.Buffers.StandardFormat> по умолчанию (то есть "G") в .NET Core 3,0 или более поздних версиях.</span><span class="sxs-lookup"><span data-stu-id="6ead3-497">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="6ead3-498">Использует "G9" в любой другой платформе.</span><span class="sxs-lookup"><span data-stu-id="6ead3-498">Uses 'G9' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-499">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-499">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-500">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-500">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-501">Записывает значение <see cref="T:System.UInt32" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-501">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-502">Этот метод записывает значение <xref:System.UInt32>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="6ead3-502">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="6ead3-503">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-503">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-504">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-504">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-505">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-505">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-506">Записывает значение <see cref="T:System.UInt64" /> (в виде числа JSON) как элемент массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-506">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-507">Этот метод записывает значение <xref:System.UInt64>, используя <xref:System.Buffers.StandardFormat> по умолчанию (т. е. "G").</span><span class="sxs-lookup"><span data-stu-id="6ead3-507">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="6ead3-508">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="6ead3-508">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-509">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-509">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-510">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-510">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="6ead3-511">Записывает имя свойства в кодировке UTF-8 (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-511">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-512">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-512">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-513">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-513">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-514">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-514">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-515">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-515">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-516">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-516">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-517">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-517">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-518">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-518">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-519">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-519">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-520">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-520">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-521">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-521">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-522">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-522">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-523">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-523">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-524">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-524">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-525">Свойство <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-525"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-526">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-526">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-527">Записывает заранее закодированное имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-527">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-528">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-528">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-529">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-529">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-530">Записывает начало массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-530">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-531">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-531">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="6ead3-532">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-532">-or-</span></span>

<span data-ttu-id="6ead3-533">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-533">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-534">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-534">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="6ead3-535">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-535">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-536">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-536">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-537">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-537">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-538">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-538">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="6ead3-539">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-539">-or-</span></span>
       
<span data-ttu-id="6ead3-540">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-540">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-541">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-541">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-542">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-542">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-543">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-543">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-544">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-544">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-545">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-545">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="6ead3-546">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-546">-or-</span></span>
       
<span data-ttu-id="6ead3-547">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-547">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-548">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-548">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-549">Записывает начало массива JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-549">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-550">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-550">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-551">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-551">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-552">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-552">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="6ead3-553">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-553">-or-</span></span>
       
<span data-ttu-id="6ead3-554">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-554">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-555">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-555">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-556">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-556">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-557">Записывает начало массива JSON с заранее закодированным именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-557">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-558">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-558">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-559">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-559">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
    
<span data-ttu-id="6ead3-560">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-560">-or-</span></span>

<span data-ttu-id="6ead3-561">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-561">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ead3-562">Записывает начало объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-562">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-563">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-563">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="6ead3-564">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-564">-or-</span></span>

<span data-ttu-id="6ead3-565">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-565">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-566">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-566">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="6ead3-567">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-567">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-568">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-568">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-569">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-569">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-570">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-570">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="6ead3-571">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-571">-or-</span></span>
       
<span data-ttu-id="6ead3-572">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-572">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-573">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-573">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-574">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-574">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-575">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-575">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-576">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-576">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-577">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-577">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="6ead3-578">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-578">-or-</span></span>
       
<span data-ttu-id="6ead3-579">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-579">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-580">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-580">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-581">Записывает начало объекта JSON с именем свойства, указанным как строка, в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-581">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-582">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-582">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-583">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-583">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-584">Глубина JSON превышает максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-584">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="6ead3-585">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-585">-or-</span></span>
       
<span data-ttu-id="6ead3-586">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-586">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-587">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-587">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-588">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-588">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="6ead3-589">Записывает начало объекта JSON с заранее закодированным именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="6ead3-589">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-590">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-590">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-591">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-591">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
          
<span data-ttu-id="6ead3-592">-или-</span><span class="sxs-lookup"><span data-stu-id="6ead3-592">-or-</span></span>

<span data-ttu-id="6ead3-593">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-593">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-594">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-594">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-595">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-595">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-596">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-596">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-597">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-597">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="6ead3-598">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-598">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-599">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-599">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-600">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-600">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-601">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-601">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-602">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-602">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-603">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-603">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-604">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="6ead3-604">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="6ead3-605">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-605">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-606">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-606">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-607">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-607">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-608">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-608">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-609">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-609">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-610">Записывает имя свойства UTF-8 и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-610">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-611">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="6ead3-611">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="6ead3-612">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-612">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-613">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-613">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-614">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-614">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-615">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-615">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="6ead3-616">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-616">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-617">Записывает имя свойства UTF-8 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-617">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-618">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-618">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-619">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-619">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-620">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-620">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-621">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-621">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-622">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-622">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-623">Записывает имя свойства UTF-8 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-623">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-624">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-624">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-625">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-625">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-626">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-626">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-627">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-627">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-628">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-628">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-629">Записывает имя свойства UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-629">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-630">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-630">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="6ead3-631">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-631">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-632">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-632">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-633">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-633">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="6ead3-634">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-634">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-635">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-635">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-636">Записывает имя свойства в кодировке UTF-8 и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-636">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-637">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-637">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-638">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-638">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-639">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-639">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-640">Проверка включена, и этот метод приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-640">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-641">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-641">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-642">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-642">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-643">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-643">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-644">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-644">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="6ead3-645">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-645">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-646">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-646">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-647">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-647">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-648">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-648">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-649">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-649">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-650">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-650">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-651">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="6ead3-651">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="6ead3-652">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-652">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-653">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-653">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-654">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-654">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-655">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-655">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-656">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-656">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-657">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-657">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-658">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="6ead3-658">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="6ead3-659">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-659">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-660">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-660">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-661">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-661">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-662">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-662">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="6ead3-663">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-663">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-664">Записывает имя свойства UTF-16 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-664">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-665">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-665">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-666">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-666">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-667">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-667">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-668">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-668">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-669">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-669">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-670">Записывает имя свойства UTF-16 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-670">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-671">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-671">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-672">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-672">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-673">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-673">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-674">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-674">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-675">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-675">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-676">Записывает имя свойства UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-676">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-677">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-677">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="6ead3-678">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-678">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-679">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-679">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-680">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-680">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-681">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-681">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-682">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-682">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-683">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-683">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-684">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-684">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-685">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-685">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-686">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-686">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-687">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-687">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-688">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-688">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-689">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-689">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-690">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-690">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-691">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-691">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="6ead3-692">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-692">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-693">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-693">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-694">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-694">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-695">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-695">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-696">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-696">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-697">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-697">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-698">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-698">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-699">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="6ead3-699">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="6ead3-700">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-700">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-701">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-701">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-702">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-702">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-703">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-703">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-704">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-704">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-705">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-705">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-706">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-706">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-707">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="6ead3-707">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="6ead3-708">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-708">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-709">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-709">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-710">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-710">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-711">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-711">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-712">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-712">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="6ead3-713">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-713">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-714">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-714">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-715">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-715">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-716">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-716">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-717">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-717">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-718">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-718">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-719">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-719">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-720">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-720">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-721">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-721">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-722">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-722">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-723">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-723">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-724">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-724">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-725">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-725">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-726">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-726">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-727">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-727">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-728">Записывает имя свойства, указываемое как строка, и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-728">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-729">Имя и значение свойства перед записью преобразуются в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-729">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="6ead3-730">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-730">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-731">Имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-731">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-732">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-732">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-733">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-733">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-734">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-734">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-735">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-735">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-736">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-736">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-737">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-737">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-738">Перед записью имя свойства помещается в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-738">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-739">Имя указанного свойства слишком длинное.</span><span class="sxs-lookup"><span data-stu-id="6ead3-739">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-740">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-740">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6ead3-741">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6ead3-741">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-742">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-742">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-743">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-743">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-744">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-744">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-745">Записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-745">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="6ead3-746">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-746">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-747">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-747">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-748">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-748">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-749">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-749">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-750">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-750">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-751">Записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="6ead3-751">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="6ead3-752">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-752">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-753">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-753">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-754">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-754">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-755">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-755">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-756">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-756">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-757">Записывает <xref:System.Guid> с использованием <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d") в формате: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="6ead3-757">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="6ead3-758">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-758">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-759">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-759">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-760">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-760">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="6ead3-761">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="6ead3-761">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-762">Записывает заранее закодированное имя свойства и текстовое значение в UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-762">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-763">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-763">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-764">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="6ead3-764">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-765">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-765">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-766">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-766">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-767">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-767">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-768">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-768">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-769">Записывает заранее закодированное имя свойства и текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-769">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-770">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-770">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-771">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="6ead3-771">The value is escaped before writing.</span></span>

<span data-ttu-id="6ead3-772">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-772">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-773">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-773">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-774">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-774">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-775">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-775">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-776">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-776">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-777">Записывает заранее закодированное имя свойства и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-777">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-778">Имя свойства уже должно быть экранировано при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-778">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="6ead3-779">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="6ead3-779">The value is escaped before writing.</span></span>

<span data-ttu-id="6ead3-780">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-780">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-781">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-781">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-782">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-782">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="6ead3-783">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-783">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="6ead3-784">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</span><span class="sxs-lookup"><span data-stu-id="6ead3-784">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="6ead3-785">Записывает заранее закодированные имя свойства и значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-785">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-786">Имя и значение свойства должны быть преобразованы в escape-последовательность при создании экземпляра <xref:System.Text.Json.JsonEncodedText>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-786">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-787">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-787">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-788">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-788">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-789">Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-789">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-790">Этот метод записывает <xref:System.DateTime> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="6ead3-790">This method writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-791">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-791">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-792">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-792">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-793">Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-793">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-794">Этот метод записывает <xref:System.DateTimeOffset> с помощью расширенного формата ISO 8601-1 (см. раздел [Поддержка DateTime и DateTimeOffset в System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)); Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="6ead3-794">This method writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-795">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-795">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-796">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-796">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-797">Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-797">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-798">Этот метод записывает значение <xref:System.Guid>, используя <xref:System.Buffers.StandardFormat> по умолчанию (то есть "d"), в виде: nnnnnnnn-NNNN-NNNN-NNNN-нннннннннннн.</span><span class="sxs-lookup"><span data-stu-id="6ead3-798">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-799">Проверка включена, и операция приведет к записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-799">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="6ead3-800">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="6ead3-800">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-801">Записывает текстовое значение UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-801">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-802">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="6ead3-802">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-803">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-803">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-804">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-804">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-805">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-805">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-806">Записывает текстовое значение UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-806">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-807">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="6ead3-807">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-808">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-808">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-809">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-809">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-810">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="6ead3-810">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-811">Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-811">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="6ead3-812">Перед записью это значение экранировано.</span><span class="sxs-lookup"><span data-stu-id="6ead3-812">The value is escaped before writing.</span></span>

<span data-ttu-id="6ead3-813">Если `value` `null`, то значение JSON **null** записывается, как если бы был вызван метод <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue>.</span><span class="sxs-lookup"><span data-stu-id="6ead3-813">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6ead3-814">Указанное значение слишком велико.</span><span class="sxs-lookup"><span data-stu-id="6ead3-814">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-815">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-815">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6ead3-816">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-816">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="6ead3-817">Записывает заранее закодированное значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-817">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6ead3-818">При создании экземпляра <xref:System.Text.Json.JsonEncodedText> значение должно быть преобразовано в escape-последовательность.</span><span class="sxs-lookup"><span data-stu-id="6ead3-818">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ead3-819">Проверка включена, и операция записи приведет к получению недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="6ead3-819">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
