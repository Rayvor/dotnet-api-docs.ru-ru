<Type Name="JsonDocument" FullName="System.Text.Json.JsonDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7cb6573dc8ebcc99bc57891401b7523f4130c8d6" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66457996" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonDocument : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonDocument extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonDocument&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonDocument sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type JsonDocument = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет механизм для проверки структурного содержимого значения JSON без автоматического создания экземпляров для значений данных.</summary>
    <remarks>
      <format><![CDATA[
      
Этот класс использует ресурсы из пула памяти, чтобы свести к минимуму влияние сборщик мусора (GC) в сценариях интенсивного использования. Не удалось правильно удалить этот объект приведет к памяти, не возвращается в пул, это приведет к увеличению влияние сборки Мусора в различных частях платформы.
              
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="jsonDocument.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.Buffers.ReadOnlySequence&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlySequence(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Анализируемый текст JSON.</param>
        <param name="readerOptions">Параметры для управления поведением модуля чтения во время анализа.</param>
        <summary>Анализирует последовательность в виде текста в кодировке UTF-8, представляющего отдельное байтовое значение JSON в JsonDocument.</summary>
        <returns>Представление JsonDocument данного значения JSON.</returns>
        <remarks>
          <format><![CDATA[
          
<xref:System.Buffers.ReadOnlySequence%601> Может использоваться в течение всего времени существования объекта JsonDocument, и вызывающий объект должен убедиться, что данные этой последовательности не изменяется во время существования объекта.
               
Так как считается, что входные данные текст, метка порядка байтов UTF-8 (BOM) не должно быть.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As Stream, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.IO.Stream * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Анализируемые данные JSON.</param>
        <param name="readerOptions">Параметры для управления поведением модуля чтения во время анализа.</param>
        <summary>Анализирует <see cref="T:System.IO.Stream" /> в виде данных в кодировке UTF-8, представляющих отдельное значение JSON в JsonDocument. Поток считывается до завершения.</summary>
        <returns>Представление JsonDocument данного значения JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlyMemory(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Анализируемый текст JSON.</param>
        <param name="readerOptions">Параметры для управления поведением модуля чтения во время анализа.</param>
        <summary>Анализирует память в виде текста в кодировке UTF-8, представляющего отдельное байтовое значение JSON в JsonDocument.</summary>
        <returns>Представление JsonDocument данного значения JSON.</returns>
        <remarks>
          <format><![CDATA[

<xref:System.ReadOnlyMemory%601> Значение будет использоваться в течение всего времени существования объекта JsonDocument и вызывающий объект должен убедиться, что данные этой последовательности не изменяется во время существования объекта.

Так как считается, что входные данные текст, метка порядка байтов UTF-8 (BOM) не должно быть.
                 
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;char&gt; json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;char&gt; json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As ReadOnlyMemory(Of Char), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;char&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Анализируемый текст JSON.</param>
        <param name="readerOptions">Параметры для управления поведением модуля чтения во время анализа.</param>
        <summary>Анализирует текст, представляющий отдельное символьное значение JSON в JsonDocument.</summary>
        <returns>Представление JsonDocument данного значения JSON.</returns>
        <remarks>
          <format><![CDATA[
          
<xref:System.ReadOnlyMemory%601> Значение может использоваться в течение всего времени существования объекта JsonDocument и вызывающий объект должен убедиться, что данные этой последовательности не изменяется во время существования объекта.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> не представляет допустимое отдельное значение JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (string json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(string json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As String, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Анализируемый текст JSON.</param>
        <param name="readerOptions">Параметры для управления поведением модуля чтения во время анализа.</param>
        <summary>Анализирует текст, представляющий отдельное строковое значение JSON в JsonDocument.</summary>
        <returns>Представление JsonDocument данного значения JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> не представляет допустимое отдельное значение JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt; ParseAsync (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Text.Json.JsonDocument&gt; ParseAsync(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseAsync : System.IO.Stream * System.Text.Json.JsonReaderOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;" Usage="System.Text.Json.JsonDocument.ParseAsync (utf8Json, readerOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Анализируемые данные JSON.</param>
        <param name="readerOptions">Параметры для управления поведением модуля чтения во время анализа.</param>
        <param name="cancellationToken">Токен для отслеживания запросов отмены.</param>
        <summary>Анализирует <see cref="T:System.IO.Stream" /> в виде данных в кодировке UTF-8, представляющих отдельное значение JSON в JsonDocument. Поток считывается до завершения.</summary>
        <returns>Задача по созданию представления JsonDocument данного значения JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument ParseValue (ref System.Text.Json.Utf8JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument ParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseValue (ByRef reader As Utf8JsonReader) As JsonDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonDocument ^ ParseValue(System::Text::Json::Utf8JsonReader % reader);" />
      <MemberSignature Language="F#" Value="static member ParseValue :  -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.ParseValue reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="reader">Модуль чтения, используемый для чтения.</param>
        <summary>Анализирует одно значение JSON (включая объекты или массивы) из указанного модуля чтения.</summary>
        <returns>JsonDocument, представляющий значение (и вложенные значения), считанное из модуля чтения.</returns>
        <remarks>
          <format><![CDATA[

Если <xref:System.Text.Json.Utf8JsonReader.TokenType> свойство `reader` — <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, средство чтения перейдет на один вызов к <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> для определения начала значения.
               
После завершения этого метода `reader` расположен в окончательном маркере в значение JSON. Если создается исключение, средство чтения сбрасывается до состояния, в котором она находилась на момент вызова метода.
               
Этот метод создается копия данных чтения действовала, поэтому нет необходимости для обеспечения целостности данных после возврата этого метода вызывающий объект.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> содержит неподдерживаемые параметры.</exception>
        <exception cref="T:System.Text.Json.JsonException">Не удалось считать значение из модуля чтения.</exception>
      </Docs>
    </Member>
    <Member MemberName="RootElement">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement RootElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement RootElement" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocument.RootElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootElement As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement RootElement { System::Text::Json::JsonElement get(); };" />
      <MemberSignature Language="F#" Value="member this.RootElement : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonDocument.RootElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает корневой элемент этого документа JSON.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseValue">
      <MemberSignature Language="C#" Value="public static bool TryParseValue (ref System.Text.Json.Utf8JsonReader reader, out System.Text.Json.JsonDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader, [out] class System.Text.Json.JsonDocument&amp; document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseValue (ByRef reader As Utf8JsonReader, ByRef document As JsonDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseValue(System::Text::Json::Utf8JsonReader % reader, [Runtime::InteropServices::Out] System::Text::Json::JsonDocument ^ % document);" />
      <MemberSignature Language="F#" Value="static member TryParseValue :  *  -&gt; bool" Usage="System.Text.Json.JsonDocument.TryParseValue (reader, document)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="document" Type="System.Text.Json.JsonDocument" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">Модуль чтения, используемый для чтения.</param>
        <param name="document">Когда этот метод возвращает данные, содержит анализируемый документ.</param>
        <summary>Пытается проанализировать одно значение JSON (включая объекты или массивы) из указанного модуля чтения.</summary>
        <returns>Значение <see langword="true" />, если значение было считано и проанализировано в JsonDocument; значение <see langword="false" />, если модулю чтения не хватило данных во время анализа. Во всех других ситуациях возникает исключение.</returns>
        <remarks>
          <format><![CDATA[
          
Если <xref:System.Text.Json.Utf8JsonReader.TokenType> свойство `reader` — <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> или <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, средство чтения перейдет на один вызов к <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> для определения начала значения.
               
После завершения этого метода `reader` расположен в окончательном маркере в значение JSON. Если возникает исключение или `false` возвращается, средство чтения сбрасывается в состояние на момент вызова метода.
               
Этот метод создается копия данных чтения действовала, поэтому нет необходимости для обеспечения целостности данных после возврата этого метода вызывающий объект.
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> содержит неподдерживаемые параметры.</exception>
        <exception cref="T:System.Text.Json.JsonException">Не удалось считать значение из модуля чтения.</exception>
      </Docs>
    </Member>
  </Members>
</Type>