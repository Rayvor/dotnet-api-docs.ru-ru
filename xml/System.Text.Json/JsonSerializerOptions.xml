<Type Name="JsonSerializerOptions" FullName="System.Text.Json.JsonSerializerOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29f48122a3b22234a411d5fe7813934edaca2ca2" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74388163" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonSerializerOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonSerializerOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializerOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonSerializerOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializerOptions sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializerOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет параметры для использования с <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри десериализуемых полезных данных JSON.</summary>
        <value><see langword="true" />, разрешена ли лишняя запятая в конце списка значений JSON в объекте или массиве (и игнорируется); в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

По умолчанию `AllowTrailingCommas` имеет значение `false`, а при десериализации вызывается <xref:System.Text.Json.JsonException>, если обнаружена конечная запятая.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas).

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      </Docs>
    </Member>
    <Member MemberName="Converters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt; Converters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Text.Json.Serialization.JsonConverter&gt; Converters" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Converters As IList(Of JsonConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ Converters { System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Converters : System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;" Usage="System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает список зарегистрированных пользовательских преобразователей.</summary>
        <value>Список пользовательских преобразователей.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

После сериализации или десериализации список изменить нельзя.

Дополнительные сведения см. в статье Создание [пользовательских преобразователей](~/docs/standard/serialization/system-text-json-converters-how-to.md#registration-sample---converters-collection).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBufferSize">
      <MemberSignature Language="C#" Value="public int DefaultBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DefaultBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBufferSize : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает размер буфера по умолчанию (в байтах), используемый при создании временных буферов.</summary>
        <value>Размер буфера по умолчанию в байтах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Размер буфера по умолчанию (в байтах) — 16 384.
Для большинства рабочих нагрузок размер по умолчанию является разумным объемом буфера JSON, который записывается в буфер при чтении из потока или записи в поток.
Это значит, что он хорошо работает без создания объектов в куче больших объектов для трассировки сборщика мусора (GC). В сценариях без потоковой передачи увеличение размера буфера по умолчанию может повысить производительность для больших строк JSON или массивов байтов UTF-8.
Рекомендуется оставить это значение без изменений, если оно не будет изменяться в производительности.


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Размер буфера меньше 1.</exception>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      </Docs>
    </Member>
    <Member MemberName="DictionaryKeyPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DictionaryKeyPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ DictionaryKeyPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DictionaryKeyPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает политику, используемую для преобразования имени ключа <see cref="T:System.Collections.IDictionary" /> в другой формат, например Camel.</summary>
        <value>Политика, используемая для преобразования имени <see cref="T:System.Collections.IDictionary" />ого ключа в другой формат.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Этому свойству можно присвоить значение <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType>, чтобы указать политику в стиле Camel.

Этому свойству можно присвоить значение <xref:System.Text.Json.JsonNamingPolicy.CamelCase>, чтобы указать политику в стиле Camel.

Он не используется при десериализации.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#camel-case-dictionary-keys).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или устанавливает кодировщик, используемый при экранировании строк. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</summary>
        <value>Кодировка символов JavaScript.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-character-encoding).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonConverter GetConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Json.Serialization.JsonConverter GetConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::Serialization::JsonConverter ^ GetConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="member this.GetConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonSerializerOptions.GetConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert">Тип, для которого возвращается преобразователь.</param>
        <summary>Возвращает преобразователь для указанного типа.</summary>
        <returns>Первый преобразователь, который поддерживает заданный тип, или значение <see langword="null" />, если преобразовать отсутствует.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#sample-factory-pattern-converter).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreNullValues">
      <MemberSignature Language="C#" Value="public bool IgnoreNullValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreNullValues" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreNullValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreNullValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreNullValues : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, пропускаются ли значения <see langword="null" /> во время сериализации и десериализации. Значение по умолчанию — <see langword="false" />.</summary>
        <value><see langword="true" /> игнорировать значения NULL во время сериализации и десериализации; в противном случае см. раздел langword = "false"/&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Дополнительные сведения см. в разделе [исключение всех свойств значений NULL](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-null-value-properties) и [пропуск значения NULL при десериализации](~/docs/standard/serialization/system-text-json-how-to.md#ignore-null-when-deserializing).

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreReadOnlyProperties">
      <MemberSignature Language="C#" Value="public bool IgnoreReadOnlyProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreReadOnlyProperties" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreReadOnlyProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreReadOnlyProperties { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreReadOnlyProperties : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, определяющее, пропускаются ли во время сериализации свойства, доступные только для чтения. Значение по умолчанию — <see langword="false" />.</summary>
        <value><see langword="true" /> пропускать свойства только для чтения во время сериализации; в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Свойство доступно только для чтения, если оно содержит открытый метод получения, но не является открытым методом задания. 

Свойства, доступные только для чтения, не десериализованы независимо от этого параметра.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-read-only-properties).

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает максимальную глубину, разрешенную при сериализации или десериализации JSON, при этом значение по умолчанию 0 указывает максимальную глубину 64.</summary>
        <value>Максимальная глубина, допустимая при сериализации или десериализации JSON.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

При переходе к предыдущей этой глубине возникает <xref:System.Text.Json.JsonException>.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Максимальной глубине присвоено отрицательное значение.</exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyNameCaseInsensitive">
      <MemberSignature Language="C#" Value="public bool PropertyNameCaseInsensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertyNameCaseInsensitive" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNameCaseInsensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PropertyNameCaseInsensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNameCaseInsensitive : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое определяет, использует ли имя свойства сравнение без учета регистра во время десериализации. Значение по умолчанию — <see langword="false" />.</summary>
        <value><see langword="true" /> для сравнения имен свойств с помощью сравнения без учета регистра; в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

При сравнении без учета регистра возникают затраты на производительность (т. е. когда `PropertyNameCaseInsensitive` `true`).

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#case-insensitive-property-matching).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNamingPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy PropertyNamingPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy PropertyNamingPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNamingPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ PropertyNamingPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNamingPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее политику, используемую для преобразования имени свойства объекта в другой формат, например "верблюжий" стиль, или <see langword="null" />, чтобы оставить имена свойств без изменений.</summary>
        <value>Политика именования свойств или <see langword="null" />, чтобы имена свойств не изменялись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Результирующее имя свойства должно соответствовать полезной нагрузке JSON во время десериализации и использоваться при записи имени свойства во время сериализации.

Политика не используется для свойств, к которым применен <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute>.

Этому свойству можно присвоить значение <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType>, чтобы указать политику в стиле Camel.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-json-names-and-values).

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling ReadCommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling ReadCommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadCommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling ReadCommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.ReadCommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, как комментарии обрабатываются во время десериализации.</summary>
        <value>Значение, указывающее, разрешены ли комментарии, запрещены или пропущены.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

По умолчанию при десериализации вызывается <xref:System.Text.Json.JsonException>, если встречается комментарий.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas).

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Перечисление обработки комментариев имеет значение, которое не поддерживается (или находится за пределами диапазона перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteIndented">
      <MemberSignature Language="C#" Value="public bool WriteIndented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteIndented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteIndented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteIndented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteIndented : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое определяет, должен ли JSON использовать автоматическое форматирование. По умолчанию JSON сериализуется без лишних пробелов.</summary>
        <value><see langword="true" />, если JSON довольно хорошо печатается при сериализации; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Качественная печать включает в себя: 

- Отступ вложенных маркеров JSON.
- Добавление новых строк
- Добавление пробелов между именами свойств и значениями. 

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#serialize-to-formatted-json).

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
