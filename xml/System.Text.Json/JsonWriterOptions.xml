<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8270a9c525bc30377883be59659e8effa4beabbc" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381092" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b06c0-101">Разрешает пользователю определить пользовательское поведение при чтении JSON с помощью <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="b06c0-101">Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b06c0-102">По умолчанию JSON записывается без отступов или лишних пробелов.</span><span class="sxs-lookup"><span data-stu-id="b06c0-102">By default, the JSON is written without any indentation or extra white space.</span></span> <span data-ttu-id="b06c0-103">Кроме того, <xref:System.Text.Json.Utf8JsonWriter> создает исключение, если пользователь пытается записать структурно недопустимый JSON.</span><span class="sxs-lookup"><span data-stu-id="b06c0-103">Also, <xref:System.Text.Json.Utf8JsonWriter> throws an exception if the user attempts to write structurally invalid JSON.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonWriterOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06c0-104">Возвращает или устанавливает кодировщик, используемый при экранировании строк. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="b06c0-104">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="b06c0-105">Кодировщик символов JavaScript, используемый для переопределения поведения экранирования.</span><span class="sxs-lookup"><span data-stu-id="b06c0-105">The JavaScript character encoder used to override the escaping behavior.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06c0-106">Возвращает или задает значение, указывающее, следует ли <see cref="T:System.Text.Json.Utf8JsonWriter" /> форматировать выходные данные JSON, включая добавление отступов для вложенных токенов JSON, добавление новых строк и добавление пробела между именами и значениями свойств.</span><span class="sxs-lookup"><span data-stu-id="b06c0-106">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</span></span></summary>
        <value><span data-ttu-id="b06c0-107"><see langword="true" /> для форматирования выходных данных JSON; <see langword="false" /> для записи без лишних пробелов.</span><span class="sxs-lookup"><span data-stu-id="b06c0-107"><see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space.</span></span> <span data-ttu-id="b06c0-108">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b06c0-108">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06c0-109">Возвращает или задает значение, указывающее, следует ли <see cref="T:System.Text.Json.Utf8JsonWriter" /> пропустить структурную проверку и разрешить пользователю записать недопустимую JSON.</span><span class="sxs-lookup"><span data-stu-id="b06c0-109">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</span></span></summary>
        <value><span data-ttu-id="b06c0-110"><see langword="true" /> пропустить структурную проверку и разрешить недопустимый код JSON; <see langword="false" /> создать <see cref="T:System.InvalidOperationException" /> при любой попытке записи недопустимого JSON.</span><span class="sxs-lookup"><span data-stu-id="b06c0-110"><see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b06c0-111">Если записываемый JSON-код является правильным, пропускается проверка (Установка этого свойства равным `true`) может повысить производительность.</span><span class="sxs-lookup"><span data-stu-id="b06c0-111">If the JSON being written is known to be correct, then skipping validation (by setting this property to `true`) could improve performance.</span></span>
<span data-ttu-id="b06c0-112">Пример недопустимого JSON, в котором средство записи создаст исключение (если `SkipValidation` имеет значение `false`), то при записи значения в объекте JSON без имени свойства.</span><span class="sxs-lookup"><span data-stu-id="b06c0-112">An example of invalid JSON where the writer will throw (when `SkipValidation` is set to `false`) is when you write a value within a JSON object without a property name.</span></span> 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
