<Type Name="JsonReaderOptions" FullName="System.Text.Json.JsonReaderOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a5750ac4e6b5decef92b119655166e9ad44b0a87" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381159" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderOptions" />
  <TypeSignature Language="F#" Value="type JsonReaderOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d9e66-101">Предоставляет пользователю возможность определить пользовательское поведение при чтении JSON.</span><span class="sxs-lookup"><span data-stu-id="d9e66-101">Provides the ability for the user to define custom behavior when reading JSON.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonReaderOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d9e66-102">Возвращает или задает значение, которое определяет, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри считываемых полезных данных JSON.</span><span class="sxs-lookup"><span data-stu-id="d9e66-102">Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.</span></span></summary>
        <value><span data-ttu-id="d9e66-103"><see langword="true" />, разрешена ли ексра запятая; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d9e66-103"><see langword="true" /> if an exra comma is allowed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d9e66-104">По умолчанию это свойство имеет значение `false`, а при обнаружении завершающей запятой возникает <xref:System.Text.Json.JsonException>.</span><span class="sxs-lookup"><span data-stu-id="d9e66-104">By default, this property is set to `false`, and a <xref:System.Text.Json.JsonException> is thrown if a trailing comma is encountered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling CommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling CommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.CommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling CommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.CommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonReaderOptions.CommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d9e66-105">Возвращает или задает значение, определяющее способ, с помощью которого <see cref="T:System.Text.Json.Utf8JsonReader" /> обрабатывает комментарии при чтении данных JSON.</span><span class="sxs-lookup"><span data-stu-id="d9e66-105">Gets or sets a value that determines how the <see cref="T:System.Text.Json.Utf8JsonReader" /> handles comments when reading through the JSON data.</span></span></summary>
        <value><span data-ttu-id="d9e66-106">Одно из значений перечисления, указывающее, как обрабатываются комментарии.</span><span class="sxs-lookup"><span data-stu-id="d9e66-106">One of the enumeration values that indicates how comments are handled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d9e66-107">По умолчанию средство чтения создает <xref:System.Text.Json.JsonException>, если обнаруживает комментарий.</span><span class="sxs-lookup"><span data-stu-id="d9e66-107">By default, the reader throws a <xref:System.Text.Json.JsonException> if it encounters a comment.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d9e66-108">Свойству присвоено значение, которое не является членом перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />.</span><span class="sxs-lookup"><span data-stu-id="d9e66-108">The property is being set to a value that is not a member of the <see cref="T:System.Text.Json.JsonCommentHandling" /> enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonReaderOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d9e66-109">Возвращает или задает максимальную глубину, разрешенную при чтении JSON, при этом значение по умолчанию (то есть 0) указывает максимальную глубину 64.</span><span class="sxs-lookup"><span data-stu-id="d9e66-109">Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.</span></span></summary>
        <value><span data-ttu-id="d9e66-110">Максимальная глубина, разрешенная при чтении JSON.</span><span class="sxs-lookup"><span data-stu-id="d9e66-110">The maximum depth allowed when reading JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d9e66-111">При чтении после этой глубины возникнет исключение <xref:System.Text.Json.JsonException>.</span><span class="sxs-lookup"><span data-stu-id="d9e66-111">Reading past this depth will throw a <xref:System.Text.Json.JsonException>.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d9e66-112">Для максимальной глубины задается отрицательное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e66-112">The maximum depth is being set to a negative value.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
