<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="134658575824ec7ab34ef310d545b4b8914b9306" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66380646" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет непрозрачный тип, содержащий и сохраняющий все соответствующие сведения о состоянии, которые необходимо предоставить <see cref="T:System.Text.Json.Utf8JsonReader" /> для продолжения чтения после обработки неполных данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`JsonReaderState` является обязательным для поддержки повторного входа, при чтении неполные данные и продолжить чтение после доступно больше данных. В отличие от <xref:System.Text.Json.Utf8JsonReader> структуры, которой является ссылочной структурой, этот тип может быть выдержать через границы async/await и таким образом это необходимо для обеспечения поддержки асинхронного чтения больше данных, прежде чем продолжить новый экземпляр класса <xref:System.Text.Json.Utf8JsonReader>.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="options">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON (то есть комментарии в JSON являются недопустимыми) и осуществляет чтение до максимальной глубины 64.</param>
        <summary>Формирует новый экземпляр <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
        <remarks>
          <format><![CDATA[
          
Экземпляр этого состояния должны быть переданы <xref:System.Text.Json.Utf8JsonReader> конструктор с данными JSON. В отличие от <xref:System.Text.Json.Utf8JsonReader>, который является ссылочной структурой, состояние может выдержать через границы async/await, и таким образом этот тип должен предоставить поддержку для чтения дополнительных данных асинхронно, перед продолжением новый экземпляр класса <xref:System.Text.Json.Utf8JsonReader>.
            
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для максимальной глубины задано значение, не являющееся положительным (&lt; 0).</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает общее число байтов, использованных <see cref="T:System.Text.Json.Utf8JsonReader" /> к настоящему времени для заданного входного текста в кодировке UTF-8.</summary>
        <value>Общее число байтов, используемое <see cref="T:System.Text.Json.Utf8JsonReader" /> данный момент.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает пользовательское поведение, применяемое при чтении данных JSON с помощью структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, которое может отклоняться от спецификации JSON, отражающей поведение по умолчанию.</summary>
        <value>Пользовательское поведение для использования при считывании данных JSON.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.JsonReaderState.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает текущий <see cref="T:System.SequencePosition" /> в рамках предоставленных входных данных ReadOnlySequence&lt;byte&gt; в кодировке UTF-8. Если структура <see cref="T:System.Text.Json.Utf8JsonReader" /> была создана с использованием ReadOnlySpan&lt;byte&gt;, этот параметр всегда возвращает значение по умолчанию <see cref="T:System.SequencePosition" />.</summary>
        <value>Текущий <see cref="T:System.SequencePosition" /> в предоставленный кодировке UTF-8 ввода ReadOnlySequence&lt;байтов&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>