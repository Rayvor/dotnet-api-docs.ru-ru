<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c95575203f50428a9a00c189c03e2ed637812f38" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64148200" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Вычисляет выражение во время анализа страницы.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.ExpressionBuilder> Класс является базовым классом для построители выражений, таких как <xref:System.Web.Compilation.AppSettingsExpressionBuilder> класс, от которого создать код выражения при синтаксическом анализе страницы.  
  
 Построители выражений анализируют декларативные выражения и создание кода для получения значений, связанное со свойством элемента управления. В сценариях без компиляции построитель выражений, поддерживающий функцию запрета компиляции вычисляет выражение во время выполнения.  
  
 Когда анализатор страниц встречается выражение, которое разделяется строкой `<%$ %>`, он создает построитель выражений для выражения на основе префикса в строке. Префикс является частью строка, которая находится слева от двоеточия (:). Например, в том случае, когда средство синтаксического анализа встречает строку `<%$ ConnectionStrings:MessageDB %>`, он создает <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> объекта. Префиксы связаны с построители выражений в файле Web.config в <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> разделе.  
  
 В правой части выражения декларативной передается построитель выражений для оценки. Переопределить <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> метод для создания кода, который будет скомпилирован со страницей.  
  
 Если вы хотите конструктора собственных выражений активен на страницы, которые не компилируются, необходимо также переопределить <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> метод возвращает объект, представляющий результаты выражения. Необходимо также переопределить <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> свойство, указывающее, что конструктора собственных выражений поддерживает некомпилируемых страницах.  
  
 Можно определить набор свойств и методов для выбора и вычисления выражения, связанный со свойством элемента управления во время разработки, реализовав редактор выражений. Редактор обозначается в построителе выражений посредством метаданных уровня класса. Дополнительные сведения см. в разделе <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание настраиваемого построителя выражений путем реализации <xref:System.Web.Compilation.ExpressionBuilder> абстрактного класса. Эта реализация <xref:System.Web.Compilation.ExpressionBuilder> возвращает вычисленного оператора, который передается выражение. Чтобы выполнить этот пример, необходимо сначала зарегистрировать конструктора собственных выражений в файле Web.config. В первом примере кода показано, как зарегистрировать конструктора собственных выражений в файле Web.config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 Во втором примере кода показано, как ссылаться на выражение в файле .aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 В третьем примере показано, как для разработки настраиваемого выражения путем наследования от <xref:System.Web.Compilation.ExpressionBuilder>. Чтобы запустить этот пример кода, необходимо поместить класс в папку App_Code.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При наследовании от <see cref="T:System.Web.Compilation.ExpressionBuilder" /> , необходимо переопределить <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> метод.</para></block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как <xref:System.Web.Compilation.ExpressionBuilder> класс является абстрактным, не удается создать экземпляр <xref:System.Web.Compilation.ExpressionBuilder> напрямую с помощью <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> конструктор.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При наследовании от <see cref="T:System.Web.Compilation.ExpressionBuilder" /> класса, переопределить <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> конструктор, чтобы реализовать пользовательские действия инициализации для реализации построителя выражений.</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Объект, содержащий выражение.</param>
        <param name="entry">Объект, представляющий сведения о свойстве, привязка которого осуществляется с помощью выражения.</param>
        <param name="parsedData">Объект, содержащий проанализированные данные, возвращенные методом <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> .</param>
        <param name="context">Контекстно-зависимые сведения для вычисления выражения.</param>
        <summary>При переопределении в производном классе возвращает объект, представляющий вычисленное выражение.</summary>
        <returns>Объект, который представляет вычисленное выражение; если наследники не реализуют метод <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />, значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы хотите, чтобы ваши <xref:System.Web.Compilation.ExpressionBuilder> объект активен на страницу, которая поддерживает эту функцию без компиляции можно переопределить <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> метод и <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> свойство. <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> Метод должен возвращать вычисления данного выражения.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование переопределенный <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> метод для возврата вычисленного выражения.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> метод, необходимо также переопределить <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> свойство.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="expressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Объект, представляющий сведения о свойстве, привязка которого осуществляется с помощью выражения.</param>
        <param name="parsedData">Объект, содержащий проанализированные данные, возвращенные методом <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> .</param>
        <param name="context">Контекстно-зависимые сведения для вычисления выражения.</param>
        <summary>При переопределении в производном классе возвращает код, используемый во время выполнения страницы для получения вычисленного выражения.</summary>
        <returns>Класс <see cref="T:System.CodeDom.CodeExpression" />, который используется для назначения свойства.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Классы, наследующие от <xref:System.Web.Compilation.ExpressionBuilder> класс должен реализовывать <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> абстрактный метод.  
  
   
  
## Examples  
 В следующем примере кода показано, как вернуть <xref:System.CodeDom.CodeExpression> объекта путем переопределения <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> метод.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При реализации настраиваемого построителя выражений, необходимо выполнить соответствующее преобразование для свойства элемента управления и получить операцию приведения в <see cref="T:System.CodeDom.CodeExpression" /> объекта.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.ParseExpression (expression, propertyType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Значение декларативного выражения.</param>
        <param name="propertyType">Тип свойства, привязка которого осуществляется с помощью выражения.</param>
        <param name="context">Контекстно-зависимые сведения для вычисления выражения.</param>
        <summary>При переопределении в производном классе возвращает объект, представляющий проанализированное выражение.</summary>
        <returns>Объект <see cref="T:System.Object" />, в котором содержится проанализированное представление выражения; если метод <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> не реализован, значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При переопределении в производном классе этот метод выполняет синтаксический анализ выражения и возвращает его как объект, который можно использовать в качестве `parsedData` параметр в <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> или <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При переопределении в производном классе возвращает значение, позволяющее определить, поддерживает ли текущий объект <see cref="T:System.Web.Compilation.ExpressionBuilder" /> некомпилируемые страницы.</summary>
        <value>Если класс <see cref="T:System.Web.Compilation.ExpressionBuilder" /> поддерживает вычисление выражений, значение <see langword="true" />, если нет, значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию для <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> свойство `false`. Чтобы обеспечить поддержку некомпилируемых страницах, необходимо переопределить <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> метод и <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> свойство.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> свойство.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>