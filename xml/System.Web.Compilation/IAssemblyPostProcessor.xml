<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f3ce5813903e751fff1b66168f7c9c44ae5525c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70538575" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Задает методы, реализуемые классом для обработки сборки после ее построения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс, реализующий этот интерфейс, может получить доступ к сборке после ее компиляции. Класс компилирует сборки, а затем проверяет, зарегистрирован <xref:System.Web.Compilation.IAssemblyPostProcessor> ли в файле веб-конфигурации интерфейс. <xref:System.Web.Compilation.AssemblyBuilder> Если это так, <xref:System.Web.Compilation.AssemblyBuilder> экземпляр <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> вызывает метод для <xref:System.Web.Compilation.IAssemblyPostProcessor> интерфейса, чтобы выполнить любое действие после компиляции и перед загрузкой сборки. Например, средство профилирования может реализовать этот интерфейс, чтобы установить зонды в сборке.  
  
 При регистрации <xref:System.Web.Compilation.IAssemblyPostProcessor> интерфейса приложение ASP.NET и его сборки всегда будут компилироваться в режиме отладки.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать реализацию <xref:System.Web.Compilation.IAssemblyPostProcessor> интерфейса и зарегистрировать его в файле Web. config веб-приложения.  
  
 В первой части примера кода создается класс с именем `Samples.Process.postProcessTest` , который <xref:System.Web.Compilation.IAssemblyPostProcessor> реализует интерфейс. Этот класс выполняет простое действие записи файла при <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> вызове метода.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Скомпилируйте класс в DLL-файл с помощью команды `csc /target:library postProcessTest.cs`. Добавьте полученный DLL-файл в папку Bin приложения ASP.NET и зарегистрируйте библиотеку DLL в файле Web. config, как показано в следующем коде.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Когда пользователь посещает веб-сайт, веб-приложение динамически компилируется и файл MyTest. txt будет записан в К:\компиле.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Путь к сборке.</param>
        <summary>Вызывается перед загрузкой сборки, чтобы позволить реализующему классу вносить в нее изменения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.AssemblyBuilder> Класс вызывает этот метод после компиляции сборки. Все действия, выполняемые перед загрузкой сборки, должны быть добавлены в этот метод.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать реализацию <xref:System.Web.Compilation.IAssemblyPostProcessor> интерфейса и зарегистрировать его в файле Web. config веб-приложения.  
  
 В первой части примера кода создается класс с именем `Samples.Process.postProcessTest` , который <xref:System.Web.Compilation.IAssemblyPostProcessor> реализует интерфейс. Этот класс выполняет простое действие записи файла при <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> вызове метода.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Скомпилируйте класс в DLL-файл с помощью команды `csc /target:library postProcessTest.cs`. Добавьте полученный DLL-файл в папку Bin приложения ASP.NET и зарегистрируйте библиотеку DLL в файле Web. config, как показано в следующем коде.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Когда пользователь посещает веб-сайт, веб-приложение динамически компилируется и файл MyTest. txt будет записан в К:\компиле.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
