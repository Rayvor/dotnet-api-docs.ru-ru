<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a2c749b92e79e392d14b5bd25364da86baf7844" /><Meta Name="ms.sourcegitcommit" Value="2b78f05b0c6fa92adaf5e1dfe5a50388f952efe7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/02/2019" /><Meta Name="ms.locfileid" Value="71809877" /></Metadata><TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f5006-101">Определяет интерфейс, который должен реализовывать канал для получения сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-101">Defines the interface that a channel must implement to receive a message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="f5006-102">Контракт <xref:System.ServiceModel.Channels.IInputChannel> включает в себя синхронный и асинхронный варианты функций получения, попытки получения и ожидания сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="f5006-103">Обычно модель извлечения используется с интерфейсом <xref:System.ServiceModel.Channels.IInputChannel> для получения сообщений. Происходит вызов метода <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (для извлечения сообщения из канала) и ожидание прихода сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="f5006-104">Альтернативный шаблон использования: вызов метода <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> или метода <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, а затем вызов метода<xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="f5006-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="f5006-105">Этот подход часто используется при транзакционном взаимодействии, где транзакция начинается между вызовами методов <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> и <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5006-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="f5006-106">Интерфейс <xref:System.ServiceModel.Channels.IInputChannel> не обязательно привязан к одному отправителю.</span><span class="sxs-lookup"><span data-stu-id="f5006-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="f5006-107">Другие каналы и интерфейсы каналов могут устанавливать соответствие между определенными отправителями и объектом <xref:System.ServiceModel.Channels.IInputChannel>, но базовый контракт не делает такого ограничения.</span><span class="sxs-lookup"><span data-stu-id="f5006-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="f5006-108">Реализация может создавать новый объект <xref:System.ServiceModel.Channels.IInputChannel> для каждого сообщения или использовать один объект <xref:System.ServiceModel.Channels.IInputChannel> для нескольких сообщений и отправителей.</span><span class="sxs-lookup"><span data-stu-id="f5006-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5006-109">Начинает асинхронную операцию получения.</span><span class="sxs-lookup"><span data-stu-id="f5006-109">Begins an asynchronous receive operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-110">Используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, если требуется, чтобы выполнение приложения продолжалось без ожидания получения запроса.</span><span class="sxs-lookup"><span data-stu-id="f5006-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="f5006-111">Если допустима блокировка текущего потока до получения сообщения запроса или до превышения времени ожидания, заданного параметром <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, используйте синхронный метод `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="f5006-112">Асинхронная операция доступна как с явно заданным временем ожидания, так и без него.</span><span class="sxs-lookup"><span data-stu-id="f5006-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5006-113">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление о завершении асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="f5006-114">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронной операцией.</span><span class="sxs-lookup"><span data-stu-id="f5006-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f5006-115">Начинает асинхронную операцию получения сообщения, с которой связан объект состояния.</span><span class="sxs-lookup"><span data-stu-id="f5006-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="f5006-116">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронное получение сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-117">Используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, если требуется, чтобы выполнение приложения продолжалось без ожидания получения запроса.</span><span class="sxs-lookup"><span data-stu-id="f5006-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="f5006-118">Если допустима блокировка текущего потока до получения сообщения запроса или до превышения времени ожидания, заданного параметром <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, используйте синхронный метод `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="f5006-119">Асинхронная операция доступна как с явно заданным временем ожидания, так и без него.</span><span class="sxs-lookup"><span data-stu-id="f5006-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="f5006-120">Посредством обратного вызова этот метод получает уведомление об идентификации обработчика событий для операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="f5006-121">Операция остается незавершенной, пока сообщение не будет доступным в канале.</span><span class="sxs-lookup"><span data-stu-id="f5006-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-122">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f5006-123">Объект <see cref="T:System.TimeSpan" />, который задает время ожидания доступного сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="f5006-124">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление о завершении асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="f5006-125">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронной операцией.</span><span class="sxs-lookup"><span data-stu-id="f5006-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f5006-126">Начинает асинхронную операцию получения сообщения, с которой связано определенное время ожидания и объект состояния.</span><span class="sxs-lookup"><span data-stu-id="f5006-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="f5006-127">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию получения.</span><span class="sxs-lookup"><span data-stu-id="f5006-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-128">Используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, если требуется, чтобы выполнение приложения продолжалось без ожидания получения запроса.</span><span class="sxs-lookup"><span data-stu-id="f5006-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="f5006-129">Если допустима блокировка текущего потока до получения сообщения запроса или до превышения времени ожидания, заданного параметром <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, используйте синхронный метод `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="f5006-130">Асинхронная операция доступна как с явно заданным временем ожидания, так и без него.</span><span class="sxs-lookup"><span data-stu-id="f5006-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="f5006-131">Операция остается незавершенной, пока сообщение не станет доступным в канале или пока не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-132">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="f5006-133">Указанное значение <paramref name="timeout" /> превышено до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5006-134">Заданное значение времени ожидания меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="f5006-134">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="f5006-135">Операция создает исключение <see cref="T:System.TimeoutException" />, если заданное значение <paramref name="timeout" /> превышено до ее завершения.</span><span class="sxs-lookup"><span data-stu-id="f5006-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f5006-136">Объект <see cref="T:System.TimeSpan" />, который задает время ожидания доступного сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="f5006-137">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление о завершении асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="f5006-138">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронной операцией.</span><span class="sxs-lookup"><span data-stu-id="f5006-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f5006-139">Начинает асинхронную операцию получения сообщения, с которой связано определенное время ожидания и объект состояния.</span><span class="sxs-lookup"><span data-stu-id="f5006-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="f5006-140">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию получения.</span><span class="sxs-lookup"><span data-stu-id="f5006-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-141">Если работа приложения должна продолжаться без ожидания, используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f5006-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="f5006-142">Если допустима блокировка текущего потока до ответа на сообщение запроса или до истечения времени ожидания, используйте синхронный метод <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29>.</span><span class="sxs-lookup"><span data-stu-id="f5006-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="f5006-143">Операция остается незавершенной, пока сообщение не станет доступным в канале или пока не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="f5006-144">Если необходимо обрабатывать ситуации истечения времени ожидания, а не просто создавать заново или помещать в оболочку исключение <xref:System.TimeoutException>, следует вызывать метод <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> вместо метода <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5006-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="f5006-145">Если нет необходимости специальным образом обрабатывать ситуации истечения времени ожидания, следует вызывать метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, в противном случае будут потеряны сведения об ошибках.</span><span class="sxs-lookup"><span data-stu-id="f5006-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-146">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="f5006-147">Указанное значение <paramref name="timeout" /> превышено до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5006-148">Заданное значение времени ожидания меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="f5006-148">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="f5006-149">Операция возвращает значение <see langword="false" /> в результате вызова метода <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />, если превышено заданное значение <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f5006-150">Объект <see cref="T:System.TimeSpan" />, который задает время ожидания доступного сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="f5006-151">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление о завершении асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="f5006-152">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронной операцией.</span><span class="sxs-lookup"><span data-stu-id="f5006-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f5006-153">Начинает асинхронную операцию ожидания прихода сообщения, с которой связано определенное время ожидания и объект состояния.</span><span class="sxs-lookup"><span data-stu-id="f5006-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="f5006-154">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию ожидания прихода сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-155">Если работа приложения должна продолжаться без ожидания прихода сообщения, используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f5006-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="f5006-156">Если текущий поток можно заблокировать, пока ожидается поступление в очередь сообщения, используйте синхронный метод <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="f5006-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="f5006-157">Поток заблокирован вплоть до указанного значения `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="f5006-158">Посредством обратного вызова этот метод получает уведомление об идентификации обработчика событий для операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="f5006-159">Операция остается незавершенной, пока сообщение не станет доступным в канале или пока не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-160">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="f5006-161">Указанное значение <paramref name="timeout" /> превышено до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5006-162">Заданное значение времени ожидания меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="f5006-162">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="f5006-163">Если превышено заданное значение <see langword="false" />, операция возвращает значение <paramref name="timeout" />, а не исключение, связанное с истечением времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f5006-164">Объект <see cref="T:System.IAsyncResult" />, возвращенный вызовом одного из методов <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <summary><span data-ttu-id="f5006-165">Завершает асинхронную операцию получения сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-165">Completes an asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="f5006-166">Полученное сообщение <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5006-167">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult * Message -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f5006-168">Объект <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="message"><span data-ttu-id="f5006-169">Полученное сообщение <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="f5006-170">Завершает указанную асинхронную операцию получения сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-170">Completes the specified asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="f5006-171">Значение <see langword="true" />, если сообщение получено до истечения заданного интервала времени; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-171"><see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5006-172">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f5006-173">Объект <see cref="T:System.IAsyncResult" />, определяющий операцию <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> для завершения и извлечения конечного результата.</span><span class="sxs-lookup"><span data-stu-id="f5006-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="f5006-174">Завершает указанную асинхронную операцию ожидания сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-174">Completes the specified asynchronous wait-for-a-message operation.</span></span></summary>
        <returns><span data-ttu-id="f5006-175">Значение <see langword="true" />, если сообщение пришло до превышения значения, заданного параметром <paramref name="timeout" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-175"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5006-176">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5006-177">Возвращает адрес, на который этот канал входа получает сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-177">Gets the address on which the input channel receives messages.</span></span></summary>
        <value><span data-ttu-id="f5006-178">Адрес <see cref="T:System.ServiceModel.EndpointAddress" />, на который канал входа получает сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-179">Если входящий канал не имеет отдельного адреса (например, это входящая сторона канала TCP, инициированного клиентом), это свойство имеет значение `null`.</span><span class="sxs-lookup"><span data-stu-id="f5006-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="f5006-180">Это свойство может быть использовано каналами более высокого уровня для установления соответствия.</span><span class="sxs-lookup"><span data-stu-id="f5006-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="f5006-181">Например, если канал более высокого уровня реализует запрос и ответ на основе интерфейса <xref:System.ServiceModel.Channels.IDuplexChannel>, то он может использовать свойство <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> в заголовке WS-Addressing ReplyTo.</span><span class="sxs-lookup"><span data-stu-id="f5006-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-182">Следующий код показывает, как реализовать это свойство.</span><span class="sxs-lookup"><span data-stu-id="f5006-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException"><span data-ttu-id="f5006-183">Операция не завершилась в течение времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-183">The operation did not complete with the timeout interval.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationException"><span data-ttu-id="f5006-184">Не удается воспользоваться входящим каналом.</span><span class="sxs-lookup"><span data-stu-id="f5006-184">The input channel failed.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException"><span data-ttu-id="f5006-185">Входящий канал был закрыт.</span><span class="sxs-lookup"><span data-stu-id="f5006-185">The input channel has been aborted.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException"><span data-ttu-id="f5006-186">Сбой входящего канала.</span><span class="sxs-lookup"><span data-stu-id="f5006-186">The input channel faulted.</span></span></exception>
        <summary><span data-ttu-id="f5006-187">Возвращает сообщение, полученное входящим каналом, если такое сообщение доступно в течение явно или неявно заданного периода времени.</span><span class="sxs-lookup"><span data-stu-id="f5006-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-188">Если допустима блокировка текущего потока до получения сообщения запроса или до истечения времени ожидания, заданного параметром <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, используйте синхронный метод `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="f5006-189">Используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, если требуется, чтобы выполнение приложения продолжалось без ожидания получения запроса.</span><span class="sxs-lookup"><span data-stu-id="f5006-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="f5006-190">Синхронная операция <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> доступна как с явно заданным временем ожидания, так и без него.</span><span class="sxs-lookup"><span data-stu-id="f5006-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="f5006-191">Если сообщение недоступно, обработка приостанавливается, пока не появится доступное сообщение или не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5006-192">Возвращает полученное сообщение, если таковое доступно.</span><span class="sxs-lookup"><span data-stu-id="f5006-192">Returns the message received, if one is available.</span></span> <span data-ttu-id="f5006-193">Если сообщение недоступно, обработка приостанавливается на промежуток времени по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="f5006-193">If a message is not available, blocks for a default interval of time.</span></span></summary>
        <returns><span data-ttu-id="f5006-194">Полученное сообщение <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-195">Если допустима блокировка текущего потока до получения сообщения запроса или до истечения времени ожидания, заданного параметром <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, используйте синхронный метод `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="f5006-196">Используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, если требуется, чтобы выполнение приложения продолжалось без ожидания получения запроса.</span><span class="sxs-lookup"><span data-stu-id="f5006-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="f5006-197">Синхронная операция <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> доступна как с явно заданным временем ожидания, так и без него.</span><span class="sxs-lookup"><span data-stu-id="f5006-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="f5006-198">Если сообщение недоступно, обработка приостанавливается, пока не появится доступное сообщение или не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="f5006-199">Метод <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> может быть вызван несколько раз или одновременно.</span><span class="sxs-lookup"><span data-stu-id="f5006-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="f5006-200">Для каждого полученного сообщения может завершиться только один вызов метода <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5006-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-201">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f5006-202">Объект <see cref="T:System.TimeSpan" />, указывающий, за какое время должно завершиться получение операции запроса, прежде чем истечет время ожидания и будет создано исключение <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span></span></param>
        <summary><span data-ttu-id="f5006-203">Возвращает полученное сообщение, если таковое доступно.</span><span class="sxs-lookup"><span data-stu-id="f5006-203">Returns the message received, if one is available.</span></span> <span data-ttu-id="f5006-204">Если сообщение недоступно, обработка приостанавливается на заданный промежуток времени.</span><span class="sxs-lookup"><span data-stu-id="f5006-204">If a message is not available, blocks for a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="f5006-205">Полученное сообщение <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-206">Если допустима блокировка текущего потока до получения сообщения запроса или до истечения времени ожидания, заданного параметром <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, используйте синхронный метод `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="f5006-207">Используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, если требуется, чтобы выполнение приложения продолжалось без ожидания получения запроса.</span><span class="sxs-lookup"><span data-stu-id="f5006-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="f5006-208">Синхронная операция <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> доступна как с явно заданным временем ожидания, так и без него.</span><span class="sxs-lookup"><span data-stu-id="f5006-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="f5006-209">Если сообщение недоступно, обработка приостанавливается, пока не появится доступное сообщение или не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="f5006-210">Метод <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> может быть вызван несколько раз или одновременно.</span><span class="sxs-lookup"><span data-stu-id="f5006-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="f5006-211">Для каждого полученного сообщения может завершиться только один вызов метода <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5006-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-212">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="f5006-213">Указанное значение <paramref name="timeout" /> превышено до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5006-214">Заданное значение времени ожидания меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="f5006-214">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan * Message -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f5006-215">Объект <see cref="T:System.IAsyncResult" />, возвращенный вызовом одного из методов <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <param name="message"><span data-ttu-id="f5006-216">Полученное сообщение <see cref="T:System.ServiceModel.Channels.Message" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="f5006-217">Пытается получить сообщение в течение заданного промежутка времени.</span><span class="sxs-lookup"><span data-stu-id="f5006-217">Tries to receive a message within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="f5006-218">Значение <see langword="true" />, если сообщение получено до превышения времени, заданного параметром <paramref name="timeout" />; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-218"><see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-219">Если необходимо обрабатывать ситуации истечения времени ожидания, а не просто создавать заново или помещать в оболочку исключение <xref:System.TimeoutException>, следует вызывать метод <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> вместо метода <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5006-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="f5006-220">Если нет необходимости специальным образом обрабатывать ситуации истечения времени ожидания, следует вызывать метод <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, в противном случае будут потеряны сведения об ошибках.</span><span class="sxs-lookup"><span data-stu-id="f5006-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-221">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="f5006-222">Указанное значение <paramref name="timeout" /> превышено до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5006-223">Заданное значение времени ожидания меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="f5006-223">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="f5006-224">Объект <see cref="T:System.TimeSpan" /> задает максимальный интервал времени ожидания прихода сообщения.</span><span class="sxs-lookup"><span data-stu-id="f5006-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span></span></param>
        <summary><span data-ttu-id="f5006-225">Возвращает значение, указывающее, было ли сообщение получено в течение заданного промежутка времени.</span><span class="sxs-lookup"><span data-stu-id="f5006-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="f5006-226">Значение <see langword="true" />, если сообщение пришло до превышения значения, заданного параметром <paramref name="timeout" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5006-226"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5006-227">Вызов метода <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> не приводит к получению сообщения или его обработке каким-либо другим образом.</span><span class="sxs-lookup"><span data-stu-id="f5006-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="f5006-228">Метод <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> в основном существует для транзакционных сценариев, в которых пользователю требуется получать это сообщение в рамках транзакции.</span><span class="sxs-lookup"><span data-stu-id="f5006-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="f5006-229">Если, как обычно, использовать для этого метод <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, пользователю придется сперва создать транзакцию, а затем вызвать метод <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> и надеяться, что сообщение будет получено до истечения времени ожидания транзакции, что может быть невозможно.</span><span class="sxs-lookup"><span data-stu-id="f5006-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="f5006-230">Вместо этого пользователь может вызвать метод <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>, задав любое время ожидания (возможно, бесконечное), а затем, когда придет сообщение, открыть транзакцию, вызвать метод <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> и быть уверенным, что ответное сообщение будет получено до истечения времени ожидания транзакции.</span><span class="sxs-lookup"><span data-stu-id="f5006-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="f5006-231">Этот метод является синхронным, поэтому он блокирует текущий поток до появления доступного сообщения или истечения времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="f5006-232">Метод <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> используется, если текущий поток можно заблокировать на время, пока ожидается поступление сообщения в очередь.</span><span class="sxs-lookup"><span data-stu-id="f5006-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="f5006-233">Поток заблокирован вплоть до указанного значения `timeout`.</span><span class="sxs-lookup"><span data-stu-id="f5006-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="f5006-234">Если работа приложения должна продолжаться без ожидания, используйте асинхронный метод <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f5006-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5006-235">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="f5006-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="f5006-236">Указанное значение <paramref name="timeout" /> превышено до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="f5006-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5006-237">Заданное значение времени ожидания меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="f5006-237">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="f5006-238">Если превышено заданное значение <see langword="false" />, операция возвращает значение <paramref name="timeout" />, а не исключение, связанное с истечением времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="f5006-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
