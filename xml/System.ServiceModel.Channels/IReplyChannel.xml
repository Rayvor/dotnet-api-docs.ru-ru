<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="961f1414d6b4d48b761619c31594e2698686b24a" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72406992" /></Metadata><TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IReplyChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="45ce5-101">Определяет интерфейс, который должен реализовывать канал, чтобы быть на принимающей стороне взаимодействия запрос-ответ между конечными точками, обменивающимися сообщениями.</span><span class="sxs-lookup"><span data-stu-id="45ce5-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="45ce5-102">Интерфейс <xref:System.ServiceModel.Channels.IReplyChannel> включает в себя синхронный и асинхронный варианты метода <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>, который возвращает объект <xref:System.ServiceModel.Channels.RequestContext>, позволяющий создать ответы на полученные запросы.</span><span class="sxs-lookup"><span data-stu-id="45ce5-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="45ce5-103">Контракт включает в себя синхронный и асинхронный варианты функций получения, попытки получения и ожидания сообщения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="45ce5-104">Интерфейс <xref:System.ServiceModel.Channels.IReplyChannel> не обязательно привязан к одному отправителю.</span><span class="sxs-lookup"><span data-stu-id="45ce5-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="45ce5-105">Другие каналы и интерфейсы каналов устанавливают соответствие между отправителем и каналом ответа, но базовый контракт не делает такого ограничения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="45ce5-106">Модель извлечения используется с интерфейсом <xref:System.ServiceModel.Channels.IReplyChannel> для получения сообщений.</span><span class="sxs-lookup"><span data-stu-id="45ce5-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="45ce5-107">Эта модель состоит из вызова метода <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (или одного из его вариантов) и ожидания прихода сообщения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce5-108">Начинает асинхронную операцию для получения доступного запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-108">Begins an asynchronous operation to receive an available request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="45ce5-109">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление об асинхронном получении, завершенном операцией запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="45ce5-110">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронным получением операции запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="45ce5-111">Начинает асинхронную операцию для получения доступного запроса со временем ожидания по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="45ce5-111">Begins an asynchronous operation to receive an available request with a default timeout.</span></span></summary>
        <returns><span data-ttu-id="45ce5-112">Объект <see cref="T:System.IAsyncResult" />, ссылающийся на асинхронное получение запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-113">Метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> реализует стандартный шаблон для асинхронного вызова <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="45ce5-114">Время ожидания по умолчанию — 1 минута.</span><span class="sxs-lookup"><span data-stu-id="45ce5-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="45ce5-115">Если время ожидания получения задано в привязке, использованной для настройки подключения, используется это значение.</span><span class="sxs-lookup"><span data-stu-id="45ce5-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="45ce5-116">Используйте метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, если необходимо явно задать время ожидания для вызова, которое переопределит другие значения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="45ce5-117">Если размер полученного сообщения запроса превышает максимальный размер сообщения, допускаемый используемой привязкой, создается исключение <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="45ce5-118">Максимальный размер сообщения задается свойством <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="45ce5-119">Значение по умолчанию — 65536 байт.</span><span class="sxs-lookup"><span data-stu-id="45ce5-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-120">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45ce5-121">Объект <see cref="T:System.TimeSpan" />, который задает время ожидания получения доступного запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="45ce5-122">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление об асинхронном получении, завершенном операцией запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="45ce5-123">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронным получением операции запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="45ce5-124">Начинает асинхронную операцию для получения доступного запроса с заданным временем ожидания.</span><span class="sxs-lookup"><span data-stu-id="45ce5-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span></span></summary>
        <returns><span data-ttu-id="45ce5-125">Объект <see cref="T:System.IAsyncResult" />, ссылающийся на асинхронное получение запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-126">Метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> реализует стандартный шаблон для асинхронного вызова <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="45ce5-127">Время ожидания, заданное в этом методе, переопределяет время ожидания получения, заданное в привязке, используемой для настройки подключения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="45ce5-128">Если размер полученного сообщения запроса превышает максимальный размер сообщения, допускаемый используемой привязкой, создается исключение <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="45ce5-129">Максимальный размер сообщения задается свойством <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="45ce5-130">Значение по умолчанию — 65536 байт.</span><span class="sxs-lookup"><span data-stu-id="45ce5-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-131">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginTryReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45ce5-132">Объект <see cref="T:System.TimeSpan" />, указывающий, за какое время должно завершиться получение операции запроса, прежде чем истечет время ожидания и будет возвращено значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="45ce5-133">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление об асинхронном получении, завершенном операцией запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="45ce5-134">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронным получением операции запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="45ce5-135">Начинает асинхронную операцию получения сообщения запроса, с которым связано определенное время ожидания и объект состояния.</span><span class="sxs-lookup"><span data-stu-id="45ce5-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="45ce5-136">Объект <see cref="T:System.IAsyncResult" />, ссылающийся на асинхронное получение операции запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-137">Если работа приложения должна продолжаться без ожидания, используйте асинхронный метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="45ce5-138">Если допустима блокировка текущего потока до ответа на сообщение запроса или до истечения времени ожидания, используйте один из синхронных методов <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="45ce5-139">Посредством обратного вызова этот метод получает уведомление об идентификации обработчика событий для операции.</span><span class="sxs-lookup"><span data-stu-id="45ce5-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="45ce5-140">Операция остается незавершенной, пока сообщение не станет доступным в канале или пока не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="45ce5-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-141">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="45ce5-142">Операция возвращает значение <see langword="false" />, если превышено указанное время ожидания <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginWaitForRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45ce5-143">Объект <see cref="T:System.TimeSpan" />, который задает время ожидания получения доступного запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="45ce5-144">Делегат <see cref="T:System.AsyncCallback" />, принимающий уведомление об асинхронном получении, завершенном операцией запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="45ce5-145">Задаваемый приложением объект, который содержит сведения о состоянии, связанные с асинхронным получением операции запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="45ce5-146">Начинает асинхронную операцию запроса, с которой связано определенное время ожидания и объект состояния.</span><span class="sxs-lookup"><span data-stu-id="45ce5-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="45ce5-147">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию ожидания прихода сообщения запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-148">Если текущий поток можно заблокировать, пока ожидается поступление в очередь сообщения запроса, используйте синхронный метод <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="45ce5-149">Поток заблокирован вплоть до указанного значения `timeout`.</span><span class="sxs-lookup"><span data-stu-id="45ce5-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="45ce5-150">Посредством обратного вызова этот метод получает уведомление об идентификации обработчика событий для операции.</span><span class="sxs-lookup"><span data-stu-id="45ce5-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="45ce5-151">Операция остается незавершенной, пока сообщение запроса не станет доступным в канале или пока не истечет время ожидания.</span><span class="sxs-lookup"><span data-stu-id="45ce5-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-152">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="45ce5-153">Операция возвращает значение <see langword="false" />, если превышено указанное время ожидания <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceiveRequest : IAsyncResult -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.EndReceiveRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="45ce5-154">Объект <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="45ce5-155">Завершает асинхронную операцию получения доступного запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-155">Completes an asynchronous operation to receive an available request.</span></span></summary>
        <returns><span data-ttu-id="45ce5-156">Объект <see cref="T:System.ServiceModel.Channels.RequestContext" />, использованный для создания ответа на запрос.</span><span class="sxs-lookup"><span data-stu-id="45ce5-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-157">Если размер полученного сообщения запроса превышает максимальный размер сообщения, допускаемый используемой привязкой, создается исключение <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="45ce5-158">Максимальный размер сообщения задается свойством <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="45ce5-159">Значение по умолчанию — 65536 байт.</span><span class="sxs-lookup"><span data-stu-id="45ce5-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-160">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="45ce5-161">Операция должна создать исключение <see cref="T:System.TimeoutException" />, если до завершения операции превышено заданное значение параметра <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceiveRequest : IAsyncResult * RequestContext -&gt; bool" Usage="iReplyChannel.EndTryReceiveRequest (result, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="45ce5-162">Объект <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="context"><span data-ttu-id="45ce5-163">Полученное сообщение <see cref="T:System.ServiceModel.Channels.RequestContext" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="45ce5-164">Завершает указанную асинхронную операцию получения сообщения запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-164">Completes the specified asynchronous operation to receive a request message.</span></span></summary>
        <returns><span data-ttu-id="45ce5-165">Значение <see langword="true" />, если сообщение запроса получено до истечения заданного интервала времени; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-165"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45ce5-166">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForRequest : IAsyncResult -&gt; bool" Usage="iReplyChannel.EndWaitForRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="45ce5-167">Объект <see cref="T:System.IAsyncResult" />, определяющий операцию <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> для завершения и извлечения конечного результата.</span><span class="sxs-lookup"><span data-stu-id="45ce5-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="45ce5-168">Завершает указанную асинхронную операцию ожидания сообщения запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-168">Completes the specified asynchronous wait-for-a-request message operation.</span></span></summary>
        <returns><span data-ttu-id="45ce5-169">Значение <see langword="true" />, если запрос получен до истечения заданного интервала времени; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-169"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45ce5-170">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45ce5-171">Возвращает адрес, на который этот канал ответа получает сообщения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-171">Gets the address on which this reply channel receives messages.</span></span></summary>
        <value><span data-ttu-id="45ce5-172">Адрес <see cref="T:System.ServiceModel.EndpointAddress" />, на который этот канал ответа получает сообщения.</span><span class="sxs-lookup"><span data-stu-id="45ce5-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45ce5-173">Следующий код показывает, как реализовать это свойство.</span><span class="sxs-lookup"><span data-stu-id="45ce5-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce5-174">Возвращает контекст полученного запроса, если таковой доступен.</span><span class="sxs-lookup"><span data-stu-id="45ce5-174">Returns the context of the request received, if one is available.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : unit -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce5-175">Возвращает контекст полученного запроса, если таковой доступен.</span><span class="sxs-lookup"><span data-stu-id="45ce5-175">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="45ce5-176">Если контекст недоступен, ожидает появления доступного контекста.</span><span class="sxs-lookup"><span data-stu-id="45ce5-176">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="45ce5-177">Объект <see cref="T:System.ServiceModel.Channels.RequestContext" />, использованный для создания ответов.</span><span class="sxs-lookup"><span data-stu-id="45ce5-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-178">Объект <xref:System.ServiceModel.Channels.RequestContext> инкапсулирует сообщение запроса и механизм для ответа на это сообщение.</span><span class="sxs-lookup"><span data-stu-id="45ce5-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="45ce5-179">Метод <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> может быть вызван несколько раз или одновременно.</span><span class="sxs-lookup"><span data-stu-id="45ce5-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="45ce5-180">На один полученный запрос завершается только один вызов метода <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="45ce5-181">Если размер полученного сообщения запроса превышает максимальный размер сообщения, допускаемый используемой привязкой, создается исключение <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="45ce5-182">Максимальный размер сообщения задается свойством <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="45ce5-183">Значение по умолчанию — 65536 байт.</span><span class="sxs-lookup"><span data-stu-id="45ce5-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-184">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : TimeSpan -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45ce5-185">Объект <see cref="T:System.TimeSpan" />, указывающий, за какое время должно завершиться получение операции запроса, прежде чем истечет время ожидания и будет возвращено значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="45ce5-186">Возвращает контекст полученного запроса, если таковой доступен.</span><span class="sxs-lookup"><span data-stu-id="45ce5-186">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="45ce5-187">Если контекст недоступен, ожидает появления доступного контекста.</span><span class="sxs-lookup"><span data-stu-id="45ce5-187">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="45ce5-188">Объект <see cref="T:System.ServiceModel.Channels.RequestContext" />, использованный для создания ответов.</span><span class="sxs-lookup"><span data-stu-id="45ce5-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-189">Объект <xref:System.ServiceModel.Channels.RequestContext> инкапсулирует сообщение запроса и механизм для ответа на это сообщение.</span><span class="sxs-lookup"><span data-stu-id="45ce5-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="45ce5-190">Метод <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> может быть вызван несколько раз или одновременно.</span><span class="sxs-lookup"><span data-stu-id="45ce5-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="45ce5-191">На один полученный запрос завершается только один вызов метода <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="45ce5-192">Если размер полученного сообщения запроса превышает максимальный размер сообщения, допускаемый используемой привязкой, создается исключение <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="45ce5-193">Максимальный размер сообщения задается свойством <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="45ce5-194">Значение по умолчанию — 65536 байт.</span><span class="sxs-lookup"><span data-stu-id="45ce5-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-195">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveRequest : TimeSpan * RequestContext -&gt; bool" Usage="iReplyChannel.TryReceiveRequest (timeout, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45ce5-196">Объект <see cref="T:System.TimeSpan" />, указывающий, за какое время должно завершиться получение операции запроса, прежде чем истечет время ожидания и будет возвращено значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="context"><span data-ttu-id="45ce5-197">Полученное сообщение <see cref="T:System.ServiceModel.Channels.RequestContext" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="45ce5-198">Возвращает значение, указывающее, был ли запрос получен до истечения заданного промежутка времени.</span><span class="sxs-lookup"><span data-stu-id="45ce5-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="45ce5-199">Значение <see langword="true" />, если сообщение запроса получено до истечения заданного интервала времени; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-199"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-200">Используйте метод <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>, если текущий поток можно заблокировать, пока ожидается поступление в очередь сообщения запроса.</span><span class="sxs-lookup"><span data-stu-id="45ce5-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="45ce5-201">Поток заблокирован вплоть до указанного значения `timeout`.</span><span class="sxs-lookup"><span data-stu-id="45ce5-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="45ce5-202">Если работа приложения должна продолжаться без ожидания, используйте асинхронный метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-203">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="45ce5-204">Операция возвращает значение <see langword="false" />, если превышено указанное время ожидания <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForRequest : TimeSpan -&gt; bool" Usage="iReplyChannel.WaitForRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45ce5-205">Объект <see cref="T:System.TimeSpan" />, указывающий, за какое время должна завершиться операция запроса, прежде чем истечет время ожидания и будет возвращено значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="45ce5-206">Возвращает значение, указывающее, было ли сообщение запроса получено до истечения заданного промежутка времени.</span><span class="sxs-lookup"><span data-stu-id="45ce5-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="45ce5-207">Значение <see langword="true" />, если запрос получен до истечения заданного интервала времени; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-207"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45ce5-208">Вызов метода <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> не приводит к получению сообщения запроса или его обработке.</span><span class="sxs-lookup"><span data-stu-id="45ce5-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="45ce5-209">Метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> в основном существует для транзакционных сценариев, в которых пользователю требуется получать это сообщение в рамках транзакции.</span><span class="sxs-lookup"><span data-stu-id="45ce5-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="45ce5-210">Если, как обычно, использовать для этого метод <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>, пользователю придется сначала создать транзакцию, а затем вызвать метод <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> и надеяться, что сообщение будет получено до истечения времени ожидания транзакции, что может быть невозможно.</span><span class="sxs-lookup"><span data-stu-id="45ce5-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="45ce5-211">Вместо этого пользователь может вызвать метод <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> и задать время ожидания (возможно, бесконечное), а затем, когда придет сообщение, открыть транзакцию, вызвать метод <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> и быть уверенным, что ответное сообщение будет получено до истечения времени ожидания транзакции.</span><span class="sxs-lookup"><span data-stu-id="45ce5-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="45ce5-212">Метод <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> используется, если текущий поток можно заблокировать на время, пока ожидается поступление сообщения в очередь.</span><span class="sxs-lookup"><span data-stu-id="45ce5-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="45ce5-213">Поток заблокирован вплоть до указанного значения `timeout`.</span><span class="sxs-lookup"><span data-stu-id="45ce5-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="45ce5-214">Если работа приложения должна продолжаться без ожидания, используйте асинхронный метод <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="45ce5-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45ce5-215">В следующем примере кода показано, как реализовать этот метод.</span><span class="sxs-lookup"><span data-stu-id="45ce5-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="45ce5-216">Операция возвращает значение <see langword="false" />, если превышено указанное время ожидания <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="45ce5-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
