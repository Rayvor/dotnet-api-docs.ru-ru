<Type Name="SupportedAddressingMode" FullName="System.ServiceModel.Channels.SupportedAddressingMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed6ff44a3743f1203dea877309b989d8aaffda93" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70669596" /></Metadata><TypeSignature Language="C#" Value="public enum SupportedAddressingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SupportedAddressingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.SupportedAddressingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum SupportedAddressingMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class SupportedAddressingMode" />
  <TypeSignature Language="F#" Value="type SupportedAddressingMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="94cb3-101">Указывает, поддерживает ли служба отправку ответов только на анонимные адреса, только на неанонимные адреса, или на оба типа адресов.</span><span class="sxs-lookup"><span data-stu-id="94cb3-101">Specifies whether a service supports sending responses to anonymous addresses only, to non-anonymous addresses only, or to both.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94cb3-102">Это перечисление используется для задания возможностей сервера, который, в свою очередь, устанавливает требования для клиентов.</span><span class="sxs-lookup"><span data-stu-id="94cb3-102">This enumeration is used to specify the capability of a server, which, in turn, imposes a requirement on its clients.</span></span>  
  
 <span data-ttu-id="94cb3-103">Windows Communication Foundation (WCF) имеет множество элементов управления адресацией для указания места отправки сообщений.</span><span class="sxs-lookup"><span data-stu-id="94cb3-103">Windows Communication Foundation (WCF) has a variety of addressing controls for specifying where messages should be sent.</span></span> <span data-ttu-id="94cb3-104">Например, есть логический адрес <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> для места назначения сообщения, физический адрес ("Via"), который используется транспортом, прослушиваемым службой, и адрес <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> конечной точки, содержащий адрес конечной точки клиента.</span><span class="sxs-lookup"><span data-stu-id="94cb3-104">For example, there is the logical <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> address for the message destination, the physical ("Via") address, used by the transport, at which a service listens, and the <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> address of the endpoint that provides the address of the client endpoint.</span></span>  
  
 <span data-ttu-id="94cb3-105">В самом общем случае, когда две стороны обмениваются сообщениями только между собой, нет необходимости отдельно задавать эти адреса.</span><span class="sxs-lookup"><span data-stu-id="94cb3-105">In the most basic case, when two parties exchange messages between themselves only, it is not necessary to specify these addresses separately.</span></span> <span data-ttu-id="94cb3-106">Но так как в обмене сообщениями могут быть задействованы другие пункты назначения, нужно уметь определить, когда требуется задать эти адреса явно.</span><span class="sxs-lookup"><span data-stu-id="94cb3-106">But because exchanges can involve other message destinations, you must be able to specify when addresses must be explicitly provided.</span></span> <span data-ttu-id="94cb3-107">Даже при взаимодействии только двух сторон это иногда может потребоваться, как, например, в случае с двусторонним HTTP-взаимодействием, когда сервер должен создавать собственный HTTP-запрос.</span><span class="sxs-lookup"><span data-stu-id="94cb3-107">Even between just two parties this ability is sometimes required, as with dual HTTP where the server must create its own HTTP request.</span></span> <span data-ttu-id="94cb3-108">Следующие типы отношений определены перечислением <xref:System.ServiceModel.Channels.SupportedAddressingMode> для описания шаблонов обмена сообщениями.</span><span class="sxs-lookup"><span data-stu-id="94cb3-108">The following kinds of relationships are defined by the <xref:System.ServiceModel.Channels.SupportedAddressingMode> enumeration to capture these messaging patterns:</span></span>  
  
-   <span data-ttu-id="94cb3-109">Анонимные адреса являются наиболее базовыми формами адресации.</span><span class="sxs-lookup"><span data-stu-id="94cb3-109">Anonymous addresses are the most basic form of addressing.</span></span> <span data-ttu-id="94cb3-110">Анонимная адресация используется, если есть путь ответа по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="94cb3-110">Anonymous addressing is used when there is a default path for a response.</span></span> <span data-ttu-id="94cb3-111">Протокол TCP — это двунаправленный транспорт, ответ на сообщение TCP может быть отправлен обратно на тот же сокет, с которого пришло исходное сообщение.</span><span class="sxs-lookup"><span data-stu-id="94cb3-111">TCP is a bi-directional communication transport and the response to a TCP message can be sent back to the other side of the socket that sent the original message.</span></span> <span data-ttu-id="94cb3-112">Аналогично, модель запрос-ответ протокола HTTP отправляет ответы по каналу HTTP-ответа.</span><span class="sxs-lookup"><span data-stu-id="94cb3-112">Similarly, the request-reply model of HTTP sends responses through the HTTP reply channel.</span></span> <span data-ttu-id="94cb3-113">Ни один из этих двух видов ответов не требует указания, куда идут сообщения ответа-HTTP.</span><span class="sxs-lookup"><span data-stu-id="94cb3-113">Neither of these responses requires specifying where the response messages are going.</span></span> <span data-ttu-id="94cb3-114">Если сервер требует анонимных ответов от клиента, он использует анонимное значение перечисления.</span><span class="sxs-lookup"><span data-stu-id="94cb3-114">When a server requires anonymous responses from the client, it uses the Anonymous value of the enumeration.</span></span> <span data-ttu-id="94cb3-115">Предоставляемая <xref:System.ServiceModel.NetTcpBinding> <xref:System.ServiceModel.WSHttpBinding> системой WCF и привязки всегда используют анонимные адреса. <xref:System.ServiceModel.BasicHttpBinding></span><span class="sxs-lookup"><span data-stu-id="94cb3-115">The WCF system-provided <xref:System.ServiceModel.NetTcpBinding>, <xref:System.ServiceModel.BasicHttpBinding> and <xref:System.ServiceModel.WSHttpBinding> bindings always use Anonymous addresses.</span></span>  
  
-   <span data-ttu-id="94cb3-116">Неанонимные адреса, используемые при отправке ответа, требуют создания нового канала для обмена данными.</span><span class="sxs-lookup"><span data-stu-id="94cb3-116">NonAnonymous addresses are used when sending the response requires creating a new channel for communication.</span></span> <span data-ttu-id="94cb3-117">Привязка, предоставляемая <xref:System.ServiceModel.WSDualHttpBinding> системой WCF, использует неанонимный адрес.</span><span class="sxs-lookup"><span data-stu-id="94cb3-117">The WCF system-provided <xref:System.ServiceModel.WSDualHttpBinding> binding uses a NonAnonymous address.</span></span> <span data-ttu-id="94cb3-118">При двустороннем HTTP-взаимодействии клиент создает HTTP-запрос для отправки сообщения, а затем сервер должен создать собственный HTTP-запрос для отправки ответа.</span><span class="sxs-lookup"><span data-stu-id="94cb3-118">With dual HTTP, the client creates an HTTP request to send a message and then the server must create its own HTTP request to send a response.</span></span> <span data-ttu-id="94cb3-119">Поскольку сервер инициирует отправку, он должен указать определенную конечную точку для установки соединения.</span><span class="sxs-lookup"><span data-stu-id="94cb3-119">Because the server is initiating the send, it must have a specific endpoint to establish the connection.</span></span> <span data-ttu-id="94cb3-120">Необходимо предоставить серверу адрес конечной точки для ответа.</span><span class="sxs-lookup"><span data-stu-id="94cb3-120">You must provide the server the address of an endpoint for its response.</span></span> <span data-ttu-id="94cb3-121">Аналогичным образом, если служба должна реагировать на однонаправленное сообщение, оно также требует неанонимного адреса, так как нет доступного обратного канала для обмена данными.</span><span class="sxs-lookup"><span data-stu-id="94cb3-121">Similarly, if a service must respond to a one-way message that it received, it also requires a NonAnonymous address because there is no back channel available for communication.</span></span> <span data-ttu-id="94cb3-122">Если сервер отправляет сообщение обратно, требуется совершенно отдельная операция, не связанная с операцией отправки первого сообщения.</span><span class="sxs-lookup"><span data-stu-id="94cb3-122">If the server sends a message back, a completely separate operation from that used to send the first message is required.</span></span>  
  
-   <span data-ttu-id="94cb3-123">Mixed — это третья форма адресации, которая сочетает анонимные и неанонимные адреса в зависимости от отправляемого сообщения.</span><span class="sxs-lookup"><span data-stu-id="94cb3-123">Mixed is a third form of addressing which combines Anonymous and NonAnonymous addresses depending on the message that is being sent.</span></span> <span data-ttu-id="94cb3-124">Типичный пример адресации в режиме Mixed — использование выделенного компьютера для обработки сообщений об ошибках и подтверждений.</span><span class="sxs-lookup"><span data-stu-id="94cb3-124">A typical example of mixed-mode addressing is the use of a dedicated machine for processing fault or acknowledgment messages.</span></span> <span data-ttu-id="94cb3-125">Если стандартная последовательность обмена для ответов — HTTP или TCP, ответы используют анонимную адресацию, но ошибки используют неанонимную адресацию.</span><span class="sxs-lookup"><span data-stu-id="94cb3-125">If the standard exchange sequence for replies is HTTP or TCP, the responses use Anonymous addressing but the faults use non-anonymous addressing.</span></span> <span data-ttu-id="94cb3-126">Хотя WCF не предоставляет функции смешанной адресации в одной из своих стандартных привязок, можно написать канал, позволяющий службе отправлять ответы непосредственно на канале обратной связи (если адрес ответа анонимный) или в отдельном канале (если адрес отклика не является анонимным.</span><span class="sxs-lookup"><span data-stu-id="94cb3-126">While WCF does not provide Mixed addressing functionality in one of its standard bindings, it is possible to write a channel that allows the service to send responses directly on the back-channel (when the response address is Anonymous) or on a separate channel (when the response address is NonAnonymous).</span></span> <span data-ttu-id="94cb3-127">В этом случае элемент привязки канала используется для установки <xref:System.ServiceModel.Channels.SupportedAddressingMode> смешанного типа.</span><span class="sxs-lookup"><span data-stu-id="94cb3-127">In such a case, the binding element of the channel is used to set <xref:System.ServiceModel.Channels.SupportedAddressingMode> to Mixed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="Anonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Anonymous = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Anonymous" />
      <MemberSignature Language="C++ CLI" Value="Anonymous" />
      <MemberSignature Language="F#" Value="Anonymous = 0" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="94cb3-128">Сервер поддерживает только анонимные адреса и клиенты должны предоставлять анонимный обратный адрес.</span><span class="sxs-lookup"><span data-stu-id="94cb3-128">The server only supports anonymous addresses and clients must provide an anonymous response address.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="Mixed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Mixed = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberSignature Language="VB.NET" Value="Mixed" />
      <MemberSignature Language="C++ CLI" Value="Mixed" />
      <MemberSignature Language="F#" Value="Mixed = 2" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="94cb3-129">Сервер поддерживает анонимные и неанонимные адреса и клиенты могут выбрать использовать один из них или оба.</span><span class="sxs-lookup"><span data-stu-id="94cb3-129">The server supports both anonymous and non-anonymous addresses and clients may choose to use either or both.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="NonAnonymous">
      <MemberSignature Language="C#" Value="NonAnonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode NonAnonymous = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberSignature Language="VB.NET" Value="NonAnonymous" />
      <MemberSignature Language="C++ CLI" Value="NonAnonymous" />
      <MemberSignature Language="F#" Value="NonAnonymous = 1" Usage="System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="94cb3-130">Сервер поддерживает только неанонимные адреса и клиенты должны предоставлять неанонимный обратный адрес.</span><span class="sxs-lookup"><span data-stu-id="94cb3-130">The server only supports non-anonymous addresses and clients must provide a non-anonymous response address.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
