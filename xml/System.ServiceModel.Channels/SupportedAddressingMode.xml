<Type Name="SupportedAddressingMode" FullName="System.ServiceModel.Channels.SupportedAddressingMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed6ff44a3743f1203dea877309b989d8aaffda93" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69107167" /></Metadata><TypeSignature Language="C#" Value="public enum SupportedAddressingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SupportedAddressingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.SupportedAddressingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum SupportedAddressingMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class SupportedAddressingMode" />
  <TypeSignature Language="F#" Value="type SupportedAddressingMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Указывает, поддерживает ли служба отправку ответов только на анонимные адреса, только на неанонимные адреса, или на оба типа адресов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это перечисление используется для задания возможностей сервера, который, в свою очередь, устанавливает требования для клиентов.  
  
 Windows Communication Foundation (WCF) имеет множество элементов управления адресацией для указания места отправки сообщений. Например, есть логический адрес <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> для места назначения сообщения, физический адрес ("Via"), который используется транспортом, прослушиваемым службой, и адрес <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> конечной точки, содержащий адрес конечной точки клиента.  
  
 В самом общем случае, когда две стороны обмениваются сообщениями только между собой, нет необходимости отдельно задавать эти адреса. Но так как в обмене сообщениями могут быть задействованы другие пункты назначения, нужно уметь определить, когда требуется задать эти адреса явно. Даже при взаимодействии только двух сторон это иногда может потребоваться, как, например, в случае с двусторонним HTTP-взаимодействием, когда сервер должен создавать собственный HTTP-запрос. Следующие типы отношений определены перечислением <xref:System.ServiceModel.Channels.SupportedAddressingMode> для описания шаблонов обмена сообщениями.  
  
-   Анонимные адреса являются наиболее базовыми формами адресации. Анонимная адресация используется, если есть путь ответа по умолчанию. Протокол TCP — это двунаправленный транспорт, ответ на сообщение TCP может быть отправлен обратно на тот же сокет, с которого пришло исходное сообщение. Аналогично, модель запрос-ответ протокола HTTP отправляет ответы по каналу HTTP-ответа. Ни один из этих двух видов ответов не требует указания, куда идут сообщения ответа-HTTP. Если сервер требует анонимных ответов от клиента, он использует анонимное значение перечисления. Предоставляемая <xref:System.ServiceModel.NetTcpBinding> <xref:System.ServiceModel.WSHttpBinding> системой WCF и привязки всегда используют анонимные адреса. <xref:System.ServiceModel.BasicHttpBinding>  
  
-   Неанонимные адреса, используемые при отправке ответа, требуют создания нового канала для обмена данными. Привязка, предоставляемая <xref:System.ServiceModel.WSDualHttpBinding> системой WCF, использует неанонимный адрес. При двустороннем HTTP-взаимодействии клиент создает HTTP-запрос для отправки сообщения, а затем сервер должен создать собственный HTTP-запрос для отправки ответа. Поскольку сервер инициирует отправку, он должен указать определенную конечную точку для установки соединения. Необходимо предоставить серверу адрес конечной точки для ответа. Аналогичным образом, если служба должна реагировать на однонаправленное сообщение, оно также требует неанонимного адреса, так как нет доступного обратного канала для обмена данными. Если сервер отправляет сообщение обратно, требуется совершенно отдельная операция, не связанная с операцией отправки первого сообщения.  
  
-   Mixed — это третья форма адресации, которая сочетает анонимные и неанонимные адреса в зависимости от отправляемого сообщения. Типичный пример адресации в режиме Mixed — использование выделенного компьютера для обработки сообщений об ошибках и подтверждений. Если стандартная последовательность обмена для ответов — HTTP или TCP, ответы используют анонимную адресацию, но ошибки используют неанонимную адресацию. Хотя WCF не предоставляет функции смешанной адресации в одной из своих стандартных привязок, можно написать канал, позволяющий службе отправлять ответы непосредственно на канале обратной связи (если адрес ответа анонимный) или в отдельном канале (если адрес отклика не является анонимным. В этом случае элемент привязки канала используется для установки <xref:System.ServiceModel.Channels.SupportedAddressingMode> смешанного типа.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="Anonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Anonymous = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Anonymous" />
      <MemberSignature Language="C++ CLI" Value="Anonymous" />
      <MemberSignature Language="F#" Value="Anonymous = 0" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Сервер поддерживает только анонимные адреса и клиенты должны предоставлять анонимный обратный адрес.</summary>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="Mixed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Mixed = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberSignature Language="VB.NET" Value="Mixed" />
      <MemberSignature Language="C++ CLI" Value="Mixed" />
      <MemberSignature Language="F#" Value="Mixed = 2" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Сервер поддерживает анонимные и неанонимные адреса и клиенты могут выбрать использовать один из них или оба.</summary>
      </Docs>
    </Member>
    <Member MemberName="NonAnonymous">
      <MemberSignature Language="C#" Value="NonAnonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode NonAnonymous = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberSignature Language="VB.NET" Value="NonAnonymous" />
      <MemberSignature Language="C++ CLI" Value="NonAnonymous" />
      <MemberSignature Language="F#" Value="NonAnonymous = 1" Usage="System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Сервер поддерживает только неанонимные адреса и клиенты должны предоставлять неанонимный обратный адрес.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
