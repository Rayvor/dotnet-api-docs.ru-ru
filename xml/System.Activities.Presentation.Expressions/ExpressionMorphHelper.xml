<Type Name="ExpressionMorphHelper" FullName="System.Activities.Presentation.Expressions.ExpressionMorphHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8553fde2f8aff073b15bbd75f900f565693267e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69308475" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionMorphHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionMorphHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Expressions.ExpressionMorphHelper" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionMorphHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionMorphHelper abstract" />
  <TypeSignature Language="F#" Value="type ExpressionMorphHelper = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет вспомогательное средство трансформации выражений.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionMorphHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionMorphHelper();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Activities.Presentation.Expressions.ExpressionMorphHelper" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInferReturnType">
      <MemberSignature Language="C#" Value="public virtual bool TryInferReturnType (System.Activities.ActivityWithResult expression, System.Activities.Presentation.EditingContext context, out Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInferReturnType(class System.Activities.ActivityWithResult expression, class System.Activities.Presentation.EditingContext context, [out] class System.Type&amp; returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.TryInferReturnType(System.Activities.ActivityWithResult,System.Activities.Presentation.EditingContext,System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInferReturnType (expression As ActivityWithResult, context As EditingContext, ByRef returnType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInferReturnType(System::Activities::ActivityWithResult ^ expression, System::Activities::Presentation::EditingContext ^ context, [Runtime::InteropServices::Out] Type ^ % returnType);" />
      <MemberSignature Language="F#" Value="abstract member TryInferReturnType : System.Activities.ActivityWithResult * System.Activities.Presentation.EditingContext *  -&gt; bool&#xA;override this.TryInferReturnType : System.Activities.ActivityWithResult * System.Activities.Presentation.EditingContext *  -&gt; bool" Usage="expressionMorphHelper.TryInferReturnType (expression, context, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.ActivityWithResult" />
        <Parameter Name="context" Type="System.Activities.Presentation.EditingContext" />
        <Parameter Name="returnType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">Используемое выражение.</param>
        <param name="context">Контекст.</param>
        <param name="returnType">Возвращаемый тип выражения.</param>
        <summary>Возвращает значение, указывающее, пытается ли выражение определить тип возвращаемого значения.</summary>
        <returns>Значение <see langword="true" />, если выражение пытается определить тип возвращаемого значения; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryMorphExpression">
      <MemberSignature Language="C#" Value="public abstract bool TryMorphExpression (System.Activities.ActivityWithResult expression, bool isLocationExpression, Type newType, System.Activities.Presentation.EditingContext context, out System.Activities.ActivityWithResult newExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryMorphExpression(class System.Activities.ActivityWithResult expression, bool isLocationExpression, class System.Type newType, class System.Activities.Presentation.EditingContext context, [out] class System.Activities.ActivityWithResult&amp; newExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.TryMorphExpression(System.Activities.ActivityWithResult,System.Boolean,System.Type,System.Activities.Presentation.EditingContext,System.Activities.ActivityWithResult@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryMorphExpression (expression As ActivityWithResult, isLocationExpression As Boolean, newType As Type, context As EditingContext, ByRef newExpression As ActivityWithResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryMorphExpression(System::Activities::ActivityWithResult ^ expression, bool isLocationExpression, Type ^ newType, System::Activities::Presentation::EditingContext ^ context, [Runtime::InteropServices::Out] System::Activities::ActivityWithResult ^ % newExpression);" />
      <MemberSignature Language="F#" Value="abstract member TryMorphExpression : System.Activities.ActivityWithResult * bool * Type * System.Activities.Presentation.EditingContext *  -&gt; bool" Usage="expressionMorphHelper.TryMorphExpression (expression, isLocationExpression, newType, context, newExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.ActivityWithResult" />
        <Parameter Name="isLocationExpression" Type="System.Boolean" />
        <Parameter Name="newType" Type="System.Type" />
        <Parameter Name="context" Type="System.Activities.Presentation.EditingContext" />
        <Parameter Name="newExpression" Type="System.Activities.ActivityWithResult" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">Выражение для преобразования.</param>
        <param name="isLocationExpression">Значение <see langword="true" />, если выражение является выражением расположения; в противном случае — значение <see langword="false" />.</param>
        <param name="newType">Новый тип выражения.</param>
        <param name="context">Контекст.</param>
        <param name="newExpression">Новое выражение.</param>
        <summary>Возвращает значение, показывающее, пытается ли выражение трансформироваться.</summary>
        <returns>Трансформированное выражение.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
