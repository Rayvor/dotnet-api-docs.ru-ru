<Type Name="ActiveXMessageFormatter" FullName="System.Messaging.ActiveXMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="728278d4003b29b63c3bf1a601347657ad8adec0" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64012734" /></Metadata><TypeSignature Language="C#" Value="public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActiveXMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ActiveXMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class ActiveXMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActiveXMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type ActiveXMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ed98e-101">Сериализует элементарные типы данных и другие объекты в текст сообщений Message Queuing или десериализует эти сообщения, используя формат, совместимый с MSMQ ActiveX Component.</span><span class="sxs-lookup"><span data-stu-id="ed98e-101">Serializes or deserializes primitive data types and other objects to or from the body of a Message Queuing message, using a format that is compatible with the MSMQ ActiveX Component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed98e-102"><xref:System.Messaging.ActiveXMessageFormatter> Совместима с сообщения, отправляемые через компонентами Message Queuing COM, что позволяет обеспечить взаимодействие с приложениями, использующими элемент управления COM, MSMQ.</span><span class="sxs-lookup"><span data-stu-id="ed98e-102">The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with messages sent using Message Queuing COM components, allowing interoperability with applications that use the MSMQ COM control.</span></span>  
  
 <span data-ttu-id="ed98e-103"><xref:System.Messaging.ActiveXMessageFormatter> Можно сериализовать большинство примитивов, а также объекты, реализующие `IPersistStream` интерфейс OLE.</span><span class="sxs-lookup"><span data-stu-id="ed98e-103">The <xref:System.Messaging.ActiveXMessageFormatter> can serialize most primitives, as well as objects that implement the `IPersistStream` OLE interface.</span></span> <span data-ttu-id="ed98e-104">Он может выполнить десериализацию тот же набор примитивов, но требуется выполнить дополнительные действия при десериализации объект COM (например, объект, созданный с помощью Visual Basic 6.0), который реализует `IPersistStream`.</span><span class="sxs-lookup"><span data-stu-id="ed98e-104">It can deserialize the same set of primitives, but requires further effort when deserializing a COM object (for example, an object created using Visual Basic 6.0) that implements `IPersistStream`.</span></span> <span data-ttu-id="ed98e-105">Десериализуемый объект должен находиться в памяти при первом импорте объекта в приложении .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="ed98e-105">The object to deserialize must be in memory by first importing the object into a .NET Framework application.</span></span>  
  
 <span data-ttu-id="ed98e-106">Когда приложение отправляет сообщение в очередь, используя экземпляр <xref:System.Messaging.MessageQueue> класс, модуль форматирования сериализует объект в поток и вставляет его в тело сообщения.</span><span class="sxs-lookup"><span data-stu-id="ed98e-106">When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object into a stream and inserts it into the message body.</span></span> <span data-ttu-id="ed98e-107">При чтении из очереди с помощью <xref:System.Messaging.MessageQueue>, модуль форматирования десериализует данные из <xref:System.Messaging.Message.Body%2A> свойство <xref:System.Messaging.Message>.</span><span class="sxs-lookup"><span data-stu-id="ed98e-107">When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="ed98e-108">При сериализации ActiveX очень компактные, благодаря чему использование <xref:System.Messaging.ActiveXMessageFormatter> и COM, MSMQ управления очень быстрый метод сериализации.</span><span class="sxs-lookup"><span data-stu-id="ed98e-108">ActiveX serialization is very compact, which makes using the <xref:System.Messaging.ActiveXMessageFormatter> and MSMQ COM control a very fast method of serialization.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveXMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveXMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed98e-109">Инициализирует новый экземпляр класса <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-109">Initializes a new instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="activeXMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ed98e-110">Объект <see cref="T:System.Messaging.Message" /> для проверки.</span><span class="sxs-lookup"><span data-stu-id="ed98e-110">The <see cref="T:System.Messaging.Message" /> to inspect.</span></span></param>
        <summary><span data-ttu-id="ed98e-111">Определяет, может ли модуль форматирования выполнить десериализацию содержимого сообщения.</span><span class="sxs-lookup"><span data-stu-id="ed98e-111">Determines whether the formatter can deserialize the contents of the message.</span></span></summary>
        <returns><span data-ttu-id="ed98e-112">Значение <see langword="true" />, если класс <see cref="T:System.Messaging.ActiveXMessageFormatter" /> может выполнить десериализацию сообщения, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-112"><see langword="true" /> if the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> can deserialize the message; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed98e-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> Возвращает `false` Если тело сообщения не примитивный тип, который может десериализовать элемент управления Message Queuing ActiveX или если он не реализует `IPersistStream` интерфейс.</span><span class="sxs-lookup"><span data-stu-id="ed98e-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> returns `false` if the message body is not a primitive that the Message Queuing ActiveX control can deserialize or if it does not implement the `IPersistStream` interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ed98e-114">Параметр <paramref name="message" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-114">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="activeXMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ed98e-115">Создает экземпляр класса <see cref="T:System.Messaging.ActiveXMessageFormatter" />, идентичный текущему экземпляру <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-115">Creates an instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class that is identical to the current <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></summary>
        <returns><span data-ttu-id="ed98e-116">Объект со свойствами, идентичными свойствам этого объекта <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-116">An object whose properties are identical to those of this <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed98e-117">Этот метод используется <xref:System.Messaging.MessageQueue> класс для получения нескольких сообщений одновременно (например, если в приложении асинхронный прием).</span><span class="sxs-lookup"><span data-stu-id="ed98e-117">This method is used by the <xref:System.Messaging.MessageQueue> class in order to receive multiple messages at the same time (for example, if the application is receiving asynchronously).</span></span> <span data-ttu-id="ed98e-118">Обычно не нужно вызывать этот метод в коде приложения.</span><span class="sxs-lookup"><span data-stu-id="ed98e-118">You typically do not need to call this method in your application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="InitStreamedObject">
      <MemberSignature Language="C#" Value="public static void InitStreamedObject (object streamedObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitStreamedObject(object streamedObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitStreamedObject (streamedObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitStreamedObject(System::Object ^ streamedObject);" />
      <MemberSignature Language="F#" Value="static member InitStreamedObject : obj -&gt; unit" Usage="System.Messaging.ActiveXMessageFormatter.InitStreamedObject streamedObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamedObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="streamedObject"><span data-ttu-id="ed98e-119">Объект OLE, который реализует <see langword="IPersistStreamInit" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-119">An OLE object that implements <see langword="IPersistStreamInit" />.</span></span></param>
        <summary><span data-ttu-id="ed98e-120">Предоставляет служебную программу, которая помогает сериализовать COM-объекты, реализующие интерфейс <see langword="IPersistStream" /> и нуждающиеся в вызове <see langword="IPersistStreamInit" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-120">Provides a utility to help serialize COM objects that implement <see langword="IPersistStream" /> and require <see langword="IPersistStreamInit" /> to be called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="activeXMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ed98e-121">Сообщение <see cref="T:System.Messaging.Message" /> в формате элемента управления MSMQ ActiveX, которое требуется десериализовать.</span><span class="sxs-lookup"><span data-stu-id="ed98e-121">The <see cref="T:System.Messaging.Message" />, in MSMQ ActiveX control format, to deserialize.</span></span></param>
        <summary><span data-ttu-id="ed98e-122">Считывает содержимое из данного сообщения и создает объект, содержащий десериализованное сообщение.</span><span class="sxs-lookup"><span data-stu-id="ed98e-122">Reads the contents from the given message and creates an object that contains the deserialized message.</span></span></summary>
        <returns><span data-ttu-id="ed98e-123">Десериализованное сообщение.</span><span class="sxs-lookup"><span data-stu-id="ed98e-123">The deserialized message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed98e-124">Если тело сообщения представляет тип-примитив, сообщение <xref:System.Messaging.Message.BodyType%2A> свойство должно иметь один из управляемых типов в следующей таблице.</span><span class="sxs-lookup"><span data-stu-id="ed98e-124">If the body of the message represents a primitive type, the message's <xref:System.Messaging.Message.BodyType%2A> property must be one of the managed types in the following table.</span></span>  
  
|<span data-ttu-id="ed98e-125">Значение типа текста сообщения</span><span class="sxs-lookup"><span data-stu-id="ed98e-125">BodyType value</span></span>|<span data-ttu-id="ed98e-126">Управляемый тип</span><span class="sxs-lookup"><span data-stu-id="ed98e-126">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="ed98e-127">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="ed98e-127">VT_LPSTR</span></span>|<span data-ttu-id="ed98e-128"><xref:System.Char> массив (десериализация с использованием кодировки ASCII)</span><span class="sxs-lookup"><span data-stu-id="ed98e-128"><xref:System.Char> array (deserialized using ASCII encoding)</span></span>|  
|<span data-ttu-id="ed98e-129">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="ed98e-129">VT_BSTR, VT_LPWSTR</span></span>|<span data-ttu-id="ed98e-130"><xref:System.String> (десериализация с использованием кодировки Юникод)</span><span class="sxs-lookup"><span data-stu-id="ed98e-130"><xref:System.String> (deserialized using Unicode encoding)</span></span>|  
|<span data-ttu-id="ed98e-131">VT_VECTOR &#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="ed98e-131">VT_VECTOR &#124; VT_UI1</span></span>|<span data-ttu-id="ed98e-132">Массив <xref:System.Byte></span><span class="sxs-lookup"><span data-stu-id="ed98e-132"><xref:System.Byte> array</span></span>|  
|<span data-ttu-id="ed98e-133">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="ed98e-133">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="ed98e-134">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="ed98e-134">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="ed98e-135">VT_CY</span><span class="sxs-lookup"><span data-stu-id="ed98e-135">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="ed98e-136">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="ed98e-136">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="ed98e-137">VT_I1, VT_UI1</span><span class="sxs-lookup"><span data-stu-id="ed98e-137">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="ed98e-138">VT_I2</span><span class="sxs-lookup"><span data-stu-id="ed98e-138">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="ed98e-139">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="ed98e-139">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="ed98e-140">VT_I4</span><span class="sxs-lookup"><span data-stu-id="ed98e-140">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="ed98e-141">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="ed98e-141">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="ed98e-142">VT_I8</span><span class="sxs-lookup"><span data-stu-id="ed98e-142">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="ed98e-143">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="ed98e-143">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="ed98e-144">VT_R4</span><span class="sxs-lookup"><span data-stu-id="ed98e-144">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="ed98e-145">VT_R8</span><span class="sxs-lookup"><span data-stu-id="ed98e-145">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="ed98e-146">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="ed98e-146">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="ed98e-147">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="ed98e-147">VT_STREAMED_OBJECT</span></span>|<xref:System.Object>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ed98e-148">Свойство <see cref="P:System.Messaging.Message.BodyType" /> объекта <paramref name="message" />, передаваемое в качестве параметра, невозможно отобразить в элементарный тип, и это свойство не представляет потоковый объект.</span><span class="sxs-lookup"><span data-stu-id="ed98e-148">The <see cref="P:System.Messaging.Message.BodyType" /> property of the <paramref name="message" /> passed as a parameter cannot be mapped to a primitive type, nor does it represent a streamed object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ed98e-149">Текст представляет собой хранимый объект.</span><span class="sxs-lookup"><span data-stu-id="ed98e-149">The body represents a stored object.</span></span> <span data-ttu-id="ed98e-150"><see cref="T:System.Messaging.ActiveXMessageFormatter" /> не поддерживает десериализацию хранимых объектов.</span><span class="sxs-lookup"><span data-stu-id="ed98e-150">The <see cref="T:System.Messaging.ActiveXMessageFormatter" /> does not support deserialization of stored objects.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ed98e-151">Параметр <paramref name="message" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-151">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="activeXMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ed98e-152">Сообщение <see cref="T:System.Messaging.Message" />, свойство <see cref="P:System.Messaging.Message.Body" /> которого будет содержать сериализованный объект.</span><span class="sxs-lookup"><span data-stu-id="ed98e-152">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span></span></param>
        <param name="obj"><span data-ttu-id="ed98e-153">Объект, который должен быть сериализован в текст сообщения.</span><span class="sxs-lookup"><span data-stu-id="ed98e-153">The object to be serialized into the message body.</span></span></param>
        <summary><span data-ttu-id="ed98e-154">Сериализует объект в текст сообщения.</span><span class="sxs-lookup"><span data-stu-id="ed98e-154">Serializes an object into the body of the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed98e-155">В следующей таблице показаны связи между управляемых типов и <xref:System.Messaging.Message.BodyType%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="ed98e-155">The following table shows the relationship between managed types and the <xref:System.Messaging.Message.BodyType%2A> property.</span></span> <span data-ttu-id="ed98e-156">Сериализуемый объект должен быть одним из этих управляемых типов или должен реализовывать OLE `IPersistStream` интерфейс.</span><span class="sxs-lookup"><span data-stu-id="ed98e-156">The object that you serialize must be one of these managed types or must implement the OLE `IPersistStream` interface.</span></span>  
  
|<span data-ttu-id="ed98e-157">Значение типа текста сообщения</span><span class="sxs-lookup"><span data-stu-id="ed98e-157">BodyType value</span></span>|<span data-ttu-id="ed98e-158">Управляемый тип</span><span class="sxs-lookup"><span data-stu-id="ed98e-158">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="ed98e-159">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="ed98e-159">VT_LPSTR</span></span>|<xref:System.Char>|  
|<span data-ttu-id="ed98e-160">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="ed98e-160">VT_BSTR, VT_LPWSTR</span></span>|<xref:System.String>|  
|<span data-ttu-id="ed98e-161">VT_VECTOR &#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="ed98e-161">VT_VECTOR &#124; VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="ed98e-162">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="ed98e-162">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="ed98e-163">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="ed98e-163">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="ed98e-164">VT_CY</span><span class="sxs-lookup"><span data-stu-id="ed98e-164">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="ed98e-165">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="ed98e-165">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="ed98e-166">VT_I1, VT_UI1</span><span class="sxs-lookup"><span data-stu-id="ed98e-166">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="ed98e-167">VT_I2</span><span class="sxs-lookup"><span data-stu-id="ed98e-167">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="ed98e-168">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="ed98e-168">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="ed98e-169">VT_I4</span><span class="sxs-lookup"><span data-stu-id="ed98e-169">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="ed98e-170">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="ed98e-170">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="ed98e-171">VT_I8</span><span class="sxs-lookup"><span data-stu-id="ed98e-171">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="ed98e-172">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="ed98e-172">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="ed98e-173">VT_R4</span><span class="sxs-lookup"><span data-stu-id="ed98e-173">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="ed98e-174">VT_R8</span><span class="sxs-lookup"><span data-stu-id="ed98e-174">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="ed98e-175">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="ed98e-175">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="ed98e-176">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="ed98e-176">VT_STREAMED_OBJECT</span></span>|<span data-ttu-id="ed98e-177">`IPersistStream` (OLE) <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="ed98e-177">`IPersistStream` (OLE) <xref:System.Object></span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ed98e-178">Сериализуемый объект не является ни примитивом, ни потоковым объектом, реализующим OLE-интерфейс <see langword="IPersistStream" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-178">The object to serialize is neither a primitive nor a streamed object that implements the OLE <see langword="IPersistStream" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ed98e-179">Параметр <paramref name="message" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ed98e-179">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>