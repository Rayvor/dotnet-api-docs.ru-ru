<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e3490f70119c8c572eb3d2d44434ff7788fc926" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69382653" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет курсор, перемещающийся только в прямом направлении, для перечисления сообщений в очереди сообщений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используется <xref:System.Messaging.MessageEnumerator> для динамического взаимодействия с сообщениями в очереди. Методы, доступные через <xref:System.Messaging.MessageQueue> класс, могут возвращать <xref:System.Messaging.MessageEnumerator> либо указатель на динамический список сообщений в очереди, либо массив, содержащий копию в заданном мгновенном снимке очереди на момент вызова указанного метода.  
  
 В отличие от статического моментального снимка, перечислитель позволяет изменить коллекцию. <xref:System.Messaging.MessageEnumerator>С помощью можно удалять сообщения из очереди, после чего изменение немедленно отражается в очереди.  
  
 Перечислитель не удаляет сообщения из очереди при запросе очереди. Он возвращает сведения о сообщении в текущей позиции курсора, но оставляет сообщение в очереди.  
  
 A <xref:System.Messaging.MessageEnumerator> — это курсор, инициализированный в заголовке динамического списка. Порядок в списке совпадает с порядком сообщений в очереди в соответствии с приоритетом сообщения. Курсор можно переместить в первое сообщение в очереди, вызвав метод <xref:System.Messaging.MessageEnumerator.MoveNext%2A>. После инициализации перечислителя можно использовать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> для прохода по оставшимся сообщениям. Можно указать, следует ли дождаться, пока сообщение станет доступным, передав <xref:System.Messaging.MessageEnumerator.MoveNext%2A> методу время ожидания.  
  
 Так как перечислитель является динамическим, сообщение, добавляемое за пределы текущей позиции курсора (например, из-за низкого приоритета), может быть получено перечислителем. Не удается получить доступ к сообщению, вставленному до текущей позиции курсора. Невозможно выполнить шаг назад с <xref:System.Messaging.MessageEnumerator>. Курсор позволяет перемещаться только вперед. <xref:System.Messaging.MessageEnumerator.Reset%2A> Метод позволяет поместить курсор обратно в начало очереди.  
  
 <xref:System.Messaging.MessageEnumerator> Экземпляры для заданной очереди работают независимо друг от друга. Можно создать два <xref:System.Messaging.MessageEnumerator> экземпляра, которые применяются к одной очереди. Изменения, вносимые одним <xref:System.Messaging.MessageEnumerator> из сообщений в очереди, будут немедленно отражены во втором перечислителе, если второй перечислитель расположен перед первым. Однако если два перечислителей имеют одинаковое расположение и один из них удаляет сообщение в этой позиции, возникает исключение, если другой перечислитель попытается получить значение <xref:System.Messaging.MessageEnumerator.Current%2A> свойства в сообщении, которое уже удалено.  
  
> [!NOTE]
>  Если создается экземпляр <xref:System.Messaging.MessageQueue> с <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> параметром `true`, то другие приложения не могут изменять сообщения в перечислителе, пока имеется соединение с очередью.  
  
   
  
## Examples  
 В следующем примере показано получение динамического списка сообщений в очереди и подсчет всех сообщений, для <xref:System.Messaging.Message.Priority%2A> <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>которых свойство имеет значение.  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, связанные с перечислителем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операционная система удерживает открытый обработчик в очереди в течение времени существования курсора. После завершения работы с перечислителем вызовите метод <xref:System.Messaging.MessageEnumerator.Close%2A> , чтобы освободить ресурсы, связанные с этим маркером.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущий объект <see cref="T:System.Messaging.Message" />, на который указывает перечислитель.</summary>
        <value>Текущее сообщение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании перечислителя он указывает на заголовок очереди в месте перед первым сообщением. В этом случае <xref:System.Messaging.MessageEnumerator.Current%2A> является недопустимым и вызовет исключение при обращении к нему. Необходимо вызвать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> , чтобы поместить курсор в первое сообщение в очереди.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вы вызвали <see cref="P:System.Messaging.MessageEnumerator.Current" /> до первого вызова <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />. Курсор располагается перед первым элементом перечисления сообщений.  
  
- или - 
Вы вызвали <see cref="P:System.Messaging.MessageEnumerator.Current" /> после вызова <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />, вернувшего <see langword="false" /> (это указывает, что курсор расположен за последним элементом перечисления сообщений).</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Сообщение, на которое указывает перечислитель, больше не существует. Возможно, они были удалены.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает собственный дескриптор курсора Message Queuing, используемый для просмотра сообщений в очереди.</summary>
        <value>Собственный дескриптор курсора.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство содержит собственный маркер перечисления. После завершения работы с перечислителем вызовите метод <xref:System.Messaging.MessageEnumerator.Close%2A> , чтобы освободить этот ресурс.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">Этот дескриптор не существует.</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Messaging.MessageEnumerator" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.Messaging.MessageEnumerator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Messaging.MessageEnumerator.Dispose%2A> позволяет перераспределить ресурсы, используемые <xref:System.Messaging.MessageEnumerator> в, для других целей. Дополнительные сведения о <xref:System.Messaging.MessageEnumerator.Dispose%2A>см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">Очистка неуправляемых ресурсов</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Messaging.MessageEnumerator" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается открытым <xref:System.Messaging.MessageEnumerator.Dispose%2A> методом <xref:System.Object.Finalize%2A> и методом. `Dispose()`вызывает защищенный `Dispose(Boolean)` метод с параметром `disposing` , для `true`которого задано значение. <xref:System.Object.Finalize%2A>вызывает метод `disposing` `false`с параметром, равным. `Dispose`  
  
 Если параметр `disposing` имеет значение `true`, то данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, на которые ссылается этот объект <xref:System.Messaging.MessageEnumerator>. Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Метод 
            <see langword="Dispose" /> может вызываться несколько раз другими объектами. При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />. Дополнительные сведения о реализации <see langword="Dispose" />см. в разделе [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
<see langword="Dispose" /> Дополнительные сведения о <see langword="Finalize" />и см. в разделе Очистка неуправляемых [ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и переопределение [метода Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">Очистка неуправляемых ресурсов</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые перечислителем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Этот метод переопределяет метод <xref:System.Object.Finalize>. Код приложения не должен вызывать этот метод; метод Finalize объекта автоматически вызывается во время сборки мусора, если окончательное завершение сборщика мусора не было отключено вызовом <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> метода.

Дополнительные сведения см. в статьях [методы Finalize и деструкторы](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md)и переопределение [метода Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Перемещает перечислитель на следующее сообщение в очереди.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель на следующее сообщение в очереди, если таковое в данный момент имеется.</summary>
        <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен на следующее сообщение; значение <see langword="false" />, если перечислитель достиг конца очереди.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка немедленно возвращает значение, если в очереди нет сообщения. Существует еще одна перегрузка, которая ожидает <xref:System.TimeSpan> поступления сообщения.  
  
 Если сообщение в настоящее время недоступно из-за того, что очередь пуста или если вы переместили за последний элемент <xref:System.Messaging.MessageEnumerator.MoveNext%2A> в `false` коллекции, функция возвращает вызывающему методу.  
  
 После создания перечислитель по сути позиционируется перед первым сообщением очереди, а первый вызов <xref:System.Messaging.MessageEnumerator.MoveNext%2A> возвращает первое сообщение очереди в представление.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">Возникло исключение, характерное для Message Queuing.</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Время <see cref="T:System.TimeSpan" /> на ожидание сообщения в случае, когда перечислитель устанавливается в конец очереди.</param>
        <summary>Перемещает перечислитель на следующее сообщение в очереди. Если перечислитель установлен в конец очереди, метод <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> ожидает до тех пор, пока не появится сообщение или же не истечет заданный тайм-аут.</summary>
        <returns>Значение <see langword="true" />, если перечислитель успешно переместился на следующее сообщение; значение <see langword="false" />, если перечислитель достиг конца очереди, и не появилось новое сообщение в течение времени, заданного параметром <paramref name="timeout" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка ожидает, если в очереди нет сообщения или если курсор достиг конца очереди. Если сообщение в настоящее время недоступно из-за того, что очередь пуста или вы перешли за последний элемент в <xref:System.Messaging.MessageEnumerator.MoveNext%2A> коллекции, ожидает указанное время ожидания.  
  
 Если курсор уже находится в конце очереди, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> то возвращает `true` , только если новое сообщение поступает в течение заданного интервала времени, имеет более низкий приоритет, чем все сообщения, находящиеся в очереди, и помещается в конец очереди. Перегрузка без параметров возвращает значение немедленно, если в очереди отсутствуют последующие сообщения.  
  
 После создания перечислитель по сути позиционируется перед первым сообщением перечисления, а первый вызов <xref:System.Messaging.MessageEnumerator.MoveNext%2A> возвращает первое сообщение перечисления в представление.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра timeout задано недопустимое значение. Возможно, это отрицательное число.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Возникло исключение, характерное для Message Queuing.  
  
 - или -  
  
 Истекло время тайм-аута.</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. При удалении сообщения оно стирается из очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поведение, описанное для этих перегрузок, применимо только <xref:System.Messaging.MessageEnumerator> в том случае, если экземпляр <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>извлекается с помощью. Не используйте <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> для получения <xref:System.Messaging.MessageEnumerator> экземпляра, так как этот метод является устаревшим.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет текущее сообщение из транзакционной или нетранзакционной очереди и возвращает сообщение в вызывающее приложение. Не указано время тайм-аута для прибытия сообщения в очередь.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Удаляет и возвращает сообщение в текущем расположении курсора.  
  
 Если вы используете ведение журнала очередей, удаление сообщения приводит к тому, что копия будет храниться в очереди журнала, как <xref:System.Messaging.MessageQueue> и <xref:System.Messaging.MessageQueue.Receive%2A> метод класса.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. После вызова <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>метода не нужно вызывать.  
  
 При вызове этой перегрузки в транзакционной очереди очередь сообщений создает одну внутреннюю транзакцию.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Объект <see cref="T:System.Messaging.MessageQueueTransaction" />, задающий транзакцию, в которой будет удалено сообщение.</param>
        <summary>Удаляет текущее сообщение из транзакционной очереди и возвращает сообщение в вызывающее приложение. Не указано время тайм-аута для прибытия сообщения в очередь.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Удаляет и возвращает сообщение в текущем расположении курсора, используя контекст внутренней транзакции, определенный `transaction` параметром.  
  
 Если вы используете ведение журнала очередей, удаление сообщения приводит к тому, что копия будет храниться в очереди журнала, как <xref:System.Messaging.MessageQueue> и <xref:System.Messaging.MessageQueue.Receive%2A> метод класса.  
  
 При работе с транзакционными очередями откат транзакции приводит к тому, что все сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> , возвращаются в очередь. Удаление необратимо до тех пор, пока транзакция не будет зафиксирована.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. После вызова <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>метода не нужно вызывать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="transaction" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">Одно из значений <see cref="T:System.Messaging.MessageQueueTransactionType" />, описывающее тип контекста транзакции, связываемого с сообщением.</param>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. Не указано время тайм-аута для прибытия сообщения в очередь.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Удаляет и возвращает сообщение в текущем расположении курсора, используя контекст транзакции, определенный `transactionType` параметром.  
  
 Укажите `Automatic` для параметра `transactionType` , если к потоку, который требуется использовать для получения сообщения, уже присоединен контекст внешней транзакции. Укажите `Single` , следует ли получить сообщение как единую внутреннюю транзакцию. Можно указать `None` , следует ли получить сообщение из транзакционной очереди за пределами контекста транзакции.  
  
 Если вы используете ведение журнала очередей, удаление сообщения приводит к тому, что копия будет храниться в очереди журнала, как <xref:System.Messaging.MessageQueue> и <xref:System.Messaging.MessageQueue.Receive%2A> метод класса.  
  
 При работе с транзакционными очередями откат транзакции приводит к тому, что все сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> , возвращаются в очередь. Удаление необратимо до тех пор, пока транзакция не будет зафиксирована.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. После вызова <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>метода не нужно вызывать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Параметр <paramref name="transactionType" /> не является одним из членов <see cref="T:System.Messaging.MessageQueueTransactionType" />.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Интервал времени ожидания прихода сообщения в очередь.</param>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. Если имеется сообщение для удаления, этот метод возвращает его немедленно. В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Удаляет и возвращает сообщение в текущем расположении курсора. Если курсор находится в конце очереди, эта перегрузка метода ожидает до тех пор, пока не будет доступно сообщение или не истечет интервал, заданный `timeout` параметром.  
  
 Если вы используете ведение журнала очередей, удаление сообщения приводит к тому, что копия будет храниться в очереди журнала, как <xref:System.Messaging.MessageQueue> и <xref:System.Messaging.MessageQueue.Receive%2A> метод класса.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. После вызова <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>метода не нужно вызывать.  
  
 При вызове этой перегрузки в транзакционной очереди очередь сообщений создает одну внутреннюю транзакцию.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра <paramref name="timeout" /> задано недопустимое значение.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Истекло время тайм-аута.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">Интервал времени ожидания удаления сообщения.</param>
        <param name="transaction">Объект <see cref="T:System.Messaging.MessageQueueTransaction" />, задающий контекст транзакции для сообщения.</param>
        <summary>Удаляет текущее сообщение из транзакционной очереди и возвращает сообщение в вызывающее приложение. Если имеется сообщение для удаления, этот метод возвращает его немедленно. В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Удаляет и возвращает сообщение в текущем расположении курсора. Если курсор находится в конце очереди, эта перегрузка метода ожидает до тех пор, пока не будет доступно сообщение или не истечет интервал, заданный `timeout` параметром.  
  
 При работе с транзакционными очередями откат транзакции приводит к тому, что все сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> , возвращаются в очередь. Удаление необратимо до тех пор, пока транзакция не будет зафиксирована.  
  
 Если вы используете ведение журнала очередей, удаление сообщения приводит к тому, что копия будет храниться в очереди журнала, как <xref:System.Messaging.MessageQueue> и <xref:System.Messaging.MessageQueue.Receive%2A> метод класса.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. После вызова <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>метода не нужно вызывать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра <paramref name="timeout" /> задано недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="transaction" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Истекло время тайм-аута.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">Интервал времени ожидания удаления сообщения.</param>
        <param name="transactionType">Одно из значений <see cref="T:System.Messaging.MessageQueueTransactionType" />, описывающее тип контекста транзакции, связываемого с сообщением.</param>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. Если имеется сообщение для удаления, этот метод возвращает его немедленно. В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Удаляет и возвращает сообщение в текущем расположении курсора, используя контекст транзакции, определенный `transactionType` параметром. Если курсор находится в конце очереди, эта перегрузка метода ожидает до тех пор, пока не будет доступно сообщение или не истечет интервал, заданный `timeout` параметром.  
  
 Укажите `Automatic` для параметра `transactionType` , если к потоку, который требуется использовать для получения сообщения, уже присоединен контекст внешней транзакции. Укажите `Single` , следует ли получить сообщение как единую внутреннюю транзакцию. Можно указать `None` , следует ли получить сообщение из транзакционной очереди за пределами контекста транзакции.  
  
 Если вы используете ведение журнала очередей, удаление сообщения приводит к тому, что копия будет храниться в очереди журнала, как <xref:System.Messaging.MessageQueue> и <xref:System.Messaging.MessageQueue.Receive%2A> метод класса.  
  
 При работе с транзакционными очередями откат транзакции приводит к тому, что все сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> , возвращаются в очередь. Удаление необратимо до тех пор, пока транзакция не будет зафиксирована.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. После вызова <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>метода не нужно вызывать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра <paramref name="timeout" /> задано недопустимое значение.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Истекло время тайм-аута.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Параметр <paramref name="transactionType" /> не является одним из членов <see cref="T:System.Messaging.MessageQueueTransactionType" />.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сбрасывает текущий перечислитель, теперь он указывает на заголовок очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перечислитель может перемещаться только в прямом направлении. Используйте этот метод для запуска в начале очереди.  
  
 После вызова <xref:System.Messaging.MessageEnumerator.Reset%2A>курсор указывает на первое сообщение. Вам не нужно вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.Reset%2A> , чтобы переместить курсор вперед к первому сообщению в очереди.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Messaging.Message" />, который ссылается на сообщение в текущей позиции курсора.</summary>
        <value>Объект <see cref="T:System.Messaging.Message" />, который ссылается на сообщение в текущей позиции курсора.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Пользователь обращается к этому свойству до первого вызова метода <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />. Курсор располагается перед первым элементом перечисления сообщений, или вы обращаетесь к этому свойству после того, как вызов <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> вернул значение false (показывающее, что курсор находится за последним элементом перечисления сообщений).</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Сообщение, на которое указывает перечислитель, больше не существует. Возможно, они были удалены.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
