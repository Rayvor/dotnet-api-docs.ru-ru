<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50e582e7de5f517024e715ec1b2bbd784b870a30" /><Meta Name="ms.sourcegitcommit" Value="81833381d2d0b5a8c55f71b43f00769fd38298af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/17/2019" /><Meta Name="ms.locfileid" Value="69571678" /></Metadata><TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type InstrumentationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет методы, которые управляют временем существования и моделью, используемой для несвязанных поставщиков.  
  
Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки. Для разработки новых приложений следует использовать [интерфейсы API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отделенные поставщики размещаются приложением. Приложение может использовать два метода, чтобы сделать доступными экземпляры классов WMI: Publish/REVOKE или метод обратного вызова. Метод обратного вызова использует <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> методы <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> и.  
  
 В модели публикации и отмены инфраструктура WMI предоставляет поведение по умолчанию для многих методов, которые необходимо написать в методе обратного вызова. К ним относятся методы перечисления и привязки. В этой модели приложение создает экземпляры и публикует их. Приложение несет ответственность за соблюдение ключевых свойств классов. Приложение также отвечает за удаление экземпляров.  
  
 В модели ответного вызова инфраструктура WMI требует, чтобы приложение имело методы, обрабатывающие перечисление, привязку и другие методы, необходимые для реализации функциональности поставщика. Она вызывает приложение для этой функции и завершается ошибкой, если она не существует или не реализована должным образом. Приложение регистрирует тип своих классов WMI в инфраструктуре, вызывая метод <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> , и указывает, что больше не требуется классов WMI, предоставляемых вызовом. <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>  
  
   
  
## Examples  
 В следующем примере показано, как использовать модель публикации и отмены. Создаются и публикуются два экземпляра класса Router. Они будут отозваны позже.  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 В следующем примере метод регистрации используется для предоставления класса Раутернев.  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish obj" FrameworkAlternate="netframework-4.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static void Publish (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish value" FrameworkAlternate="netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" FrameworkAlternate="netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Экземпляр класса, реализующий поставщик, который необходимо опубликовать.</param>
        <param name="obj">Экземпляр класса, реализующий поставщик, который необходимо опубликовать.</param>
        <summary>Делает экземпляр поставщика доступным в инфраструктуре WMI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member RegisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">Регистрируемая сборка.</param>
        <summary>Регистрирует сборку в инфраструктуре WMI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member RegisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">Тип класса.</param>
        <summary>Регистрирует класс в инфраструктуре WMI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke obj" FrameworkAlternate="netframework-4.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke value" FrameworkAlternate="netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" FrameworkAlternate="netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Экземпляр класса, реализующий поставщика, которого необходимо отозвать.</param>
        <param name="obj">Экземпляр класса, реализующий поставщика, которого необходимо отозвать.</param>
        <summary>Принимает экземпляр доступного в данный момент поставщика и делает его недоступным в инфраструктуре WMI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member UnregisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">Сборка, регистрация которой будет отменена.</param>
        <summary>Отменяет регистрацию сборки в инфраструктуре WMI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member UnregisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">Тип, регистрация которого будет отменена.</param>
        <summary>Отменяет регистрацию класса в инфраструктуре WMI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
