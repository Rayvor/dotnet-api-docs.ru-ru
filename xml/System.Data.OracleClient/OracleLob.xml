<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa9dd409c0f67866e6d19aa2f3fa7d1a852dcf07" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63891626" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Представляет двоичный тип данных больших объектов (<see langword="LOB" />), хранящихся на сервере Oracle. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Отличается от <xref:System.Data.OracleClient.OracleBFile> тем, что данные хранятся на сервере, а не в физическом файле в операционной системе. Он также может быть объект чтения и записи, в отличие от <xref:System.Data.OracleClient.OracleBFile>, который всегда имеет только для чтения.  
  
 <xref:System.Data.OracleClient.OracleLob> Может принимать одно из этих <xref:System.Data.OracleClient.OracleType> типов данных.  
  
|Тип данных OracleType|Описание|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` тип данных, содержащий двоичные данные с максимальным размером 4 гигабайта (ГБ). Соответствует <xref:System.Array> типа <xref:System.Byte>.|  
|`Clob`|Oracle `CLOB` задать тип данных, содержащий символьные данные на основе символов по умолчанию на сервере, с максимальным размером 4 ГБ. Соответствует <xref:System.String>.|  
|`NClob`|Oracle `NCLOB` тип данных, содержащий символьные данные на основании национальной кодировки сервера размером до 4 ГБ. Соответствует <xref:System.String>.|  
  
 Разработчик приложения .NET можно получить Oracle `LOB` значения в базовых типов данных .NET, такие как <xref:System.Array> типа <xref:System.Byte> и <xref:System.String>, или специализированную <xref:System.Data.OracleClient.OracleLob> тип данных. <xref:System.Data.OracleClient.OracleLob> Класса поддерживает чтение данных и запись Oracle `LOB` в базе данных Oracle.  
  
 Ниже приведены основные характеристики <xref:System.Data.OracleClient.OracleLob> тип данных, который отличает его от базовых типов данных .NET:  
  
-   После извлечения Oracle `LOB` значение из базы данных Oracle в <xref:System.Data.OracleClient.OracleLob> , можно изменить `LOB` данные в открытой транзакции и изменения отражаются непосредственно в базу данных. Если вы получите Oracle `LOB` значение в <xref:System.Array> типа <xref:System.Byte> или <xref:System.String> и обновлять эти массивы, изменения не отражаются в базу данных.  
  
-   При использовании <xref:System.Data.OracleClient.OracleLob> класс для доступа к фрагмент `LOB` значение, только блока передается из базы данных Oracle для клиента. При использовании <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> метод для доступа к фрагмент `LOB` значение, все содержимое значения передаются из базы данных Oracle для клиента.  
  
 Для получения <xref:System.Data.OracleClient.OracleLob> , вызовите <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> метод.  
  
 Вы можете создать <xref:System.Data.OracleClient.OracleLob> , имеет значение NULL, используя следующий формат:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Этот метод используется главным образом для проверки ли `LOB` имеет значение NULL, возвращаемые с сервера, как показано в этом примере:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Значение NULL `LOB` ведет себя аналогично нулевой длины `LOB` в том, что <xref:System.Data.OracleClient.OracleLob.Read%2A> успешно выполняется и всегда возвращает нулевые байты.  
  
 Выбрав `LOB` возвращает столбец, содержащий значение null <xref:System.Data.OracleClient.OracleLob.Null>.  
  
 Необходимо начать транзакцию до получения временного `LOB`. В противном случае <xref:System.Data.OracleClient.OracleDataReader> может не получить данных более поздней версии.  
  
 Также можно открыть временную `LOB` в Oracle путем вызова DBMS_LOB. CREATETEMPORARY системные хранимые процедуры и привязки `LOB` выходного параметра. На стороне клиента, временный `LOB` ведет себя как табличный `LOB`. Например, чтобы обновить временный `LOB`, он должен быть заключен в транзакции.  
  
 В следующем примере C# показано, как открыть временный `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  Унаследованный <xref:System.IO.Stream.WriteByte%2A> метод завершается неудачей, если используются с символьными данными и <xref:System.InvalidOperationException> возникает исключение. Вместо этого рекомендуется использовать метод <xref:System.Data.OracleClient.OracleLob.Write%2A>.  
>   
>  Временный `LOB`только закрытые при закрытии соединения, но с пулами и под нагрузкой, временные `LOB`s не закрывайте. Это можно устранить, удалив временный `LOB`, вызвав `tempLob.Dispose()`.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source"><see langword="LOB" />, данные из которого необходимо добавить.</param>
        <summary>Добавляет данные из указанного <see langword="LOB" /> в текущий <see langword="LOB" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
 Все данные из источника `LOB` добавляется в конец текущего `LOB`. Позиция `LOB` вычисляется или изменены в ходе этого процесса.  
  
 Базовые типы данных всегда должно соответствовать значению. Например, при добавлении из <xref:System.Data.OracleClient.OracleType.NClob>, назначения <xref:System.Data.OracleClient.OracleLob> также должны быть <xref:System.Data.OracleClient.OracleType.NClob>.  
  
> [!NOTE]
>  В этом выпуске операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Источник <see cref="T:System.Data.OracleClient.OracleLob" /> пуст.</exception>
        <exception cref="T:System.InvalidOperationException">Источник <see cref="T:System.Data.OracleClient.OracleLob" /> пуст, или закрыто подключение.</exception>
        <exception cref="T:System.ObjectDisposedException">Исходный объект <see cref="T:System.Data.OracleClient.OracleLob" /> был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Предотвращает срабатывание серверных триггеров при выполнении нескольких операций записи.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Предотвращает срабатывание серверных триггеров при выполнении нескольких операций чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Открывает `LOB` в <xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly> режиме; таким образом, `LOB` может выполняться только чтение, не записано, до соответствующего вызова <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>. Для выполнения пакетной операции записи `LOB`, вызовите <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> с <xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>.  
  
 Вызов <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> более одного раза в той же транзакции в настоящее время создает Oracle «ORA-22293: LOB уже открыт в той же транзакции» ошибка. Кроме того, если получен `LOB` с помощью другого <xref:System.Data.OracleClient.OracleDataReader>, и данные первоначального вызывающего объекта не вызван <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> создается метод, та же ошибка. Таким образом, необходимо вызвать <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> метод, когда вы закончите с помощью <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">Режим (одно из значений <see cref="T:System.Data.OracleClient.OracleLobOpenMode" />), в котором доступ к <see langword="LOB" /> можно осуществлять между вызовом <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> и соответствующим вызовом <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" />.</param>
        <summary>Предотвращает срабатывание серверных триггеров при выполнении нескольких операций чтения и записи в указанном режиме доступа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
 Вызов <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> более одного раза в той же транзакции в настоящее время создает Oracle «ORA-22293: LOB уже открыт в той же транзакции» ошибка. Кроме того, если получен `LOB` с помощью другого <xref:System.Data.OracleClient.OracleDataReader>, и данные первоначального вызывающего объекта не вызван <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> создается метод, та же ошибка. Таким образом, необходимо вызвать <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> метод, когда вы закончите с помощью <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее возможность чтения потока <see langword="LOB" />.</summary>
        <value>Значение <see langword="true" />, если чтение потока <see langword="LOB" /> поддерживается; в противном случае — значение <see langword="false" />, если <see langword="LOB" /> закрыт или удален.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, могут ли быть выполнены операции прямого и обратного поиска.</summary>
        <value>Значение <see langword="false" />, если <see langword="LOB" /> закрыт или удален; в противном случае — значение <see langword="true" />. Всегда значение <see langword="true" /> для <see cref="F:System.Data.OracleClient.OracleLob.Null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Всегда возвращает логическое значение ИСТИНА, независимо от того, поддерживает ли <see langword="LOB" /> запись или нет.</summary>
        <value>Всегда возвращает <see langword="true" />, независимо от того, поддерживает ли запись открытый или неудаленный <see langword="LOB" /> или нет; значение <see langword="false" />, если <see langword="LOB" /> закрыт или удален.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT, а также начать локальную транзакцию.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее минимальное количество байтов, которое необходимо извлечь с сервера или отправить на сервер при выполнении операции чтения или записи.</summary>
        <value>Минимальное количество байтов, которое необходимо извлечь или отправить.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращенное <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> свойство не является параметром поставщика данных .NET Framework для Oracle. Вместо этого это значение, которое использует интерфейс вызова Oracle (OCI), при обмене данными с сервером. Используйте <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> чтобы убедиться, что клиентские блоки имеют одинаковый размер. Чтение или запись в более мелкие фрагменты данных не кэширует данные и вызывает менее оптимизированный цикл обработки на сервер, так как не получено или отправлено полный пакет.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый объект <see cref="T:System.Data.OracleClient.OracleLob" />, который ссылается на тот же <see langword="LOB" /> Oracle, что и исходный объект <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Новый объект <see cref="T:System.Data.OracleClient.OracleLob" />, который ссылается на тот же <see langword="LOB" /> Oracle, что и исходный объект<see cref="T:System.Data.OracleClient.OracleLob" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойства нового <xref:System.Data.OracleClient.OracleLob> объект изначально имеет те же значения, что и для исходного объекта. Однако после <xref:System.Data.OracleClient.OracleLob.Clone%2A> завершена, чтобы каждый <xref:System.Data.OracleClient.OracleLob> является независимым от другого. Например, изменение значения <xref:System.Data.OracleClient.OracleLob.Position%2A> свойство на исходном <xref:System.Data.OracleClient.OracleLob> не изменяет значение <xref:System.Data.OracleClient.OracleLob.Position%2A> копии.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает текущий поток и освобождает все ресурсы, связанные с данным потоком.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает <see cref="T:System.Data.OracleClient.OracleConnection" />, используемый данным экземпляром <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Подключение к источнику данных.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Копирует из данного объекта <see cref="T:System.Data.OracleClient.OracleLob" /> в объект назначения — <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination"><see cref="T:System.Data.OracleClient.OracleLob" /> — объект назначения.</param>
        <summary>Копирует из данного объекта <see cref="T:System.Data.OracleClient.OracleLob" /> в объект назначения — <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Скопированное число байт. В это число не входят дополненные нулевые байты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Базовые типы данных всегда должно соответствовать значению. Например, если при копировании из <xref:System.Data.OracleClient.OracleType.NClob>, назначения <xref:System.Data.OracleClient.OracleLob> также должны быть <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Если конечное смещение выходит за пределы места назначения `LOB`, `LOB` расширяется в который копируются данные. Пространство между окончанием `LOB` и конечное смещение за пределами дополняется нулями для `BLOB` типы данных и пробелы для `CLOB` и `NCLOB` типов данных.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  В этом выпуске операции записи только для чтения `LOB` может завершиться успешно, но не обновить `LOB` на сервере. В этом случае, однако локальная копия `LOB` будут обновлены. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
>   
>  `CopyTo` Метод не очищает содержимое места назначения `OracleLob` перед выполнением операции копирования.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение <see cref="T:System.Data.OracleClient.OracleLob" />, указанное в параметре <paramref name="destination" />, является пустым.</exception>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination"><see cref="T:System.Data.OracleClient.OracleLob" /> — объект назначения.</param>
        <param name="destinationOffset">Смещение, в которое выполняется копирование. Для данных типа <see langword="CLOB" /> и <see langword="NCLOB" /> это количество байтов должно быть четным.</param>
        <summary>Копирование из данного объекта <see cref="T:System.Data.OracleClient.OracleLob" /> в объект назначения — <see cref="T:System.Data.OracleClient.OracleLob" /> с указанным объемом данных.</summary>
        <returns>Скопированное число байт. В это число не входят дополненные нулевые байты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Базовые типы данных всегда должно соответствовать значению. Например, если при копировании из <xref:System.Data.OracleClient.OracleType.NClob>, назначения <xref:System.Data.OracleClient.OracleLob> также должны быть <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Если конечное смещение выходит за пределы места назначения `LOB`, `LOB` расширяется в который копируются данные. Пространство между окончанием `LOB` и конечное смещение за пределами дополняется нулями для `BLOB` типы данных и пробелы для `CLOB` и `NCLOB` типов данных.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  В этом выпуске операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
>   
>  `CopyTo` Метод не очищает содержимое места назначения `OracleLob` перед выполнением операции копирования.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение <see cref="T:System.Data.OracleClient.OracleLob" />, указанное в параметре <paramref name="destination" />, является полным.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение, указанное в параметре <paramref name="destinationOffset" />, меньше нуля или больше 4 гигабайт.  
  
-или- 
Значение, указанное в параметре <paramref name="destinationOffset" /> для типа данных <see langword="CLOB" /> или <see langword="NCLOB" />, не является четным.  
  
-или- 
Необходимо указать типы данных <see langword="CLOB" /> и <see langword="NCLOB" /> с четным количеством байтов.</exception>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">Смещение, из которого выполняется копирование. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <param name="destination">Назначение <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />.</param>
        <param name="destinationOffset">Конечное смещение, в которое выполняется копирование. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <param name="amount">Количество данных, которое необходимо скопировать, в байтах. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <summary>Копирует из данного объекта <see cref="T:System.Data.OracleClient.OracleLob" /> в <see cref="T:System.Data.OracleClient.OracleLob" />, являющийся объектом назначения, с указанным объемом данных и смещением источника.</summary>
        <returns>Скопированное число байт. В это число не входят дополненные нулевые байты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Базовые типы данных всегда должно соответствовать значению. Например, если при копировании из <xref:System.Data.OracleClient.OracleType.NClob>, назначения <xref:System.Data.OracleClient.OracleLob> также должны быть <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Если конечное смещение выходит за пределы места назначения `LOB`, `LOB` расширяется в который копируются данные. Пространство между окончанием `LOB` и конечное смещение за пределами дополняется нулями для `BLOB` типы данных и пробелы для `CLOB` и `NCLOB` типов данных.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  В этом выпуске операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
>   
>  `CopyTo` Метод не очищает содержимое места назначения `OracleLob` перед выполнением операции копирования.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение <see cref="T:System.Data.OracleClient.OracleLob" />, указанное в параметре <paramref name="destination" />, является полным.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение, заданное для параметра <paramref name="amount" />, <paramref name="sourceOffset" /> или <paramref name="destinationOffset" /> меньше нуля или больше 4 гигабайт.  
  
-или- 
Значение, заданное для параметра <paramref name="amount" />, <paramref name="sourceOffset" /> или <paramref name="destinationOffset" /> для данных типа <see langword="CLOB" /> или <see langword="NCLOB" /> не является четным.</exception>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые данным объектом.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет серверным триггерам возобновить работу после выполнения нескольких операций записи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> метод перед началом выполнения операций записи на <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет данные из этого <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все данные из этого <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Количество удаленных байтов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> не удаляет данные. `LOB` Длина остаются неизменными для `BLOB` тип данных, и вместо удаленных данных заменяется 0x00. `CLOB` и `NCLOB` типы данных заменяются пробелами.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  В этом выпуске операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Смещение, из которого выполняется удаление. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <param name="amount">Количество данных, которое необходимо удалить, в байтах. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <summary>Удаляет заданный объем данных из этого <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Количество удаленных байтов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сумма значений в `offset` и `amount` параметры могут быть выше, чем размер <xref:System.Data.OracleClient.OracleLob>. Таким образом, указав значение больше, чем возвращенные функцией <xref:System.Data.OracleClient.OracleLob.Length%2A> свойство прошла успешно; тем не менее <xref:System.Data.OracleClient.OracleLob.Erase%2A> удаляет только до конца массива <xref:System.Data.OracleClient.OracleLob>. (Аналогичным образом, в том случае, если передается отрицательное значение `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> будет выполнена успешно, но стереть, только начиная с начала <xref:System.Data.OracleClient.OracleLob>.) Это поведение отличается от используемой <xref:System.Data.OracleClient.OracleLob.Read%2A> и <xref:System.Data.OracleClient.OracleLob.Write%2A> методы и предложения, преимуществом является возможность удаления всех данных из значения, указанные по `offset` без внесения к появлению дополнительного обращения к серверу для проверки фактического размера.  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> не удаляет данные. `LOB` Длина остаются неизменными для `BLOB` тип данных, и вместо удаленных данных заменяется 0x00. `CLOB` и `NCLOB` типы данных заменяются пробелами.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  В этом выпуске операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>В настоящее время не поддерживается.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В этом выпуске этот метод не работает.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, вызвало ли приложение метод <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" />.</summary>
        <value>Значение <see langword="true" />, если приложение вызвало метод <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" />; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании сервера Oracle 8.0.5 Oracle «ORA-00600: код внутренней ошибки» возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, является ли <see cref="T:System.Data.OracleClient.OracleLob" /> потоком <see cref="F:System.Data.OracleClient.OracleBFile.Null" />.</summary>
        <value>Значение <see langword="true" />, если <see cref="T:System.Data.OracleClient.OracleLob" /> является потоком <see cref="F:System.Data.OracleClient.OracleBFile.Null" />; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, является ли <see cref="T:System.Data.OracleClient.OracleLob" /> временным <see langword="LOB" />.</summary>
        <value>Значение <see langword="true" />, если <see cref="T:System.Data.OracleClient.OracleLob" /> является временным <see langword="LOB" />, в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следующий пример демонстрирует создание временной `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, возвращающее размер <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Размер <see cref="T:System.Data.OracleClient.OracleLob" /> в байтах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Размер <xref:System.Data.OracleClient.OracleLob> всегда возвращается в байтах для всех типов данных.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, возвращающее тип данных <see langword="LOB" />.</summary>
        <value>Один из типов данных <see cref="T:System.Data.OracleClient.OracleType" /><see langword="LOB" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Может принимать одно из следующих <xref:System.Data.OracleClient.OracleType> типов данных.  
  
|Тип данных OracleType|Описание|  
|--------------------------|-----------------|  
|`Blob`|Тип данных Oracle `BLOB`, содержащий двоичные данные размером не более 4 гигабайт. Соответствует <xref:System.Array> типа <xref:System.Byte>.|  
|`Clob`|Тип данных Oracle `CLOB` содержит символьные данные на основе набора символов по умолчанию на сервере, размером не более 4 гигабайт. Соответствует <xref:System.String>.|  
|`NClob`|Oracle `NCLOB` тип данных, содержащий символьные данные на основании национальной кодировки на сервере с максимальным размером 4 гигабайта. Соответствует <xref:System.String>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет пустой объект <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете создать <xref:System.Data.OracleClient.OracleLob> , имеет значение NULL, используя следующий формат:  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 Этот метод используется главным образом для проверки ли `LOB` имеет значение NULL, возвращаемые с сервера, как показано в этом примере:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Значение NULL `LOB` ведет себя аналогично нулю байтов `LOB` в том, что <xref:System.Data.OracleClient.OracleLob.Read%2A> успешно выполняется и всегда возвращает нулевые байты.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущую позицию чтения в потоке <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Текущая позиция в потоке <see cref="T:System.Data.OracleClient.OracleLob" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поток должен поддерживать поиск для получения или задания позиции. Используйте <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> свойства, чтобы определить, поддерживает ли поток поиск.  
  
 Поддерживается поиск в любом месте за пределами длины потока. Поиск нечетной позиции для `CLOB` и `NCLOB` типы данных также поддерживается. Дополнительные сведения см. в разделе "Примечания" <xref:System.Data.OracleClient.OracleLob.Read%2A> свойство.  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A> Свойство не хранить список число байтов из потока, который были использованы, пропущена, или оба.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив байтов. При возвращении данного метода буфер содержит указанный массив байтов, в котором значения между <paramref name="offset" /> и (<paramref name="offset" /> + <paramref name="count" />) заменены байтами, считанными из текущего источника.</param>
        <param name="offset">Смещение байтов (начиная с нуля) в <paramref name="buffer" />, с которого начинается сохранение данных, считанных из текущего потока. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <param name="count">Максимальное количество байтов, которое должно быть считано из текущего потока. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <summary>Считывает последовательность байтов из текущего потока <see cref="T:System.Data.OracleClient.OracleLob" /> и перемещает позицию внутри потока на число считанных байтов.</summary>
        <returns>Общее количество байтов, считанных в буфер. Это число может быть меньше количества запрошенных байтов, если столько байтов в настоящее время недоступно, а также равняться нулю (0), если был достигнут конец потока.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A> Метод считывает максимальное количество `count` байтов из текущего потока и сохраняет их в `buffer` начиная `offset`. — Сложные текущую позицию внутри потока на число считанных байтов; Тем не менее при возникновении исключения, текущая позиция в потоке не изменяется. <xref:System.Data.OracleClient.OracleLob.Read%2A> Возвращает число считанных байтов. Возвращаемое значение равно нулю, только в том случае, если текущее положение находится в конце потока. <xref:System.Data.OracleClient.OracleLob.Read%2A> блокируется до могут считываться хотя бы один байт данных, в случае, если данные недоступны.<xref:System.Data.OracleClient.OracleLob.Read%2A> Возвращает значение 0 при попытке чтения из `LOB` когда текущая позиция находится в конце `LOB`. <xref:System.Data.OracleClient.OracleLob.Read%2A> может вернуть меньше байтов, чем было запрошено, даже если не был достигнут конец потока.  
  
 Поставщик данных .NET Framework для Oracle обрабатывает все `CLOB` и `NCLOB` данных в Юникоде. Таким образом при доступе к `CLOB` и `NCLOB` типы данных, вы всегда работаете с числом байтов, где каждый символ занимает 2 байта. Например, если текстовая строка, содержащая три символа сохраняется как `NCLOB` на сервере Oracle, где набор символов — 4 байта на символ, а выполнении `Read` операции, следует указать длину строки 6 байтов, несмотря на то, что это хранятся в виде 12 байт на сервере.  
  
 В следующем примере C# показано, как считывать <xref:System.Data.OracleClient.OracleLob> объектов.  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipulate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 Вы можете создать <xref:System.Data.OracleClient.OracleLob> , имеет значение NULL, используя следующий формат:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Этот метод используется главным образом для проверки ли `LOB` имеет значение NULL, возвращаемые с сервера, как показано в следующем примере.  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Значение NULL `LOB` ведет себя аналогично нулю байтов `LOB` в том, что <xref:System.Data.OracleClient.OracleLob.Read%2A> успешно выполняется и всегда возвращает нулевые байты.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметров <paramref name="offset" /> или <paramref name="count" /> не является положительным.  
  
-или- 
Сумма параметров смещения и счетчика превышает длину буфера.  
  
-или- 
Значение, заданное для параметра <paramref name="amount" /> или <paramref name="offset" />, меньше нуля или больше 4 гигабайт.</exception>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Смещение в байтах по отношению к источнику. Если значение параметра <paramref name="offset" /> является отрицательным, новая позиция будет предшествовать позиции, заданной параметром <paramref name="origin" />, при этом расстояние между позициями будет равняться числу байтов, заданному параметром <paramref name="offset" />. Если значение параметра <paramref name="offset" /> равно нулю, новая позиция будет совпадать с позицией, заданной параметром <paramref name="origin" />. Если значение параметра <paramref name="offset" /> является положительным, новая позиция будет следовать за позицией, заданной параметром <paramref name="origin" />, при этом расстояние между позициями будет равняться числу байтов, заданному параметром <paramref name="offset" />.</param>
        <param name="origin">Значение типа <see cref="T:System.IO.SeekOrigin" />, указывающее точку ссылки, которая используется для получения новой позиции.</param>
        <summary>Задает позицию в текущем потоке <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Новая позиция в текущем потоке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `offset` является отрицательным, новая позиция должно предшествовать позиции, заданной параметром `origin` на число байтов, заданному параметром `offset`. Если `offset` равно нулю, новая позиция должна быть позицией, заданной параметром `origin`. Если `offset` является положительным, новая позиция должен следовать за позицией, заданной параметром `origin` на число байтов, заданному параметром `offset`.  
  
 Поддерживается поиск в любом месте за пределами длины потока. Поиск нечетной позиции для `CLOB` и `NCLOB` типы данных также поддерживается. Дополнительные сведения см. в разделе "Примечания" <xref:System.Data.OracleClient.OracleLob.Read%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="origin" /> не содержит допустимого значения.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Результирующая позиция превышает длину значения.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Data.OracleClient.OracleLob" /> был закрыт или удален.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Необходимая длина текущего потока <see cref="T:System.Data.OracleClient.OracleLob" /> в байтах. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <summary>Задает длину потока <see cref="T:System.Data.OracleClient.OracleLob" /> меньше текущей длины.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Попытка увеличить длину <xref:System.Data.OracleClient.OracleLob> поток завершается сбоем и возвращает «сообщение: ORA-22926: указанная длина превышает длину текущего значения LOB» сервер Oracle.  
  
 Поток должен поддерживать запись и поиск для <xref:System.Data.OracleClient.OracleLob.SetLength%2A> функции.  
  
 Поставщик данных .NET Framework для Oracle обрабатывает все `CLOB` и `NCLOB` данных в Юникоде. Таким образом при доступе к `CLOB` и `NCLOB` типы данных, вы всегда работаете с числом байтов, где каждый символ занимает 2 байта. Например, если текстовая строка, содержащая три символа сохраняется как `NCLOB` на сервере Oracle, где набор символов — 4 байта на символ, а выполнении `SetLength` операции, следует указать длину строки 6 байтов, несмотря на то, что это хранятся в виде 12 байт на сервере.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  Объект операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение, указанное в параметре <paramref name="value" /> для типа данных <see langword="CLOB" /> или <see langword="NCLOB" />, не является четным.  
  
-или- 
Значение, указанное в параметре <paramref name="value" />, меньше нуля или больше 4 гигабайт.</exception>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает эквивалент общеязыковой среды выполнения потока для базового значения.</summary>
        <value>Для <see cref="F:System.Data.OracleClient.OracleType.Blob" /> массив типа <see langword="Byte[]" />. Для <see cref="F:System.Data.OracleClient.OracleType.Clob" /> и <see cref="F:System.Data.OracleClient.OracleType.NClob" /> — <see langword="String" />. Для пустых данных — <see cref="T:System.DBNull" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для <xref:System.Data.OracleClient.OracleType.Blob> типы данных, <xref:System.Data.OracleClient.OracleLob.Value%2A> возвращает все базовые данные как непрерывный массив типа `Byte[]`. Для <xref:System.Data.OracleClient.OracleType.Clob> и <xref:System.Data.OracleClient.OracleType.NClob> типы данных, <xref:System.Data.OracleClient.OracleLob.Value%2A> возвращает все данные в виде `String` тип данных. Для пустых данных — <xref:System.Data.OracleClient.OracleLob.Value%2A> возвращает <xref:System.DBNull>. Сравнивая возвращенные значения, можно отличить пустых данных значение null, данные и данные.  
  
> [!NOTE]
>  Преимуществом использования `LOB` типов данных является возможность извлечения больших объемов данных в виде фрагментов на стороне клиента. Тем не менее, при использовании <xref:System.Data.OracleClient.OracleLob.Value%2A>, получение всех данных для `LOB` столбца в виде одной непрерывной области, которая может значительно увеличить издержек в приложении.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив байтов. Данный метод копирует количество байтов, заданных <paramref name="count" />, из <paramref name="buffer" /> в текущий поток.</param>
        <param name="offset">Отсчитываемое от нуля смещение байтов в буфере <paramref name="buffer" />, с которого начинается копирование байтов в текущий поток. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <param name="count">Количество байтов, которое необходимо записать в текущий поток. Для типов данных <see langword="CLOB" /> и <see langword="NCLOB" /> это число должно быть четным.</param>
        <summary>Записывает последовательность байтов в текущий поток <see cref="T:System.Data.OracleClient.OracleLob" /> и перемещает текущую позицию внутри потока на число записанных байтов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При успешном выполнении операции записи позицию в потоке перемещается вперед на число записанных байтов. При возникновении исключения, положение в потоке остается неизменным.  
  
 Написание за концом `LOB` разрешено, в результате `LOB` на число записанных байтов.  
  
 Поставщик данных .NET Framework для Oracle обрабатывает все `CLOB` и `NCLOB` данных в Юникоде. Таким образом при доступе к `CLOB` и `NCLOB` типы данных, вы всегда работаете с числом байтов, где каждый символ занимает 2 байта. Например, если текстовая строка, содержащая три символа сохраняется как `NCLOB` на сервере Oracle, где набор символов — 4 байта на символ, а выполнении `Write` операции, следует указать длину строки 6 байтов, несмотря на то, что это хранятся в виде 12 байт на сервере.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
 В следующем примере C# показано, как записать <xref:System.Data.OracleClient.OracleLob> объектов.  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  Объект операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением параметра <paramref name="buffer" /> является пустая ссылка (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметров <paramref name="offset" /> или <paramref name="count" /> не является положительным.  
  
-или- 
Сумма параметров <paramref name="offset" /> и <paramref name="count" /> превышает длину <paramref name="buffer" />.  
  
-или- 
Значение, заданное для параметра <paramref name="count" /> или <paramref name="offset" />, меньше нуля или больше 4 гигабайт.  
  
-или- 
Необходимо указать типы данных <see langword="CLOB" /> и <see langword="NCLOB" /> с четным количеством байтов.</exception>
        <exception cref="T:System.InvalidOperationException">Операция выполняется не в рамках транзакции, объект <see cref="T:System.Data.OracleClient.OracleLob" /> является пустым, или же закрыто подключение.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект был закрыт или уничтожен.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Произошла ошибка Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Байт, записываемый в поток.</param>
        <summary>Записывает байт в текущее положение в потоке <see cref="T:System.Data.OracleClient.OracleLob" />, при этом позиция в потоке перемещается вперед на один байт.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При успешном выполнении операции записи на один байт перемещает позицию внутри потока. При возникновении исключения, положение в потоке остается неизменным.  
  
 Написание за концом `LOB` разрешено, в результате `LOB` на один байт.  
  
 Записываемый `LOB`, необходимо извлечь `LOB` с помощью предложения FOR UPDATE в инструкции SQL SELECT и необходимо начать локальную транзакцию.  
  
> [!NOTE]
>  Объект операции записи только для чтения `LOB` может быть выполнена успешно, но не обновляет `LOB` на сервере. В этом случае, однако локальная копия `LOB` обновляется. Таким образом, позже операций чтения на <xref:System.Data.OracleClient.OracleLob> может возвратить результаты операции записи.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>