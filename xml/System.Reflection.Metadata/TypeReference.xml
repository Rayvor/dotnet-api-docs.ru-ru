<Type Name="TypeReference" FullName="System.Reflection.Metadata.TypeReference">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd53a425f91d805d74bf22213f904fe7088b5588" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73390690" /></Metadata><TypeSignature Language="C#" Value="public struct TypeReference" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TypeReference extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.TypeReference" />
  <TypeSignature Language="VB.NET" Value="Public Structure TypeReference" />
  <TypeSignature Language="C++ CLI" Value="public value class TypeReference" />
  <TypeSignature Language="F#" Value="type TypeReference = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.StringHandle Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Metadata.StringHandle Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeReference.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As StringHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::StringHandle Name { System::Reflection::Metadata::StringHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : System.Reflection.Metadata.StringHandle" Usage="System.Reflection.Metadata.TypeReference.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.StringHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f17a-101">Возвращает имя типа целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="4f17a-101">Gets the name of the target type.</span></span></summary>
        <value><span data-ttu-id="4f17a-102">Имя типа целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="4f17a-102">The name of the target type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.StringHandle Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Metadata.StringHandle Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeReference.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As StringHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::StringHandle Namespace { System::Reflection::Metadata::StringHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Reflection.Metadata.StringHandle" Usage="System.Reflection.Metadata.TypeReference.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.StringHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f17a-103">Возвращает полное имя пространства имен, где определен тип целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="4f17a-103">Gets the full name of the namespace where the target type is defined.</span></span></summary>
        <value><span data-ttu-id="4f17a-104">Полное имя пространства имен, в котором определен целевой тип, или маркер, свойство <see cref="P:System.Reflection.Metadata.StringHandle.IsNil" /> которого имеет значение <see langword="true" />, если тип является вложенным или определен в корневом пространстве имен,</span><span class="sxs-lookup"><span data-stu-id="4f17a-104">The full name of the namespace where the target type is defined, or a handle whose the <see cref="P:System.Reflection.Metadata.StringHandle.IsNil" /> property is <see langword="true" /> if the type is nested or defined in a root namespace,</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolutionScope">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.EntityHandle ResolutionScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Metadata.EntityHandle ResolutionScope" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeReference.ResolutionScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResolutionScope As EntityHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::EntityHandle ResolutionScope { System::Reflection::Metadata::EntityHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.ResolutionScope : System.Reflection.Metadata.EntityHandle" Usage="System.Reflection.Metadata.TypeReference.ResolutionScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.EntityHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f17a-105">Возвращает область разрешения, в которой тип целевого объекта определен и однозначно идентифицируется указанными <see cref="P:System.Reflection.Metadata.TypeReference.Namespace" /> и <see cref="P:System.Reflection.Metadata.TypeReference.Name" />.</span><span class="sxs-lookup"><span data-stu-id="4f17a-105">Gets the resolution scope in which the target type is defined and is uniquely identified by the specified <see cref="P:System.Reflection.Metadata.TypeReference.Namespace" /> and <see cref="P:System.Reflection.Metadata.TypeReference.Name" />.</span></span></summary>
        <value><span data-ttu-id="4f17a-106">Область разрешения, в которой тип целевого объекта определен уникальным образом.</span><span class="sxs-lookup"><span data-stu-id="4f17a-106">The resolution scope in which the target type is uniquely defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="4f17a-107">Область разрешения может иметь один из следующих дескрипторов:</span><span class="sxs-lookup"><span data-stu-id="4f17a-107">Resolution scope can be one of the following handles:</span></span>

- <span data-ttu-id="4f17a-108"><xref:System.Reflection.Metadata.TypeReferenceHandle> включающего типа, если целевой тип является вложенным типом.</span><span class="sxs-lookup"><span data-stu-id="4f17a-108"><xref:System.Reflection.Metadata.TypeReferenceHandle> of the enclosing type, if the target type is a nested type.</span></span>

- <span data-ttu-id="4f17a-109"><xref:System.Reflection.Metadata.ModuleReferenceHandle>, если целевой тип определен в другом модуле в той же сборке, что и этот.</span><span class="sxs-lookup"><span data-stu-id="4f17a-109"><xref:System.Reflection.Metadata.ModuleReferenceHandle>, if the target type is defined in another module within the same assembly as this one.</span></span>

- <span data-ttu-id="4f17a-110"><xref:System.Reflection.Metadata.EntityHandle.ModuleDefinition>, если целевой тип определен в текущем модуле.</span><span class="sxs-lookup"><span data-stu-id="4f17a-110"><xref:System.Reflection.Metadata.EntityHandle.ModuleDefinition>, if the target type is defined in the current module.</span></span> <span data-ttu-id="4f17a-111">Это не должно происходить в модуле сжатых метаданных CLI.</span><span class="sxs-lookup"><span data-stu-id="4f17a-111">This should not occur in a CLI compressed metadata module.</span></span>

- <span data-ttu-id="4f17a-112"><xref:System.Reflection.Metadata.AssemblyReferenceHandle>, если целевой тип определен в другой сборке из текущего модуля.</span><span class="sxs-lookup"><span data-stu-id="4f17a-112"><xref:System.Reflection.Metadata.AssemblyReferenceHandle>, if the target type is defined in a different assembly from the current module.</span></span>

- <span data-ttu-id="4f17a-113">`Nil` обрабатывается, если тип целевого объекта должен быть разрешен путем поиска в <xref:System.Reflection.Metadata.MetadataReader.ExportedTypes> соответствующего <xref:System.Reflection.Metadata.TypeReference.Namespace> и <xref:System.Reflection.Metadata.TypeReference.Name>.</span><span class="sxs-lookup"><span data-stu-id="4f17a-113">`Nil` handle if the target type must be resolved by searching the <xref:System.Reflection.Metadata.MetadataReader.ExportedTypes> for a matching <xref:System.Reflection.Metadata.TypeReference.Namespace> and <xref:System.Reflection.Metadata.TypeReference.Name>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
