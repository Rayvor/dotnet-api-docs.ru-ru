<Type Name="MetadataReaderProvider" FullName="System.Reflection.Metadata.MetadataReaderProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="243154fea080bbe6f3e4d5f28527a38d95d5d746" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75100905" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataReaderProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataReaderProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.MetadataReaderProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataReaderProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataReaderProvider sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataReaderProvider = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="69336-101">Предоставляет <see cref="T:System.Reflection.Metadata.MetadataReader" /> для метаданных, хранящихся в массиве байтов, блоке памяти или потоке.</span><span class="sxs-lookup"><span data-stu-id="69336-101">Provides a <see cref="T:System.Reflection.Metadata.MetadataReader" /> for metadata stored in an array of bytes, a memory block, or a stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-102">`MetadataReaderProvider` поддерживает следующие форматы:</span><span class="sxs-lookup"><span data-stu-id="69336-102">`MetadataReaderProvider` supports the following formats:</span></span>

 - <span data-ttu-id="69336-103">Метаданные интерфейса командной строки ECMA-335 (Common Language Infrastructure) (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span><span class="sxs-lookup"><span data-stu-id="69336-103">ECMA-335 CLI (Common Language Infrastructure) metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span></span>
 - <span data-ttu-id="69336-104">Изменение и продолжение разностных метаданных (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span><span class="sxs-lookup"><span data-stu-id="69336-104">Edit and Continue metadata delta (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span></span>
 - <span data-ttu-id="69336-105">Переносимые метаданные PDB (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)>).</span><span class="sxs-lookup"><span data-stu-id="69336-105">Portable PDB metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataReaderProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69336-106">Удаляет весь объем памяти, выделенный средством чтения.</span><span class="sxs-lookup"><span data-stu-id="69336-106">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-107"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> можно вызывать несколько раз (но не параллельно).</span><span class="sxs-lookup"><span data-stu-id="69336-107"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> can be called multiple times (but not in parallel).</span></span>

<span data-ttu-id="69336-108">Ненадежный вызов <xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> параллельно с любой другой операцией в <xref:System.Reflection.Metadata.MetadataReaderProvider> или при чтении из базовой памяти.</span><span class="sxs-lookup"><span data-stu-id="69336-108">It is not safe to call <xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> in parallel with any other operation on the <xref:System.Reflection.Metadata.MetadataReaderProvider> or when reading from the underlying memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMetadataImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="69336-109">Образ метаданных.</span><span class="sxs-lookup"><span data-stu-id="69336-109">Metadata image.</span></span></param>
        <summary><span data-ttu-id="69336-110">Создает поставщик для массива байтов.</span><span class="sxs-lookup"><span data-stu-id="69336-110">Creates a provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="69336-111">Новый поставщик.</span><span class="sxs-lookup"><span data-stu-id="69336-111">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-112">Содержимое изображения не считывается во время создания <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-112">The content of the image is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69336-113">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="69336-113"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="69336-114">Указатель на начало BLOB-объекта метаданных.</span><span class="sxs-lookup"><span data-stu-id="69336-114">Pointer to the start of the metadata blob.</span></span></param>
        <param name="size"><span data-ttu-id="69336-115">Размер BLOB-объекта метаданных.</span><span class="sxs-lookup"><span data-stu-id="69336-115">The size of the metadata blob.</span></span></param>
        <summary><span data-ttu-id="69336-116">Создает поставщик метаданных для образа, хранящегося в памяти.</span><span class="sxs-lookup"><span data-stu-id="69336-116">Creates a metadata provider over an image stored in memory.</span></span></summary>
        <returns><span data-ttu-id="69336-117">Новый поставщик метаданных.</span><span class="sxs-lookup"><span data-stu-id="69336-117">The new metadata provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-118">Память принадлежит вызывающему объекту и не освобождается при утилизации <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-118">The memory is owned by the caller and is not released on disposal of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="69336-119">Вызывающий объект отвечает за поддержание активности памяти и неизменности в течение времени существования <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-119">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="69336-120">Содержимое большого двоичного объекта не считывается во время создания <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-120">The content of the blob is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69336-121">Свойство <paramref name="start" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="69336-121"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="69336-122"><paramref name="size" /> является отрицательным значением.</span><span class="sxs-lookup"><span data-stu-id="69336-122"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FromMetadataStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="69336-123">Экземпляр <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="69336-123">A <see cref="T:System.IO.Stream" /> instance.</span></span></param>
        <param name="options"><span data-ttu-id="69336-124">Параметры, которые определяют способ считывания разделов образа из потока.</span><span class="sxs-lookup"><span data-stu-id="69336-124">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="69336-125">Размер BLOB-объекта метаданных в потоке.</span><span class="sxs-lookup"><span data-stu-id="69336-125">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="69336-126">Если не указан, предполагается, что размер BLOB-объекта метаданных достигает конца потока.</span><span class="sxs-lookup"><span data-stu-id="69336-126">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="69336-127">Создает поставщик для потока указанного размера, начиная с его текущей позиции.</span><span class="sxs-lookup"><span data-stu-id="69336-127">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="69336-128">Новый поставщик.</span><span class="sxs-lookup"><span data-stu-id="69336-128">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="69336-129">Если не указано <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType>, владение потоком передается <xref:System.Reflection.Metadata.MetadataReaderProvider> после успешной проверки аргументов.</span><span class="sxs-lookup"><span data-stu-id="69336-129">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.Metadata.MetadataReaderProvider> upon successful argument validation.</span></span> <span data-ttu-id="69336-130">Он будет удален <xref:System.Reflection.Metadata.MetadataReaderProvider>, и вызывающий объект не должен манипулировать им.</span><span class="sxs-lookup"><span data-stu-id="69336-130">It will be disposed by the <xref:System.Reflection.Metadata.MetadataReaderProvider>, and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="69336-131">Если не указано <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, данные не считываются из потока во время создания <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-131">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> is specified, no data is read from the stream during construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="69336-132">Кроме того, поток не должен обрабатываться вызывающим объектом, пока <xref:System.Reflection.Metadata.MetadataReaderProvider> активно и не уничтожен.</span><span class="sxs-lookup"><span data-stu-id="69336-132">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="69336-133">Если <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, <xref:System.Reflection.Metadata.MetadataReaderProvider> будет считывать все данные, запрошенные во время создания.</span><span class="sxs-lookup"><span data-stu-id="69336-133">If <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, the <xref:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="69336-134">Таким образом, если также указано <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType>, вызывающий объект сохраняется полный доступ к потоку и гарантирует, что он не будет обрабатываться <xref:System.Reflection.Metadata.MetadataReaderProvider> после создания.</span><span class="sxs-lookup"><span data-stu-id="69336-134">As such, if <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69336-135">Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="69336-135"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69336-136"><paramref name="stream" /> не поддерживает операции чтения и поиска.</span><span class="sxs-lookup"><span data-stu-id="69336-136"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="69336-137">Размер является отрицательным или превышает длину потока.</span><span class="sxs-lookup"><span data-stu-id="69336-137">Size is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="69336-138">Ошибка при чтении из потока (только если указан <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" />).</span><span class="sxs-lookup"><span data-stu-id="69336-138">Error reading from the stream (only when <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> is specified).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPortablePdbImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="69336-139">Образ переносимого PDB-файла.</span><span class="sxs-lookup"><span data-stu-id="69336-139">A portable PDB image.</span></span></param>
        <summary><span data-ttu-id="69336-140">Создает поставщик метаданных переносимого PDB-файла для массива данных.</span><span class="sxs-lookup"><span data-stu-id="69336-140">Creates a portable PDB metadata provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="69336-141">Новый поставщик метаданных переносимого PDB-файла.</span><span class="sxs-lookup"><span data-stu-id="69336-141">The new portable PDB metadata provider .</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-142">Содержимое изображения не считывается во время создания <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-142">The content of the image is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69336-143">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="69336-143"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="69336-144">Указатель на начало BLOB-объекта переносимого PDB-файла.</span><span class="sxs-lookup"><span data-stu-id="69336-144">Pointer to the start of the portable PDB blob.</span></span></param>
        <param name="size"><span data-ttu-id="69336-145">Размер BLOB-объекта переносимого PDB-файла.</span><span class="sxs-lookup"><span data-stu-id="69336-145">The size of the portable PDB blob.</span></span></param>
        <summary><span data-ttu-id="69336-146">Создает поставщик метаданных переносимого PDB-файла для BLOB-объекта, хранящегося в памяти.</span><span class="sxs-lookup"><span data-stu-id="69336-146">Creates a portable PDB metadata provider over a blob stored in memory.</span></span></summary>
        <returns><span data-ttu-id="69336-147">Новый поставщик метаданных переносимого PDB-файла.</span><span class="sxs-lookup"><span data-stu-id="69336-147">The new portable PDB metadata provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-148">Память принадлежит вызывающему объекту и не освобождается при утилизации <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-148">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="69336-149">Вызывающий объект отвечает за поддержание активности памяти и неизменности в течение времени существования <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-149">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="69336-150">Содержимое большого двоичного объекта не считывается во время создания <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-150">The content of the blob is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69336-151">Свойство <paramref name="start" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="69336-151"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="69336-152"><paramref name="size" /> является отрицательным значением.</span><span class="sxs-lookup"><span data-stu-id="69336-152"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="69336-153">Поток.</span><span class="sxs-lookup"><span data-stu-id="69336-153">The stream.</span></span></param>
        <param name="options"><span data-ttu-id="69336-154">Параметры, которые определяют способ считывания разделов образа из потока.</span><span class="sxs-lookup"><span data-stu-id="69336-154">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="69336-155">Размер BLOB-объекта метаданных в потоке.</span><span class="sxs-lookup"><span data-stu-id="69336-155">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="69336-156">Если не указан, предполагается, что размер BLOB-объекта метаданных достигает конца потока.</span><span class="sxs-lookup"><span data-stu-id="69336-156">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="69336-157">Создает поставщик для потока указанного размера, начиная с его текущей позиции.</span><span class="sxs-lookup"><span data-stu-id="69336-157">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="69336-158">Экземпляр <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />.</span><span class="sxs-lookup"><span data-stu-id="69336-158">A <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            
<span data-ttu-id="69336-159">Если не указано <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType>, владение потоком передается <xref:System.Reflection.Metadata.MetadataReaderProvider> после успешной проверки аргументов.</span><span class="sxs-lookup"><span data-stu-id="69336-159">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.Metadata.MetadataReaderProvider> upon successful argument validation.</span></span> <span data-ttu-id="69336-160">Он будет удален <xref:System.Reflection.Metadata.MetadataReaderProvider>, и вызывающий объект не должен манипулировать им.</span><span class="sxs-lookup"><span data-stu-id="69336-160">It will be disposed by the <xref:System.Reflection.Metadata.MetadataReaderProvider>, and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="69336-161">Если не указано <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, данные не считываются из потока во время создания <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span><span class="sxs-lookup"><span data-stu-id="69336-161">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="69336-162">Кроме того, поток не должен обрабатываться вызывающим объектом, пока <xref:System.Reflection.Metadata.MetadataReaderProvider> активно и не уничтожен.</span><span class="sxs-lookup"><span data-stu-id="69336-162">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="69336-163">Если <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, <xref:System.Reflection.Metadata.MetadataReaderProvider> будет считывать все данные, запрошенные во время создания.</span><span class="sxs-lookup"><span data-stu-id="69336-163">If <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, the <xref:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="69336-164">Таким образом, если также указано <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType>, вызывающий объект сохраняется полный доступ к потоку и гарантирует, что он не будет обрабатываться <xref:System.Reflection.Metadata.MetadataReaderProvider> после создания.</span><span class="sxs-lookup"><span data-stu-id="69336-164">As such, if <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69336-165">Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="69336-165"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69336-166"><paramref name="stream" /> не поддерживает операции чтения и поиска.</span><span class="sxs-lookup"><span data-stu-id="69336-166"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="69336-167">Размер является отрицательным или превышает длину потока.</span><span class="sxs-lookup"><span data-stu-id="69336-167">Size is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataReader">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = null);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReader GetMetadataReader(valuetype System.Reflection.Metadata.MetadataReaderOptions options, class System.Reflection.Metadata.MetadataStringDecoder utf8Decoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.GetMetadataReader(System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections, Optional utf8Decoder As MetadataStringDecoder = null) As MetadataReader" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="member this.GetMetadataReader : System.Reflection.Metadata.MetadataReaderOptions * System.Reflection.Metadata.MetadataStringDecoder -&gt; System.Reflection.Metadata.MetadataReader" Usage="metadataReaderProvider.GetMetadataReader (options, utf8Decoder)" />
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.Default, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = null);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.Default, Optional utf8Decoder As MetadataStringDecoder = null) As MetadataReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataReaderOptions" />
        <Parameter Name="utf8Decoder" Type="System.Reflection.Metadata.MetadataStringDecoder" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="69336-168">Битовая комбинация значений перечисления, которые определяют конфигурацию при чтении метаданных.</span><span class="sxs-lookup"><span data-stu-id="69336-168">A bitwise combination of the enumeration values that represent the configuration when reading the metadata.</span></span></param>
        <param name="utf8Decoder"><span data-ttu-id="69336-169">Используемая кодировка.</span><span class="sxs-lookup"><span data-stu-id="69336-169">The encoding to use.</span></span></param>
        <summary><span data-ttu-id="69336-170">Получает <see cref="T:System.Reflection.Metadata.MetadataReader" /> из <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />.</span><span class="sxs-lookup"><span data-stu-id="69336-170">Gets a <see cref="T:System.Reflection.Metadata.MetadataReader" /> from a <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />.</span></span></summary>
        <returns><span data-ttu-id="69336-171">Экземпляр <see cref="T:System.Reflection.Metadata.MetadataReader" />.</span><span class="sxs-lookup"><span data-stu-id="69336-171">A <see cref="T:System.Reflection.Metadata.MetadataReader" /> instance..</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="69336-172">Вызывающий объект должен удерживать <xref:System.Reflection.Metadata.MetadataReaderProvider> неосвобожденным в течение всего времени существования средства чтения метаданных.</span><span class="sxs-lookup"><span data-stu-id="69336-172">The caller must keep the <xref:System.Reflection.Metadata.MetadataReaderProvider> undisposed throughout the lifetime of the metadata reader.</span></span>

<span data-ttu-id="69336-173">Если этот метод вызывается несколько раз, каждый вызов с аргументами, равными аргументам, передаваемым предыдущему успешному вызову, возвращает тот же экземпляр <xref:System.Reflection.Metadata.MetadataReader>, что и предыдущий вызов.</span><span class="sxs-lookup"><span data-stu-id="69336-173">If this method is called multiple times, each call with arguments equal to the arguments passed to the previous successful call returns the same instance of <xref:System.Reflection.Metadata.MetadataReader> as the previous call.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69336-174">Кодировка <paramref name="utf8Decoder" /> не является <see cref="T:System.Text.UTF8Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="69336-174">The encoding of <paramref name="utf8Decoder" /> is not <see cref="T:System.Text.UTF8Encoding" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="69336-175">Текущая платформа поддерживает обратный порядок байтов.</span><span class="sxs-lookup"><span data-stu-id="69336-175">The current platform is big-endian.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="69336-176">Ошибка ввода-вывода при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="69336-176">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="69336-177">Поставщик был удален.</span><span class="sxs-lookup"><span data-stu-id="69336-177">Provider has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
