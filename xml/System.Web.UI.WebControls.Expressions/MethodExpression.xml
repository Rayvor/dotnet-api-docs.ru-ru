<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18f5a5cc687c76ffbdde27195ed9789b21921d2f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69402259" /></Metadata><TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type MethodExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет способ задания пользовательского запроса LINQ, определенного в методе.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.QueryExtender> Элемент управления поддерживает пользовательские запросы LINQ. Можно определить пользовательский запрос LINQ в методе и использовать <xref:System.Web.UI.WebControls.Expressions.MethodExpression> параметр Filter для вызова запроса <xref:System.Web.UI.WebControls.QueryExtender> в элементе управления.  
  
 Метод, содержащий пользовательский запрос LINQ, должен удовлетворять следующим критериям.  
  
-   Метод должен быть статическим (`Shared` в Visual Basic). Первый параметр должен быть <xref:System.Linq.IQueryable%601> объектом или. <xref:System.Collections.Generic.IEnumerable%601> Метод может иметь более одного параметра.  
  
-   Возвращаемое значение не может изменить <xref:System.Linq.IQueryable%601> запрашиваемый тип или <xref:System.Collections.Generic.IEnumerable%601> .  
  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Выполняет поиск метода, содержащего запрос, в следующем порядке:  
  
1.  Если свойство задано <xref:System.Web.UI.WebControls.QueryExtender> в элементе управления, <xref:System.Web.UI.WebControls.Expressions.MethodExpression> объект ищет метод в указанном типе. <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A>  
  
2.  Если источник данных реализует <xref:System.Web.DynamicData.IDynamicDataSource>, метод ищет метод в типе контекста (<xref:System.Data.Linq.DataContext> или <xref:System.Data.Objects.ObjectContext> объекте).  
  
3.  Метод ищет метод в элементе управления шаблона, в базовом классе страницы или в пользовательском элементе управления.  
  
 Класс похож на <xref:System.Web.UI.WebControls.Expressions.CustomExpression> класс, за исключением того, что выражение метода выполняется в ответ на вызов метода, а пользовательское выражение выполняется в ответ на событие. <xref:System.Web.UI.WebControls.Expressions.MethodExpression>  
  
   
  
## Examples  
 В следующем примере показано, как выполнить поиск продуктов, цена которых равна 400 или более, в поле ListPrice таблицы Products в базе данных AdventureWorks. В этом примере показано, как создать пользовательский запрос LINQ в методе в коде страницы и как вызвать метод в <xref:System.Web.UI.WebControls.QueryExtender> элементе управления.  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 В следующем примере показано, как вызвать метод на странице.  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="methodExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Используемый элемент управления источником данных.</param>
        <summary>Разрешает выражение, используя заданный объект <see cref="T:System.Linq.IQueryable" />.</summary>
        <returns>Экземпляр объекта <see cref="T:System.Linq.IQueryable" />, использованного для разрешения выражения.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Элемент управления источником данных равен <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Метод не найден.  
  
- или - 
Метод не является статическим.  
  
-или- 
Тип переданного объекта <see langword="IQueryable&lt;T&gt;" /> был изменен.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreIfNotFound : bool with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое указывает, должно ли выражение быть проигнорировано.</summary>
        <value>Значение <see langword="true" />, если выражение игнорируется; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Объект выполняет поиск метода, содержащего запрос, путем поиска в конкретных расположениях и поиска в определенном порядке. Можно задать для этого свойства `false` значение, чтобы создать исключение, <xref:System.Web.UI.WebControls.Expressions.CustomExpression> если объект не находит метод, содержащий LINQ.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MethodName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя метода, содержащего настраиваемый запрос LINQ.</summary>
        <value>Имя метода, содержащего настраиваемый запрос LINQ.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Объект позволяет вызывать пользовательский запрос LINQ, определенный в методе. Метод указывается в <xref:System.Web.UI.WebControls.QueryExtender> элементе управления на странице.  
  
   
  
## Examples  
 В следующем примере показано, `FilterStandardPrice` как указать метод <xref:System.Web.UI.WebControls.QueryExtender> в элементе управления. Пользовательский запрос LINQ определяется в `FilterStandardPrice` методе.  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает класс, метод которого содержит пользовательский запрос.</summary>
        <value>Класс, членом которого является метод.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс позволяет указать пользовательское выражение для источника данных <xref:System.Web.UI.WebControls.QueryExtender> в элементе управления. <xref:System.Web.UI.WebControls.Expressions.MethodExpression> <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> Свойство можно использовать для указания класса, которому принадлежит метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
