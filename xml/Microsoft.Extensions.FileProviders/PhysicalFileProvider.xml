<Type Name="PhysicalFileProvider" FullName="Microsoft.Extensions.FileProviders.PhysicalFileProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c222b68d6b995b5c84c5932a244d548d3ec39c11" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73411650" /></Metadata><TypeSignature Language="C#" Value="public class PhysicalFileProvider : IDisposable, Microsoft.Extensions.FileProviders.IFileProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PhysicalFileProvider extends System.Object implements class Microsoft.Extensions.FileProviders.IFileProvider, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class PhysicalFileProvider&#xA;Implements IDisposable, IFileProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class PhysicalFileProvider : IDisposable, Microsoft::Extensions::FileProviders::IFileProvider" />
  <TypeSignature Language="F#" Value="type PhysicalFileProvider = class&#xA;    interface IFileProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.FileProviders.IFileProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="39bba-101">Выполняет поиск файлов с помощью имеющейся на диске файловой системы.</span><span class="sxs-lookup"><span data-stu-id="39bba-101">Looks up files using the on-disk file system.</span></span></summary>
    <remarks><span data-ttu-id="39bba-102">Если переменной среды "DOTNET_USE_POLLING_FILE_WATCHER" присвоено значение "1" или "true", вызовы <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> будут использовать <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-102">When the environment variable "DOTNET_USE_POLLING_FILE_WATCHER" is set to "1" or "true", calls to <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> will use <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken" />.</span></span></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhysicalFileProvider (string root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string root) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (root As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PhysicalFileProvider(System::String ^ root);" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.FileProviders.PhysicalFileProvider : string -&gt; Microsoft.Extensions.FileProviders.PhysicalFileProvider" Usage="new Microsoft.Extensions.FileProviders.PhysicalFileProvider root" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="root" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="root"><span data-ttu-id="39bba-103">Корневой каталог.</span><span class="sxs-lookup"><span data-stu-id="39bba-103">The root directory.</span></span> <span data-ttu-id="39bba-104">Это должен быть абсолютный путь.</span><span class="sxs-lookup"><span data-stu-id="39bba-104">This should be an absolute path.</span></span></param>
        <summary><span data-ttu-id="39bba-105">Инициализирует новый экземпляр PhysicalFileProvider в указанном корневом каталоге.</span><span class="sxs-lookup"><span data-stu-id="39bba-105">Initializes a new instance of a PhysicalFileProvider at the given root directory.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhysicalFileProvider (string root, Microsoft.Extensions.FileProviders.Physical.ExclusionFilters filters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string root, valuetype Microsoft.Extensions.FileProviders.Physical.ExclusionFilters filters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (root As String, filters As ExclusionFilters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PhysicalFileProvider(System::String ^ root, Microsoft::Extensions::FileProviders::Physical::ExclusionFilters filters);" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.FileProviders.PhysicalFileProvider : string * Microsoft.Extensions.FileProviders.Physical.ExclusionFilters -&gt; Microsoft.Extensions.FileProviders.PhysicalFileProvider" Usage="new Microsoft.Extensions.FileProviders.PhysicalFileProvider (root, filters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="root" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
        <Parameter Name="filters" Type="Microsoft.Extensions.FileProviders.Physical.ExclusionFilters" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="root"><span data-ttu-id="39bba-106">Корневой каталог.</span><span class="sxs-lookup"><span data-stu-id="39bba-106">The root directory.</span></span> <span data-ttu-id="39bba-107">Это должен быть абсолютный путь.</span><span class="sxs-lookup"><span data-stu-id="39bba-107">This should be an absolute path.</span></span></param>
        <param name="filters"><span data-ttu-id="39bba-108">Указывает, какие файлы или каталоги исключаются.</span><span class="sxs-lookup"><span data-stu-id="39bba-108">Specifies which files or directories are excluded.</span></span></param>
        <summary><span data-ttu-id="39bba-109">Инициализирует новый экземпляр PhysicalFileProvider в указанном корневом каталоге.</span><span class="sxs-lookup"><span data-stu-id="39bba-109">Initializes a new instance of a PhysicalFileProvider at the given root directory.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="physicalFileProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39bba-110">Удаляет поставщик.</span><span class="sxs-lookup"><span data-stu-id="39bba-110">Disposes the provider.</span></span> <span data-ttu-id="39bba-111">После удаления поставщика токены изменений могут не активироваться.</span><span class="sxs-lookup"><span data-stu-id="39bba-111">Change tokens may not trigger after the provider is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="physicalFileProvider.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="39bba-112"><see langword="true" /> вызывается из <see cref="M:System.IDisposable.Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-112"><see langword="true" /> is invoked from <see cref="M:System.IDisposable.Dispose" />.</span></span></param>
        <summary><span data-ttu-id="39bba-113">Удаляет поставщик.</span><span class="sxs-lookup"><span data-stu-id="39bba-113">Disposes the provider.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~PhysicalFileProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!PhysicalFileProvider ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="physicalFileProvider.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39bba-114">Деструктор для <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-114">Destructor for <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryContents">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.FileProviders.IDirectoryContents GetDirectoryContents (string subpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.FileProviders.IDirectoryContents GetDirectoryContents(string subpath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryContents (subpath As String) As IDirectoryContents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::FileProviders::IDirectoryContents ^ GetDirectoryContents(System::String ^ subpath);" />
      <MemberSignature Language="F#" Value="abstract member GetDirectoryContents : string -&gt; Microsoft.Extensions.FileProviders.IDirectoryContents&#xA;override this.GetDirectoryContents : string -&gt; Microsoft.Extensions.FileProviders.IDirectoryContents" Usage="physicalFileProvider.GetDirectoryContents subpath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.FileProviders.IDirectoryContents</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subpath"><span data-ttu-id="39bba-115">Путь от корневого каталога.</span><span class="sxs-lookup"><span data-stu-id="39bba-115">A path under the root directory.</span></span> <span data-ttu-id="39bba-116">Начальные косые черты пропускаются.</span><span class="sxs-lookup"><span data-stu-id="39bba-116">Leading slashes are ignored.</span></span></param>
        <summary><span data-ttu-id="39bba-117">Перечисляет каталог по заданному пути, если таковой имеется.</span><span class="sxs-lookup"><span data-stu-id="39bba-117">Enumerate a directory at the given path, if any.</span></span></summary>
        <returns><span data-ttu-id="39bba-118">Содержимое каталога.</span><span class="sxs-lookup"><span data-stu-id="39bba-118">Contents of the directory.</span></span> <span data-ttu-id="39bba-119">Вызывающий объект должен проверить свойство <see cref="P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-119">Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists" /> property.</span></span> <span data-ttu-id="39bba-120">Значение <see cref="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents" />, если путь <paramref name="subpath" /> является абсолютным, каталог не существует или <paramref name="subpath" /> содержит недопустимые символы.</span><span class="sxs-lookup"><span data-stu-id="39bba-120"><see cref="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents" /> if <paramref name="subpath" /> is absolute, if the directory does not exist, or <paramref name="subpath" /> has invalid characters.</span></span>
<span data-ttu-id="39bba-121">.</span><span class="sxs-lookup"><span data-stu-id="39bba-121">.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.FileProviders.IFileInfo GetFileInfo (string subpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.FileProviders.IFileInfo GetFileInfo(string subpath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFileInfo (subpath As String) As IFileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::FileProviders::IFileInfo ^ GetFileInfo(System::String ^ subpath);" />
      <MemberSignature Language="F#" Value="abstract member GetFileInfo : string -&gt; Microsoft.Extensions.FileProviders.IFileInfo&#xA;override this.GetFileInfo : string -&gt; Microsoft.Extensions.FileProviders.IFileInfo" Usage="physicalFileProvider.GetFileInfo subpath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.FileProviders.IFileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subpath"><span data-ttu-id="39bba-122">Путь от корневого каталога</span><span class="sxs-lookup"><span data-stu-id="39bba-122">A path under the root directory</span></span></param>
        <summary><span data-ttu-id="39bba-123">Найти файл по указанному пути с помощью прямого сопоставления сегментов пути и физических каталогов.</span><span class="sxs-lookup"><span data-stu-id="39bba-123">Locate a file at the given path by directly mapping path segments to physical directories.</span></span></summary>
        <returns><span data-ttu-id="39bba-124">Сведения о файле.</span><span class="sxs-lookup"><span data-stu-id="39bba-124">The file information.</span></span> <span data-ttu-id="39bba-125">Вызывающий объект должен проверить свойство <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-125">Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists" /> property.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public string Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Root" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Root As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Root { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Root : string" Usage="Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39bba-126">Корневой каталог этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="39bba-126">The root directory for this instance.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseActivePolling">
      <MemberSignature Language="C#" Value="public bool UseActivePolling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseActivePolling" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UseActivePolling" />
      <MemberSignature Language="VB.NET" Value="Public Property UseActivePolling As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseActivePolling { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseActivePolling : bool with get, set" Usage="Microsoft.Extensions.FileProviders.PhysicalFileProvider.UseActivePolling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39bba-127">Возвращает или задает значение, определяющее, выполняет ли этот экземпляр <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" /> активный опрос на наличие изменений в файлах.</span><span class="sxs-lookup"><span data-stu-id="39bba-127">Gets or sets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" /> actively polls for file changes.</span></span>
            <para>
<span data-ttu-id="39bba-128">Если задано значение <see langword="true" />, интерфейс <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" />, возвращаемый методом <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" />, производит активный опрос на наличие изменений в файлах (<see cref="P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks" /> будет иметь значение <see langword="true" />) вместо работы в пассивном режиме.</span><span class="sxs-lookup"><span data-stu-id="39bba-128">When <see langword="true" />, <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> returned by <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> will actively poll for file changes (<see cref="P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks" /> will be <see langword="true" />) instead of being passive.</span></span>
            </para><para>
<span data-ttu-id="39bba-129">Это свойство действует, только если задано свойство <see cref="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-129">This property is only effective when <see cref="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher" /> is set.</span></span>
            </para></summary>
        <value><span data-ttu-id="39bba-130">Значение этого свойства по умолчанию определяется значением переменной среды с именем <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.</span><span class="sxs-lookup"><span data-stu-id="39bba-130">The default value of this property is determined by the value of environment variable named <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.</span></span>
<span data-ttu-id="39bba-131">При <see langword="true" /> или <c>1</c>это свойство по умолчанию имеет значение <see langword="true" />; в противном случае — false.</span><span class="sxs-lookup"><span data-stu-id="39bba-131">When <see langword="true" /> or <c>1</c>, this property defaults to <see langword="true" />; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePollingFileWatcher">
      <MemberSignature Language="C#" Value="public bool UsePollingFileWatcher { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsePollingFileWatcher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher" />
      <MemberSignature Language="VB.NET" Value="Public Property UsePollingFileWatcher As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UsePollingFileWatcher { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UsePollingFileWatcher : bool with get, set" Usage="Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39bba-132">Возвращает или задает значение, определяющее, использует ли этот экземпляр <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" /> опрос для определения наличия изменений в файлах.</span><span class="sxs-lookup"><span data-stu-id="39bba-132">Gets or sets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" /> uses polling to determine file changes.</span></span>
            <para>
<span data-ttu-id="39bba-133">По умолчанию <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" /> использует <see cref="T:System.IO.FileSystemWatcher" /> для прослушивания событий изменения файлов для <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-133">By default, <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />  uses <see cref="T:System.IO.FileSystemWatcher" /> to listen to file change events for <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" />.</span></span> <span data-ttu-id="39bba-134">Класс <see cref="T:System.IO.FileSystemWatcher" /> неэффективен в некоторых сценариях, например при использовании подключенных дисков.</span><span class="sxs-lookup"><span data-stu-id="39bba-134"><see cref="T:System.IO.FileSystemWatcher" /> is ineffective in some scenarios such as mounted drives.</span></span>
<span data-ttu-id="39bba-135">Для эффективного наблюдения за изменениями в файлах требуется опрос.</span><span class="sxs-lookup"><span data-stu-id="39bba-135">Polling is required to effectively watch for file changes.</span></span>
            </para><seealso cref="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UseActivePolling" /><span data-ttu-id="39bba-136">.</span><span class="sxs-lookup"><span data-stu-id="39bba-136">.</span></span></summary>
        <value><span data-ttu-id="39bba-137">Значение этого свойства по умолчанию определяется значением переменной среды с именем <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.</span><span class="sxs-lookup"><span data-stu-id="39bba-137">The default value of this property is determined by the value of environment variable named <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.</span></span>
<span data-ttu-id="39bba-138">При <see langword="true" /> или <c>1</c>это свойство по умолчанию имеет значение <see langword="true" />; в противном случае — false.</span><span class="sxs-lookup"><span data-stu-id="39bba-138">When <see langword="true" /> or <c>1</c>, this property defaults to <see langword="true" />; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Watch">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Primitives.IChangeToken Watch (string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Primitives.IChangeToken Watch(string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Watch (filter As String) As IChangeToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Primitives::IChangeToken ^ Watch(System::String ^ filter);" />
      <MemberSignature Language="F#" Value="abstract member Watch : string -&gt; Microsoft.Extensions.Primitives.IChangeToken&#xA;override this.Watch : string -&gt; Microsoft.Extensions.Primitives.IChangeToken" Usage="physicalFileProvider.Watch filter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Physical</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.IChangeToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="39bba-139">Строка фильтра, которая используется для определения файлов или папок, подлежащих отслеживанию.</span><span class="sxs-lookup"><span data-stu-id="39bba-139">Filter string used to determine what files or folders to monitor.</span></span> <span data-ttu-id="39bba-140">Пример: **/\*.cs, *.*, subFolder/**/\*.cshtml.</span><span class="sxs-lookup"><span data-stu-id="39bba-140">Example: **/\*.cs, *.*, subFolder/**/\*.cshtml.</span></span></param>
        <summary><para><span data-ttu-id="39bba-141">Создает объект <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> для указанного объекта <paramref name="filter" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-141">Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for the specified <paramref name="filter" />.</span></span></para>
          <para><span data-ttu-id="39bba-142">Стандартные маски интерпретирует</span><span class="sxs-lookup"><span data-stu-id="39bba-142">Globbing patterns are interpreted by</span></span> <seealso cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" /><span data-ttu-id="39bba-143">.</span><span class="sxs-lookup"><span data-stu-id="39bba-143">.</span></span></para></summary>
        <returns><span data-ttu-id="39bba-144">Интерфейс <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" />, который получает уведомление при добавлении, изменении или удалении файла, соответствующего <paramref name="filter" />.</span><span class="sxs-lookup"><span data-stu-id="39bba-144">An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that is notified when a file matching <paramref name="filter" /> is added, modified or deleted.</span></span> <span data-ttu-id="39bba-145">Возвращает <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken" />, если параметр <paramref name="filter" /> содержит недопустимые символы фильтра либо значение <paramref name="filter" /> является абсолютным путем или находится за пределами корневого каталога, указанного в конструкторе</span><span class="sxs-lookup"><span data-stu-id="39bba-145">Returns a <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken" /> if <paramref name="filter" /> has invalid filter characters or if <paramref name="filter" /> is an absolute path or outside the root directory specified in the constructor</span></span> <seealso cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)" /><span data-ttu-id="39bba-146">.</span><span class="sxs-lookup"><span data-stu-id="39bba-146">.</span></span>
<span data-ttu-id="39bba-147">.</span><span class="sxs-lookup"><span data-stu-id="39bba-147">.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
