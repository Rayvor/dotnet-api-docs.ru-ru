<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e244490aebb6b0a7921ae2d3729c5a58cca9b6e" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70633286" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityConnection&#xA;Inherits DbConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityConnection sealed : System::Data::Common::DbConnection" />
  <TypeSignature Language="F#" Value="type EntityConnection = class&#xA;    inherit DbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Содержит ссылку на концептуальную модель и подключение к источнику данных. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных с их метаданными, <xref:System.Data.EntityClient.EntityConnection> необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается с помощью <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> конструктора , <xref:System.Data.Common.DbConnection> который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 Примеры кода см. в разделе [Работа с EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8c5db787-78e6-4a34-8dc1-188bca0aca5e">Поставщик EntityClient для Entity Framework</related>
    <related type="Article" href="https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5">Работа с EntityClient</related>
    <related type="Article" href="https://msdn.microsoft.com/library/78d516bc-c99f-4865-8ff1-d856bc1a01c0">Строка подключения</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных с их метаданными, <xref:System.Data.EntityClient.EntityConnection> необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается с помощью <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> конструктора , <xref:System.Data.Common.DbConnection> который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 Примеры кода см. в разделе [Работа с EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных с их метаданными, <xref:System.Data.EntityClient.EntityConnection> необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается с помощью <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> конструктора , <xref:System.Data.Common.DbConnection> который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 Примеры кода см. в разделе [Работа с EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : string -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Строка соединения этого поставщика.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" /> на основании строки подключения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Средства EDM](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399249(v=vs.100)) создают именованную строку подключения, которая хранится в файле конфигурации приложения. Эта именованная строка подключения может быть указана вместо `connectionString` параметра при создании экземпляра <xref:System.Data.EntityClient.EntityConnection> класса.  
  
 Чтобы избежать непреднамеренного помещения <xref:System.Data.Common.CommandTrees> объектов <xref:System.Data.Objects.ObjectContext> в синхронизацию с их метаданными <xref:System.Data.EntityClient.EntityConnection> , необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с помощью этого конструктора (<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>), который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается с помощью <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> конструктора , <xref:System.Data.Common.DbConnection> который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 Примеры кода см. в разделе [Работа с EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">В строке подключения предоставлено недопустимое ключевое слово или не предоставлено обязательное.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workspace As MetadataWorkspace, connection As DbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::Data::Metadata::Edm::MetadataWorkspace ^ workspace, System::Data::Common::DbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : System.Data.Metadata.Edm.MetadataWorkspace * System.Data.Common.DbConnection -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection (workspace, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">Рабочая область <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, которую необходимо связать с подключением <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
        <param name="connection">Подключение к базовому источнику данных для этого объекта <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" /> с заданными объектами <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> и <see cref="T:System.Data.Common.DbConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор позволяет создавать <xref:System.Data.EntityClient.EntityConnection> из метаданных из файла на диске или из внедренного ресурса в сборке.  
  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных <xref:System.Data.EntityClient.EntityConnection> с их метаданными, необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается с помощью этого конструктора (<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> ), <xref:System.Data.Common.DbConnection>который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="workspace" /> или параметра <paramref name="connection" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">В рабочей области отсутствует концептуальная модель.  
  
- или - 
В рабочей области отсутствует файл сопоставлений.  
  
- или - 
В рабочей области отсутствует модель хранения.  
  
-или- 
<paramref name="connection" /> не в закрытом состоянии.</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException"><paramref name="connection" /> не от поставщика совместимой ADO.NET Entity Framework.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginDbTransaction : System.Data.IsolationLevel -&gt; System.Data.Common.DbTransaction" Usage="entityConnection.BeginDbTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Начинает транзакцию базы данных.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction();" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : unit -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает транзакцию посредством базового поставщика.</summary>
        <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityTransaction" />. Для выполнения команды в рамках данной транзакции возвращенный экземпляр <see cref="T:System.Data.EntityClient.EntityTransaction" /> можно будет связать с объектом <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод использует уровень изоляции транзакции. <xref:System.Data.IsolationLevel.Unspecified> <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> Чтобы указать другой уровень изоляции, вызовите <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. Это значение может интерпретироваться различными базовыми поставщиками. Если вы хотите, чтобы приложение было переносимым для нескольких поставщиков, оно должно явно указать уровень изоляции транзакции путем вызова <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.  
  
 В определенный момент времени может быть не более одной активной транзакции, созданной с помощью <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. Попытка вызова любой из <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> перегрузок <xref:System.Data.EntityClient.EntityConnection> для, у которого уже есть текущая транзакция, приводит к <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.  
  
- или - 
Вызов <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> был произведен с <see cref="T:System.Data.EntityClient.EntityConnection" />, уже имеющего текущую транзакцию.  
  
- или - 
Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : System.Data.IsolationLevel -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">Уровень изоляции транзакции.</param>
        <summary>Начинает транзакцию на указанном уровне изоляции посредством базового поставщика.</summary>
        <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityTransaction" />. Для выполнения команды в рамках данной транзакции возвращенный экземпляр <see cref="T:System.Data.EntityClient.EntityTransaction" /> можно будет связать с объектом <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В определенный момент времени может быть не более одной активной транзакции, созданной с помощью <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. Попытка вызова любой из <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> перегрузок <xref:System.Data.EntityClient.EntityConnection> для, у которого уже есть текущая транзакция, приводит к <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.  
  
-или- 
Вызов <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> был произведен с <see cref="T:System.Data.EntityClient.EntityConnection" />, уже имеющего текущую транзакцию.  
  
- или - 
Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (databaseName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ databaseName);" />
      <MemberSignature Language="F#" Value="override this.ChangeDatabase : string -&gt; unit" Usage="entityConnection.ChangeDatabase databaseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">Не поддерживается.</param>
        <summary>Не поддерживается.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод является обязательным при наследовании от  <xref:System.Data.Common.DbConnection> .  <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A> Этот метод не поддерживается и будет вызывать <xref:System.NotSupportedException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Если вызывается метод.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="entityConnection.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает соединение с базой данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если базовый поставщик данных неизвестен, вызов метода <xref:System.Data.EntityClient.EntityConnection.Close%2A> не выполняет никаких действий.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">При закрытии подключения произошла ошибка.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает строку соединения <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <value>Строка подключения, необходимая для установления начального подключения к источнику данных. Значение по умолчанию - пустая строка. Для закрытого соединения возвращается текущее установленное значение. Если значение не было задано, возвращается пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка `EntityClient` подключения состоит из последовательности пар параметров "ключевое слово-значение", разделенных точкой с запятой. Знак равенства (=) соединяет каждое ключевое слово и его значение. В следующей таблице перечислены допустимые имена для значений ключевых слов в строке соединения <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>.  
  
|Ключевое слово|Описание:|  
|-------------|-----------------|  
|`Provider`|Необходимо, если не задано ключевое слово `Name`. Имя поставщика, которое используется для получения объекта <xref:System.Data.Common.DbProviderFactory>, относящегося к базовому поставщику. Это - постоянное значение.<br /><br /> Если ключевое слово не включено в строку соединения, требуется непустое значение `Provider` ключевого слова. `Name` Это ключевое слово является взаимоисключающим по отношению к ключевому слову `Name`.|  
|`Provider Connection String`|Необязательный. Указывает зависящую от поставщика строку соединения, которая передается в базовый источник данных. Эта строка соединения должна быть выражена с помощью пар «ключевое слово/значение», допустимых для этого поставщика данных. Применение недопустимого ключевого слова `Provider Connection String` приводит к возникновению ошибки времени выполнения при его проверке в источнике данных.<br /><br /> Это ключевое слово является взаимоисключающим по отношению к ключевому слову `Name`.<br /><br /> Значение `Provider Connection String` должно быть заключено в кавычки. Ниже представлен пример такого кода.<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> Следующий пример работать не будет:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  
|`Metadata`|Необходимо, если не задано ключевое слово `Name`. Разделенный вертикальным каналом список каталогов, файлов и расположений ресурсов, в котором выполняется поиск сведений о модели и сопоставлении. Ниже представлен пример такого кода.<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> Пустые пространства, расположенные с обеих сторон вертикальной черты (|), не учитываются.<br /><br /> Это ключевое слово является взаимоисключающим по отношению к ключевому слову `Name`.|  
|`Name`|По желанию можно определить имя соединения в файле конфигурации приложения, в котором предоставляются необходимые для строки соединения пары «ключевое слово/значение». В этом случае нельзя задавать эти пары непосредственно в строке соединения. Применение ключевого слова `Name` в файле конфигурации не допускается.<br /><br /> Если в строке соединения не содержится ключевое слово `Name`, то необходимо задать непустые значения для ключевого слова Provider.<br /><br /> Это ключевое слово является взаимоисключающим по отношению к другим ключевым словам строки соединения.|  
  
 Приложение может предоставлять непосредственно в ключевое слово/значение <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> свойства, либо можно задать значение для `Name` ключевое слово. Если `Name` указывается ключевое слово, ключевое слово/значения строки подключения извлекаются из файла конфигурации приложения, следующим образом:  
  
 `Name=AdventureWorksEntities;`  
  
 Если `Name` используется ключевое слово в <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> свойство, другие ключевые слова не допускаются. Ключевое слово ссылается на именованную строку соединения, которая хранится `connectionStrings` в разделе файла конфигурации приложения, как показано в следующем примере. `Name` Значения `Provider`, `Metadata` и `Provider Connection String`  извлекаются из файла конфигурации во время выполнения.  
  
  
  
 Пары «ключевое слово/значение» могут быть также заданы непосредственно в свойстве <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>, как показано в следующем примере. В этом случае `Name` ключевое слово не используется.  
  
```  
"Provider=System.Data.SqlClient;  
Metadata=c:\metadata|c:\Metadata\Sql;  
Provider Connection String= 'Data Source=localhost;  
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "  
```  
  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных с их метаданными, <xref:System.Data.EntityClient.EntityConnection> необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается с помощью <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> конструктора , <xref:System.Data.Common.DbConnection> который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
   
  
## Examples  
 В следующем примере показано использование класса <xref:System.Data.EntityClient.EntityConnectionStringBuilder> в сочетании с классом <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. Код задает свойства `SqlConnectionStringBuilder` для <xref:System.Data.SqlClient.SqlConnection> создания строки, предоставляющей часть строки подключения базового поставщика. Обратите внимание `Provider` , что имя не может быть задано `SqlConnectionStringBuilder`с помощью, так как оно `SqlConnection` не использует допустимый синтаксис. Код создает <xref:System.Data.EntityClient.EntityConnection> строку, задавая `EntityConnectionStringBuilder` свойства.  
  
 [!code-csharp[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Предпринята попытка установить свойство <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> после инициализации <see cref="T:System.Data.EntityClient.EntityConnection" /> из <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />. <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> инициализируется при создании экземпляра <see cref="T:System.Data.EntityClient.EntityConnection" /> через перегрузку, принимающую как параметр <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> или при открытии экземпляра <see cref="T:System.Data.EntityClient.EntityConnection" />.</exception>
        <exception cref="T:System.ArgumentException">В строке подключения предоставлено недопустимое ключевое слово или не предоставлено обязательное.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/745c5f95-2f02-4674-b378-6d51a7ec2490">Строки подключения</related>
        <related type="Article" href="https://msdn.microsoft.com/library/78d516bc-c99f-4865-8ff1-d856bc1a01c0">Строки подключения (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionTimeout : int" Usage="System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает время ожидания (в секундах) при попытке установления подключения, по истечении которого попытка подключения завершается и создается ошибка.</summary>
        <value>Время (в секундах), в течение которого должно производиться ожидание открытия соединения. Значением по умолчанию является стандартное время ожидания базового поставщика данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращает 0, если базовый поставщик данных неизвестен.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Заданное значение меньше 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As EntityCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityCommand ^ CreateCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateCommand : unit -&gt; System.Data.EntityClient.EntityCommand" Usage="entityConnection.CreateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр <see cref="T:System.Data.EntityClient.EntityCommand" />, свойство <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> которого установлено в значение <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <returns>Объект <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Имя базового поставщика данных неизвестно.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="entityConnection.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Database : string" Usage="System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя текущей базы данных или той базы данных, которая будет использоваться после открытия подключения.</summary>
        <value>Значение свойства базового поставщика данных <see langword="Database" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для конкретного значения ключевого слова, такого `Database`как, которое сопоставляется <xref:System.Data.EntityClient.EntityConnection.Database%2A> со свойством, см. документацию по базовому поставщику данных. Для SQL Server эквивалентных ключевых слов см. документацию <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> по свойству.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Базовый поставщик данных неизвестен.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : string" Usage="System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя или сетевой адрес источника данных, с которым должно быть установлено соединение.</summary>
        <value>Имя источника данных. Значение по умолчанию - пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для конкретного значения ключевого слова, такого `DataSource`как, которое сопоставляется <xref:System.Data.EntityClient.EntityConnection.DataSource%2A> со свойством, см. документацию по базовому поставщику данных. Для SQL Server эквивалентных ключевых слов см. документацию <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> по свойству.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Базовый поставщик данных неизвестен.</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbProviderFactory : System.Data.Common.DbProviderFactory" Usage="System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="entityConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberSignature Language="F#" Value="override this.EnlistTransaction : System.Transactions.Transaction -&gt; unit" Usage="entityConnection.EnlistTransaction transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Объект транзакции, предназначенный для прикрепления.</param>
        <summary>Прикрепляет данный объект <see cref="T:System.Data.EntityClient.EntityConnection" /> в указанной транзакции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перенаправляет вызов подключения к источнику данных, чтобы явно прикрепить его <xref:System.Transactions.Transaction>к переданному.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataWorkspace () As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::MetadataWorkspace ^ GetMetadataWorkspace();" />
      <MemberSignature Language="F#" Value="member this.GetMetadataWorkspace : unit -&gt; System.Data.Metadata.Edm.MetadataWorkspace" Usage="entityConnection.GetMetadataWorkspace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает рабочую область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанную с соединением <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <returns>Рабочая область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанная с этим соединением <see cref="T:System.Data.EntityClient.EntityConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Data.Metadata.Edm.MetadataWorkspace> создается автоматически при создании класса <xref:System.Data.EntityClient.EntityConnection>. Процесс создания может вызывать исключения, относящиеся к метаданным. Метаданные загружаются в память, а приложение EDM (модель EDM) использует эти метаданные для доступа к сведениям о базовом источнике данных. Дополнительные сведения см. в статье [ADO.NET metadata](https://msdn.microsoft.com/library/196097a5-a791-4ac4-9e6a-805685d481d5).  
  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных с их метаданными, <xref:System.Data.EntityClient.EntityConnection> необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строку подключения можно изменить несколько раз, прежде чем соединение будет открыто. <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> блокирует метаданные.  
  
-   Экземпляр создается с помощью <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> конструктора , <xref:System.Data.Common.DbConnection> который принимает и. <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">Встроенная строка подключения содержит недопустимое значение ключевого слова <see langword="Metadata" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberSignature Language="F#" Value="override this.Open : unit -&gt; unit" Usage="entityConnection.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Устанавливает подключение к источнику данных посредством вызова метода <see langword="Open" /> базового поставщика данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы избежать случайного размещения объектов, таких <xref:System.Data.Common.CommandTrees> как <xref:System.Data.Objects.ObjectContext> и не синхронизированных с их метаданными, <xref:System.Data.EntityClient.EntityConnection> необходимо заблокировать свои метаданные. После блокировки метаданных изменения в строке подключения не допускаются. Ниже приведены два сценария блокировки метаданных.  
  
-   Экземпляр создается с помощью конструктора без параметров или с <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> помощью конструктора, который принимает строку подключения. <xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A> или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>  блокировка метаданных.  
  
-   Экземпляр создается <xref:System.Data.Metadata.Edm.MetadataWorkspace> с помощью конструктора, который принимает и  <xref:System.Data.Common.DbConnection> .  <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Изменения в строке подключения никогда не допускаются.  
  
 Когда загружаются метаданные, <xref:System.Data.EntityClient.EntityConnection> проверяется наличие концептуальной модели, модели хранения и файла сопоставления.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">При открытии подключения или неизвестном имени базового поставщика данных происходит ошибка.</exception>
        <exception cref="T:System.Data.MetadataException">Встроенная строка подключения содержит недопустимое значение ключевого слова <see langword="Metadata" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVersion : string" Usage="System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает строку, содержащую версию источника данных, к которому подключается клиент.</summary>
        <value>Версия источника данных, содержащаяся в строке подключения поставщика.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.ConnectionState" Usage="System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает свойство <see cref="T:System.Data.ConnectionState" /> базового поставщика, если соединение <see cref="T:System.Data.EntityClient.EntityConnection" /> открыто. В противном случае возвращается <see cref="F:System.Data.ConnectionState.Closed" />.</summary>
        <value><see cref="F:System.Data.ConnectionState.Open" />значение, если и только в <see cref="T:System.Data.EntityClient.EntityConnection" />том случае <see cref="T:System.Data.ConnectionState" /> , если открыты и внутреннее состояние, и базовый поставщик. Если состояние — открыто, но <see cref="T:System.Data.ConnectionState" /> поставщик закрыт, это свойство возвращает <see cref="F:System.Data.ConnectionState.Broken" />значение. <see cref="T:System.Data.EntityClient.EntityConnection" /> В противном случае она возвращает <see cref="F:System.Data.ConnectionState.Closed" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ StoreConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreConnection : System.Data.Common.DbConnection" Usage="System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Предоставляет доступ к подключению к базовому источнику данных, которое используется объектом <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <value>Объект <see cref="T:System.Data.Common.DbConnection" /> для подключения к источнику данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.EntityClient.EntityConnection> Если объект закрыт, возвращаемое соединение с источником данных будет закрыто. Если он открыт, будет возвращено соединение с открытым источником данных. Если были заданы сведения о соединении с источником данных, то возвращаемое значение всегда не равно null. Если нет сведений о соединении с источником данных (например, если использовался конструктор без параметров и после этого не была задана строка подключения), возвращается пустая ссылка.  
  
 То же соединение с источником данных, используемое Entity Framework, может использоваться совместно с другими частями приложения. <xref:System.Data.Common.DbConnection> Соединение <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> <xref:System.Data.Objects.ObjectContext> с источником <xref:System.Data.EntityClient.EntityConnection> данных возвращается в виде объекта из свойства объекта или из свойства. <xref:System.Data.Objects.ObjectContext.Connection%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
