<Type Name="ExpressionBuilder" FullName="System.Web.Configuration.ExpressionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8769b69de42a1047c0ab0a291fb5649f702ff335" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69141705" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExpressionBuilder : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExpressionBuilder extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExpressionBuilder&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Получает динамический ресурс при компиляции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET автоматически вычисляет выражения во время синтаксического анализа страницы с <xref:System.Web.Configuration.ExpressionBuilder> помощью класса. Коллекция, которая состоит `expressionBuilders` из элементов, содержащихся в `compilation` разделе конфигурации. <xref:System.Web.Configuration.ExpressionBuilderCollection> <xref:System.Web.Configuration.ExpressionBuilder> Содержит конкретные значения в парах "ключ-значение".  
  
 Значение извлекается путем включения выражения формы.  
  
 `<%$ ExpressionPrefix: ExpressionKey %>`  
  
 на странице. Сопоставляет тип выражения, получаемого в виде общего типа построителя выражений (то <xref:System.Web.Compilation.AppSettingsExpressionBuilder>есть) или пользовательского типа построителя выражений. `ExpressionPrefix` `ExpressionKey` Указывает ключ, используемый для ссылки на возвращаемое значение.  
  
 Если вы решили реализовать общий тип конструктора выражений, необходимо сопоставить построитель выражений с именем связанного раздела в конфигурации. Если вы решили реализовать пользовательский тип конструктора выражений, необходимо связать построитель выражений с пользовательским классом конструктора выражений, который должен быть производным от <xref:System.Web.Configuration.ExpressionBuilder> класса.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <related type="Article" href="https://msdn.microsoft.com/library/9ae6373a-853a-4d6e-8639-8c173dacb59f">Общие сведения о выражениях ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionBuilder (string expressionPrefix, string theType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expressionPrefix, string theType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.ExpressionBuilder.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionPrefix As String, theType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionBuilder(System::String ^ expressionPrefix, System::String ^ theType);" />
      <MemberSignature Language="F#" Value="new System.Web.Configuration.ExpressionBuilder : string * string -&gt; System.Web.Configuration.ExpressionBuilder" Usage="new System.Web.Configuration.ExpressionBuilder (expressionPrefix, theType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="theType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">Строка, определяющая тип выражения для извлечения.</param>
        <param name="theType">Строка, указывающая тип выражения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Configuration.ExpressionBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как создать <xref:System.Web.Configuration.ExpressionBuilder> объект. Этот пример кода является частью большого примера, <xref:System.Web.Configuration.ExpressionBuilderCollection> приведенного для класса.  
  
 [!code-csharp[System.Web.Configuration.ExpressionBuilderCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ExpressionBuilderCollection/CS/ExpressionBuilderCollection.cs#2)]
 [!code-vb[System.Web.Configuration.ExpressionBuilderCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ExpressionBuilderCollection/VB/ExpressionBuilderCollection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ExpressionBuilder.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string with get, set" Usage="System.Web.Configuration.ExpressionBuilder.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("expressionPrefix", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsKey=true, IsRequired=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает строку, определяющую тип выражения для извлечения.</summary>
        <value>Строка, определяющая тип выражения для извлечения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Компонент <xref:System.Web.Configuration.ExpressionBuilder.ExpressionPrefix%2A> сопоставляет выражение с именем связанного раздела в конфигурации для типов общих выражений или сопоставляет выражение с классом пользовательского выражения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ExpressionBuilder.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Web.Configuration.ExpressionBuilder.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ExpressionBuilder.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Type { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : string with get, set" Usage="System.Web.Configuration.ExpressionBuilder.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("type", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает строку, указывающую тип выражения.</summary>
        <value>Строка, указывающая тип выражения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Configuration.ExpressionBuilder.Type%2A> Указывает тип объекта, используемого для определения значения выражения. Тип может указывать либо раздел в конфигурации, либо пользовательский класс.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
