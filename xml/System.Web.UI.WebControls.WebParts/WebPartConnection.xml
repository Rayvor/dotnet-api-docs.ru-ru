<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d5d0fe79b1ff03367e8aba77257b26c4e72e0f2" /><Meta Name="ms.sourcegitcommit" Value="6b9d64332f31de312efea785fbb19e4d80f544d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/12/2019" /><Meta Name="ms.locfileid" Value="67026468" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет объект, который позволяет двум элементам управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> устанавливать подключение. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В наборе элементов управления веб-частей, подключение является ссылка или связь между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> (или другой сервер или пользователь) элементов управления, которые позволяет им совместно использовать данные. Эта возможность для совместного использования данных позволяет подключенных элементов управления для использования одним из способов, которые бы превышали возможностей, предоставляемых изолированными элементами управления. Например если один элемент управления предоставляет данные почтовых индексов, а другой элемент управления может считывать данные и предоставлять сведения о погоде, на основе почтового кода, затем возможность подключения двух элементов управления предоставляет большую ценность для пользователей. Расширить этот пример, других элементов управления может быть создан с уже вывод сведений в зависимости на почтовый код, например в элементе управления со ссылками на местные новости и все эти элементы управления, которые могут работать с данными почтового кода могут обмениваться данными с одного элемента управления, который предоставляет Почтовый индекс. Конечные пользователи приложений веб-частей можно создать и управлять соединениями между все совместимые элементы управления непосредственно из веб-браузер, используя стандартные подключения пользовательский интерфейс (UI), предоставляемые <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления или с помощью пользовательского интерфейса, предоставляемые разработчик.  
  
 Это <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Общие сведения о классе содержит общие основные сведения по созданию подключения. Дополнительные сведения о конкретных компонентах и требования, связанные с созданием подключения, см. в разделе [Обзор подключений веб-частей](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)), или см. в разделе ссылочных классов и примеры, описанные в следующем обсуждении кода. Существует несколько фундаментальных аспектов веб-частей.  
  
-   Два <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Каждое соединение веб-частей состоит из двух элементов управления. Это дает элементу управления для участия в более одного соединения одновременно, но каждое отдельное подключение состоит ровно из двух элементов управления. Элементы управления можно использовать в <xref:System.Web.UI.WebControls.WebParts.WebPart> базового класса, или они могут быть другие серверные элементы управления, включая элементы управления ASP.NET, пользовательских серверных элементов управления и пользовательские элементы управления. Элементы управления, которые не являются производными от <xref:System.Web.UI.WebControls.WebParts.WebPart> класса, помещенного в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоны, будут автоматически переноситься с <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> объекта во время выполнения, который включает их наследование от <xref:System.Web.UI.WebControls.WebParts.WebPart> класс и функцию, что во время выполнения <xref:System.Web.UI.WebControls.WebParts.WebPart> элементы управления.  
  
-   Элементов управления, располагающихся в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоны. Оба <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и других видов серверный элемент управления должен находиться в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоне, чтобы иметь возможность участвовать в подключениях веб-частей (и большинство других компонентов веб-частей).  
  
-   Получатели и поставщики. В каждом подключении веб-частей имеется два элемента управления: поставщик данных и объекта-получателя данных. Поставщик передает данные получателю через метод заданный обратный вызов, который возвращает данные в форме интерфейса. (Пример того, как создать и указать метод обратного вызова, см. в разделе "Пример" в этом разделе.) Этот метод обратного вызова известен как точка подключения поставщика. Содержатся сведения о этой точки подключения (его «имя», идентификатор и тип возвращаемого интерфейса) в <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект, связанный с элементом управления поставщика. Потребитель получает данные с помощью указанного метода, который может принимать экземпляр интерфейса. Этот метод называется точка подключения получателя, а также содержатся сведения о точке подключения (имя, идентификатор и тип интерфейса) в <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект, связанный с элементом управления потребителя.  
  
-   Совместимые элементы управления или допустимый преобразователь. Для работы подключения поставщика и получателя должны быть совместимыми (то есть, что их методы точки указанное соединение может работать с тем же типом интерфейса), или же должен присутствовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект, способный преобразовывать тип, предлагаемый по Поставщик в тип, понятные потребителю.  
  
-   Объект <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Для подключения к существует, должен представлять собой экземпляр <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> класс, содержащий ссылки на поставщика и потребителя элементы управления, вместе со сведениями об их точек подключения. Если поставщика и потребителя несовместимы и вместо этого используйте <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта подключения, соединение ссылается на преобразователь.  
  
-   Средства установления соединения. После совместимые элементы управления поставщика и получателя были правильно разработанные с помощью методов точки подключения и размещается в зоне и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект доступен, последние основные действием является инициировать подключение. Это может произойти рекомендуется для пользователей создать подключение через пользовательский Интерфейс. Если поместить `<asp:connectionszone>` элемента на странице, а другой необходимые компоненты для подключения в месте, во время выполнения пользователь можно переключить в режим отображения подключения, щелкните команду подключения в меню команд поставщика или потребителя и пользовательского интерфейса подключения (на основе <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> управления) будет отображаться. Через этот пользовательский Интерфейс то пользователь может инициировать соединение. Другим способом, чтобы инициировать подключение является сделать это программным способом. В любом случае через пользовательский Интерфейс, или программно, базовому методу, инициирующую соединение, аналогичен. Приложение вызывает <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод (или <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод, если использование класса transformer) на <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управлять, передавая ему поставщика, потребитель и их соответствующие объекты точек подключения, а метод возвращает <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Класс определяет объект, который инкапсулирует основные сведения о соединении между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Класс практически полностью состоит из свойств, связанных со сведениями о определенного подключения. Некоторые свойства связаны элемента управления получателя в подключении. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Ссылается свойство элемента управления получателя и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойство ссылается на идентификатор получателя. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Потребителя ссылается объект, содержащий сведения о точке подключения потребителя, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Свойство ссылается на идентификатор <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Все эти свойства соединения, связанные с потребитель должен иметь значение, назначенные им, чтобы создать подключение.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Класс также содержит несколько свойств, относящихся к элементу управления поставщика в подключении, и они соответствуют свойствам для объекта-получателя. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Ссылается свойство элемента управления поставщика, хотя <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойство ссылается на его идентификатор. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Ссылок на свойства <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство ссылается на идентификатор точки подключения поставщика.  
  
 Некоторые свойства связаны состояние соединения. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Свойство указывает, является ли соединение активный (в настоящее время обмена данными) "или" неактивные (данные по-прежнему подключены, но не активно общего доступа). <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Свойство указывает, является ли подключение общим (доступен для всех пользователей страницы) или подключение конкретного пользователя и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойство указывает, является ли элемент управления статическим (объявлено в разметке страницы и таким образом постоянных) или динамический (созданный программным способом, что означает, что он можно удалить).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание простого подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. В примере показано три способа формирования подключения: декларативно, поместив тегов для подключения в разметке веб-страницы; программно путем создания подключения в коде; и в пользовательском Интерфейсе, поместив <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> управления на странице, который позволяет пользователям установить соединение.  
  
 В примере кода состоит из четырех частей:  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Имеется также <xref:System.Web.UI.WebControls.WebParts.WebPart> класс с именем `ZipCodeWebPart` , реализующий интерфейс и выступает в качестве элемента управления поставщика. Его `ProvideIZipCode` метод является методом обратного вызова, реализующий единственный член этого интерфейса. Метод просто возвращает экземпляр интерфейса. Обратите внимание, что метод помечен атрибутом `ConnectionProvider` атрибут в своих метаданных. Это механизм для идентификации метода как метода обратного вызова для точки подключения поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс называется `WeatherWebPart`, и он выступает в роли потребителя для соединения. Этот класс содержит метод с именем `GetZipCode` , возвращает экземпляр `IZipCode` интерфейса из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` в метаданных атрибутом.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. В верхней, `Register` директивы для пользовательского элемента управления и пользовательского <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Поскольку в примере предполагается, динамическая компиляция элементов управления, исходный код для элементов управления должна находиться в подпапке App_Code; `Register` тега на странице ссылается только на произвольный префикс тега и пространство имен элементов управления. Пользовательский <xref:System.Web.UI.WebControls.WebParts.WebPart> объявленные элементы управления (поставщика и потребителя) на веб-странице `<asp:webpartzone>` элемент-внутри `<zonetemplate>` элемент.  
  
 Страница предоставляет три способа создания подключения между пользовательские элементы управления. Первый метод является декларативным. В разметке страницы `<StaticConnections>` элемент объявлен и что `<asp:WebPartConnections>` элемент информацией о различных поставщиков и получателей подключения, заданные в виде атрибутов. Это один из способов, чтобы создать подключение, объявив его непосредственно в веб-страницы, в частности `<asp:WebPartManager>` элемент. Из-за этого статического соединения соединение между двух элементов управления создается сразу же первый раз, когда страница загружается.  
  
 Второй метод для создания подключения между элементами управления обеспечивается `<asp:connectionszone>` элементу страницы. Если пользователь переключает страницу в режим соединения во время выполнения и выбирает команду соединения на одном из настраиваемых элементов управления, `<asp:connectionszone>` автоматически отображает пользовательский Интерфейс для создания подключения.  
  
 Этой странице также показан третий способ создания подключения, используемого для выполнения программным способом. В `Button1_Click` метод, код создает <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект для элемента управления поставщика и извлекает сведения о своей точки подключения, вызвав <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод. Он выполняет подобной задачи для элемента управления получателя, вызвав <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> метод. Наконец, он создает новый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> путем вызова метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки веб-страницы в браузере, первый подключение уже существует, поскольку он объявлен внутри `<StaticConnections>` элемент. Введите любой текст в **почтовый индекс поставщика** элемента управления и он будет отображаться в элементе управления получателя. Затем отключите два элемента управления. С помощью **режим отображения** выберите в раскрывающемся списке элемента управления, изменить страницу в режим отображения подключения. Щелкните меню команд (представленное стрелкой вниз в заголовке окна) для каждого из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и обратите внимание на то, что все они содержат **Connect** параметр. Это команда подключения, которая отображается в меню команд только тогда, если страница находится в режиме подключения. Щелкните команду подключения в одном из элементов управления, а также подключение пользовательского интерфейса, предоставляемые <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> отображается элемент управления. Нажмите кнопку **Disconnect** кнопку, чтобы завершить статическое подключение между элементами управления. Используйте **режим отображения** элемента управления, чтобы вернуться в режим просмотра. Попробуйте еще раз введите новый текст в поставщике и обратите внимание, что поскольку отключенных элементов управления, текст не удается обновить в элементе управления получателя.  
  
 Далее используйте тот же метод как описано выше, чтобы снова перейти на страницу в режим отображения подключения. Щелкните команду подключения в один из элементов управления. Нажмите кнопку **создать подключение** связать и с помощью пользовательского интерфейса, предоставляемые <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления, чтобы создать подключение между элементами управления. Это второй метод для создания подключения. Обратите внимание, что как только подключение будет сформировано, последняя строка введенные в элементе управления поставщика (который не отображаются, поскольку элементы управления были отключены) внезапно появляется в объекте-получателе, так как подключение будет повторно создана. Нажмите кнопку **Disconnect** кнопку, чтобы завершить текущее подключение, которое вы только что создали. Вернитесь в режим просмотра. Введите новый текст в поставщике, чтобы убедиться, что текст не обновляется, и снова отключенных элементов управления.  
  
 Вернитесь в режим отображения подключения. Чтобы не нажимать команду подключения, нажмите кнопку **подключение элементов управления веб-частей** кнопку, которая иллюстрирует третий метод формирования подключения. Этот подход подключается одного простого действия программным образом элементы управления без необходимости использовать <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления. Обратите внимание на то, что при создании подключения последнюю строку, введенное в поставщике внезапно отображается в элементе управления получателя.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Обзор подключений веб-частей</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Конструктор является открытым, анализатор ASP.NET позволяют создавать экземпляр при объявлении подключение в разметке веб-страницы; в этот конструктор не предназначен для использования в коде разработчика.  
  
 Если вы хотите создать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> программным образом, объект, следует использовать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> или <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления. Эти методы обрабатывают многие сведения о создания подключения и возвращают <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Конструктор для <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> класс задает значения <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства `true`. Таким образом, состояние нового подключения по умолчанию является статическим (это означает, что он объявлен в разметке веб-страницы, содержащей) и общих (видимый для всех пользователей страницы). Это будет так, при добавлении подключения в типичном сценарии путем объявления подключения в разметке страницы с `<asp:webpartconnection>` элемент. Однако в других случаях подключение будет иметь различные значения для этих свойств. Например при добавлении подключения программным способом, создав объект подключения в коде, и пользователь просматривает страницы в области персонализации пользователя по умолчанию, соединение создается как динамические, user(visible only to the specific user) подключение.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> И <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства доступны только для чтения, а эти свойства, которые определяют тип подключения задаются внутренним образом <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления в зависимости от того, как создается подключение (декларативно в разметке страницы, или программным способом с помощью кода или пользовательского интерфейса).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует в подключении как элементу правления получателя.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который представляет элемент управления веб-частей, функционирующий в подключении как получатель.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждое соединение веб-частей состоит из двух элементов управления с общими данными. Один элемент управления функционирует как поставщик данных, а другой элемент управления действует как потребитель, получения и обработки данных от поставщика. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Свойство получает ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPart> управления функционирующего в качестве получателя в связи соединения.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство.  
  
 В примере кода состоит из четырех частей:  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат в качестве потребителя и поставщика для подключения и интерфейс, используемый для точки подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода приведен код для веб-страницы размещены элементы управления и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство. В верхней части страницы, `Register` директивы для пользовательского элемента управления и пользовательские элементы управления. Так как в этом примере используется динамическая компиляция `Register` директива для исходного файла не требуется ссылаться на имя сборки; она содержит только произвольный префикс тега и пространство имен элементов управления. В `Button2_Click` метод, код обращается к объекту подключения через <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления и возвращает ссылку на элемент управления получателя.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, с помощью **режим отображения** элемента управления с раскрывающимся списком для переключения в режим подключения на странице. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Используйте **подключение элементов управления веб-частей** кнопки, или указанное подключение пользовательский интерфейс (UI), чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения о дисплее потребителя** кнопку, чтобы запустить код, демонстрирующий <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Длина свойства <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> равна нулю.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который служит в качестве точки подключения для элементов управления, функционирующих в подключении в качестве получателя.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />, связанный с элементом управления получателя в подключении.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один из действия, необходимые для создания подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления является создание точки подключения для каждого элемента управления. Точки подключения потребителя — это объект, содержащий сведения о подключении к элементу управления, выступающий в роли потребителя. В исходный код потребителя, один из методов должен быть идентифицирован с `ConnectionConsumer` атрибута. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Объект, связанный с элементом управления получателя содержит сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе (UI), и какой тип интерфейса метода можно получить. Этот набор сведений о получателе, метод для создания подключений и тип интерфейса, понятных ему комплектов совместно формируют точки подключения потребителя.  
  
 По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта можно подключиться только к одной <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> в любой момент времени. Объект-получатель может иметь несколько методов, которые определены как возможные точки подключения получателя, но объект-получатель может участвовать только в одном подключении как получатель (таким образом, только один из его точки подключения получателя может быть активна) за раз. Напротив <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> можно подключиться к любому количеству <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объектов. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> свойство <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат в качестве потребителя и поставщика для подключения и интерфейс, используемый для точки подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода приведен код для веб-страницы размещены элементы управления и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство. В `Button1_Click` метод, все объекты, необходимые для создания подключения создаются, включая <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Все эти объекты передаются в <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания подключения. В `Button2_Click` метод, код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойства и отображает некоторые сведения о соединении с точки.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, с помощью **режим отображения** элемента управления с раскрывающимся списком для переключения в режим подключения на странице. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Используйте **подключение элементов управления веб-частей** кнопки, или указанное подключение пользовательского интерфейса, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения подключения ConnectionPoint** кнопку, чтобы запустить код, демонстрирующий <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, служащего в качестве точки подключения получателя для этого подключения.</summary>
        <value>Строка, которая содержит идентификатор для точки подключения получателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для статического подключения, объявленные в разметке веб-страницы, разработчики могут указать, какие точки подключения потребителя, которая будет использоваться для подключения путем присвоения значения для `ConsumerConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Если значение не назначен атрибут, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
 При создании динамических подключений (программный), обычно не задавайте значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойства. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> , передавая ему, потребителей и подключения получателя точки объекты (а также другие обязательные параметры), и этот метод определяет, используется правильный идентификатор, используемый для подключения получателя точка. Аналогичным образом, при отключении, можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> метод без необходимости указания <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> значение свойства.  
  
> [!NOTE]
>  Идентификатор точки подключения получателя может быть определен, при указании <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления в качестве получателя. Необходимо определить метод в получателе, который получает экземпляр интерфейса, предоставляемого элементом управления поставщика или преобразователь. Для идентификации метода, отметить его атрибутом `ConnectionConsumer` атрибута кода. При добавлении этого атрибута, можно добавить необязательное строковое значение параметра, которое используется в качестве идентификатора для потребителя <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Если указать значение для необязательного параметра ID, это значение становится значением <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойство для соединения. Если не указать значение идентификатора <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативные и программные <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. Обратите внимание на то, что соединение объявлено в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление подключений содержит обязательные `ConsumerConnectionPointID` атрибута. Второй метод для создания подключения отображается в `Button1_Click` метод, где код создает новое подключение с использованием точки подключения, определенной в элементе управления получателя. Затем в `Button2_Click` метод, код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойство.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание на то, что он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** выберите в раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключение элементов управления веб-частей** кнопку, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения подключения ConnectionPoint** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> значение свойства. Значение записывается в метке под элементами управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, функционирующего в качестве получателя для этого подключения.</summary>
        <value>Строка, которая содержит идентификатор элемента управления, который функционирует в подключении в качестве получателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Значение свойства является обязательным, если создать подключение между <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Если значение не присваивается свойству, исключение возникает, когда <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления пытается активировать соединение.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативные и программные <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. Обратите внимание на то, что соединение объявлено в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление подключений содержит обязательные `ConsumerID` атрибута. Второй метод для создания подключения отображается в `Button1_Click` метод, где код создает новое подключение с использованием точки подключения, определенной в элементе управления получателя. Затем в `Button2_Click` метод, код получает значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойства и отображает его в метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание на то, что он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** выберите в раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключение элементов управления веб-частей** кнопку, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения потребителя** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> значение свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает идентификатор объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Строка, содержащая идентификатор объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект имеет уникальное значение, присваиваемое его <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойство. Это гарантирует, что имеется возможность различать несколько подключений.  
  
 При создании статического соединения, объявив `<asp:webpartconnection>` элемент в веб-страницы и вы не присвоить значение `ID` атрибут для соединения, исключение возникает, когда <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления пытается активировать соединение.  
  
 Когда <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления создает динамическое подключение, он вызывает метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> метод, чтобы создать уникальный идентификатор для подключения.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативные и программные <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. Обратите внимание на то, что соединение объявлено в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление подключений содержит обязательные `ID` атрибута. Второй метод для создания подключения отображается в `Button1_Click` метод, где код создает новое подключение с использованием точки подключения, определенной в элементе управления получателя. Здесь свойство ID не является обязательным, так как подключение является динамическим и <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления задает идентификатор для соединения. В `Button2_Click` метод, код получает значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойства и отображает его в метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание на то, что он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** выберите в раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключение элементов управления веб-частей** кнопку, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения о подключении** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> значение свойства.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, существует ли в настоящее время объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> и способен ли передавать данные между элементами управления поставщика и получателя.</summary>
        <value>Значение <see langword="true" />, если подключение является активным; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Свойство указывает состояние <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта. Если соединение находится в этом состоянии, управления поставщика и получателя в соединении, взаимодействующими и возможность обмена данными через общий интерфейс или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта.  
  
 При просмотре пользователем отображаемой страницы, включающий установленное подключение в обычном режиме, подключение обычно активна, (если его не удалось активировать из-за некоторых конфликта или другие проблемы при загрузке страницы). На ранних стадиях жизненного цикла страницы и элемента управления, свойство имеет значение `false`. Сразу после активации соединения <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> событий на <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента вызывается событие. В частности, соединение активируется после потребитель получил экземпляр указанного интерфейса от поставщика или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта.  
  
 Полезно знать, активен ли соединение в ситуациях, где может быть конфликтов или проблем синхронизации из-за нескольких подключений на странице. Например, если нет какого-либо рода конфликт между двумя подключениями <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемент управления имеет параметр одно из подключений не активации, чтобы избежать конфликта.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> свойство.  
  
 Пример состоит из трех частей:  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страницы. В верхней находится `Register` директива, которая ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое подключение объявляется внутри `<StaticConnections>` элемента на странице. В рамках `<script>` являются четыре обработчики событий. Каждый обработчик событий проверяет значение параметра <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> свойство статического соединения и записывает сообщение в <xref:System.Web.UI.WebControls.Label> элемента управления, указывающее, является ли подключение активным или неактивным в текущем состоянии жизненного цикла страницы и элемента управления. Это показывает, в какой момент подключение становится активным, и что он остается активным после страницы отображается.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано и сообщения уже были записаны в метки, отображающие, была ли подключение активным на различных этапах жизненного цикла страницы и элемента управления. Нажмите кнопку **сведения о подключении** кнопку и обратите внимание, что подключение не активен на этом этапе, но что соединение активируется каждый раз после <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> событие и что он по-прежнему активна (и останется таковым) после <xref:System.Web.UI.Control.PreRender> событий страницы.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> видимым для всех пользователей или же только для текущего пользователя.</summary>
        <value>Значение <see langword="true" />, если подключение используется совместно, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как и в случае с отдельными <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект может быть общим или экземпляра пользователя. Общий экземпляр означает, что подключение является видимым для всех пользователей веб-страницы, и экземпляр пользователя означает, что подключение является видимым только для конкретного пользователя.  
  
 В общем случае способ подключения добавляется на страницу определяет, является ли подключение общим. Если соединение объявлено в разметке веб-страницы, то общий доступ к подключению и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство имеет значение `true`. Кроме того Если веб-страницы находится в общей области персонализации при добавлении подключения, подключение также доступно. Как правило, когда пользователь вводит `<asp:connectionszone>` пользовательский интерфейс (UI), чтобы добавить подключение, страницы находится в области персонализации пользователя, поэтому соединения не используется совместно с <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство имеет значение `false`.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство.  
  
 В примере кода состоит из пяти частей:  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Запись в файле Web.config, который необходим для выполнения этого примера.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. В `Button2_Click` метод, он проверяет <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство из существующего подключения и выводит результат на странице.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 В четвертой части в примере кода — это запись в файле Web.config, который необходим для учетной записи пользователя, которое будет использовать пример, чтобы иметь возможность редактировать страницу в общей области персонализации. Чтобы включить этот параметр, должен иметь запись в файле Web.config в `<system.web>` раздел, который выглядит как в следующем примере.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 После загрузки страницы в браузере, с помощью **режим отображения** элемента управления с раскрывающимся списком для переключения страницы в режим отображения подключения. Нажмите кнопку **подключение элементов управления веб-частей** кнопку, чтобы создать подключение. Затем щелкните **сведения о подключении** кнопку, чтобы отобразить ли подключение общим. Если вы создали подключение со страницей в области персонализации пользователя по умолчанию <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> значение свойства должно быть `false` для соединения.  
  
 В меню команд одного из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления (обозначается стрелкой вниз в строке заголовка), щелкните команду подключения. Когда появится пользовательского интерфейса подключения, нажмите кнопку **Disconnect** кнопку, чтобы завершить подключение. Используйте **режим отображения** элемента управления, чтобы вернуться в режим просмотра.  
  
 В **режим отображения** элемент управления, установите **Shared** можно изменить на странице в Общая область персонализации. Выполните те же действия, как эти выше, чтобы создать подключение, а затем снова нажмите **сведения о подключении** кнопку, чтобы отобразить ли подключение общим. В этом случае значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство должно иметь значение `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, объявлен ли объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> в разметке веб-страницы или же создан программным способом.</summary>
        <value>Значение <see langword="true" />, если подключение является статическим, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подключения между элементами управления веб-частей может быть статическим или динамическим. Статическое подключение объявляется в разметке веб-страницы, с помощью `<asp:WebPartConnection>` элемент. Динамические подключения создаются программно или когда пользователь создает подключение через пользовательский интерфейс (UI), определяемый <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления.  
  
 Статические подключения являются общими объектами, это означает, что они доступны для всех пользователей веб-страницы. Кроме того, они являются по сути постоянными так, как статический, такие как <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, они не могут быть удалены без возможности восстановления.  
  
> [!NOTE]
>  Хотя статический объект подключения не может быть окончательно удален, он может быть окончательно отключен. В этом случае отключенный объект будет существовать на сервере, но конечный пользователь никогда не будет учитывать существование объекта на странице.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойство.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страницы. В верхней находится `Register` директива, которая ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое подключение объявляется внутри `<StaticConnections>` элемента на странице. `Button1_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойство для проверки, является ли соединение статическим.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано. Введите любой текст в элементе управления поставщика и обратите внимание на то, что текст отображается в элементе управления получателя. Нажмите кнопку **сведения о подключении** кнопку, чтобы отобразить значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает элемент управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует как поставщик в подключении веб-частей.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует как поставщик данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждое соединение веб-частей состоит из двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементы управления--объект-получатель и поставщик--и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство возвращает ссылку на элемент управления поставщика в подключении.  
  
 Как и его аналог в соединении (элемент управления получателя) поставщик управления требуется для установления соединения. При создании соединения программным образом или, объявив ее в формате сохранения страницы, необходимо указать элемент управления в качестве поставщика для подключения.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страницы. В верхней находится `Register` директива, которая ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое подключение объявляется внутри `<StaticConnections>` элемента на странице. Обратите внимание, что в `<asp:webpartconnection>` элемент, `ProviderID` атрибут имеет идентификатор элемента управления поставщика, назначенные ему. Это необходимо для идентификации поставщика для статического подключения. `Button1_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство и записывает некоторые детали и метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано. Введите любой текст в элементе управления поставщика и обратите внимание на то, что текст отображается в элементе управления получателя. Нажмите кнопку **сведения о поставщиках** кнопки для отображения некоторых значений свойств, получить доступ через <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Длина значения свойства <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> равна нулю.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который служит как точка подключения для элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, выполняющего функцию поставщика в подключении.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />, связанный с элементом управления поставщика в подключении.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один из действия, необходимые для создания подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления является создание точки подключения для каждого элемента управления. Точка подключения поставщика находится объект, содержащий сведения о подключении к элементу управления, функционирующего в качестве поставщика. В исходном коде поставщика, один из методов должен быть идентифицирован с `ConnectionProvider` атрибута. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> То есть связанный с поставщиком управления содержит сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе (UI), и введите экземпляр интерфейса метод может возвращать объект-получатель элемент управления. Этот набор сведения о поставщике, его метод для создания подключений и тип интерфейса, которые он предоставляет, совместно формируют точки подключения поставщика.  
  
 По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> можно подключиться только к одной <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> в любой момент времени. Объект-получатель может иметь несколько методов, которые определены как возможные точки подключения получателя, но объект-получатель может участвовать только в одном подключении как получатель (таким образом, только один из его точки подключения получателя может быть активна) за раз. Напротив <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> можно подключиться к любому количеству <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объектов по умолчанию. Например элемент управления поставщика, который предоставляет почтовый индекс может быть подключен к нескольким пользовательским элементам управления, которые используют почтовый индекс для создания различных типов данных, основываясь на почтовом индексе, например данные о погоде, новости и т. д. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> свойство <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат в качестве потребителя и поставщика для подключения и интерфейс, используемый для точки подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода приведен код для веб-страницы размещены элементы управления и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство. В `Button1_Click` метод, все объекты, необходимые для создания подключения создаются, включая <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта. Обратите внимание на вызов <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления. Различные созданные объекты передаются в <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания подключения. В `Button2_Click` метод, код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойства и отображает некоторые сведения о соединении с точки.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, с помощью **режим отображения** элемента управления с раскрывающимся списком для переключения в режим подключения на странице. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Используйте **подключение элементов управления веб-частей** кнопки, или указанное подключение пользовательского интерфейса, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения подключения ConnectionPoint** кнопку, чтобы запустить код, демонстрирующий <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, выполняющего роль точки подключения поставщика для этого подключения.</summary>
        <value>Строка, содержащая идентификатор для объекта точки подключения поставщика.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для статического подключения, объявленные в разметке веб-страницы, разработчики могут указать, какие точки подключения поставщика, которая будет использоваться для подключения путем присвоения значения для `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Если значение не назначен атрибут, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
 При создании динамических подключений (программный), обычно не задавайте значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойства. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> , передавая ему, поставщика и подключение к поставщику точки объекты (а также другие обязательные параметры), и этот метод определяет, используется правильный идентификатор, используемый для подключения поставщика точка. Аналогичным образом, при отключении, можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> метод без необходимости указания <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> значение свойства.  
  
> [!NOTE]
>  Можно определить идентификатор точки подключения поставщика, при указании <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления в качестве поставщика. Необходимо определить метод обратного вызова в поставщике, выполняющего экземпляр интерфейса, содержащего данные с потребителем. Для идентификации метода, отметить его атрибутом `ConnectionProvider` атрибута кода. При добавлении этого атрибута, можно добавить необязательное строковое значение параметра, которое используется в качестве идентификатора поставщика <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта. Если указать значение для необязательного параметра ID, это значение становится значением <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство для соединения. Если не указать значение идентификатора <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления назначает идентификатор по умолчанию при создании объекта.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативные и программные <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. Обратите внимание на то, что соединение объявлено в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление подключений содержит обязательные `ProviderConnectionPointID` атрибута. Второй метод для создания подключения отображается в `Button1_Click` метод, где код создает новое соединение, с помощью точки подключения (и идентификатора) определен в элементе управления поставщика. Затем в `Button2_Click` метод, код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание на то, что он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** выберите в раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключение элементов управления веб-частей** кнопку, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения подключения ConnectionPoint** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> значение свойства. Значение записывается в метке под элементами управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, выполняющего роль поставщика для этого подключения.</summary>
        <value>Строка, содержащая идентификатор элемента управления поставщика.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Значение свойства является обязательным, при создании подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Если значение не присваивается свойству, исключение возникает, когда <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления пытается активировать соединение.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативные и программные <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. Обратите внимание на то, что соединение объявлено в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление подключений содержит обязательные `ProviderID` атрибута. Второй метод для создания подключения отображается в `Button1_Click` метод, где код создает новое подключение с использованием точки подключения, определенной в элементе управления получателя. Затем в `Button2_Click` метод, код получает значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойства и отображает его в метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание на то, что он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. Чтобы сделать это, используйте **режим отображения** элемента управления с раскрывающимся списком для переключения в режим подключения на странице. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки и элементы управления будут отключены. Затем используйте **подключение элементов управления веб-частей** кнопку, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения потребителя** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> значение свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределяет унаследованный метод <see cref="M:System.Object.ToString" /> и возвращает краткое имя типа для объекта подключения.</summary>
        <returns>Строка, которая содержит краткое (неполное) имя типа для объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется преимущественно разработчиками элементов управления. Это улучшает отображение объектов подключения в представлении конструктора с помощью короткое имя типа, а не полное имя типа. Тем не менее метод может вызываться в любом месте кода которой вы хотите знать имя типа объекта соединения.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод, чтобы вернуть имя типа короткого <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть в примере кода приведен исходный код для интерфейса и элементы управления поставщика и получателя. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страницы. В верхней находится `Register` директива, которая ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое подключение объявляется внутри `<StaticConnections>` элемента на странице. `Button1_Click` Вызовы методов <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод для записи имени типа соединения в метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано. Введите любой текст в элементе управления поставщика и обратите внимание на то, что текст отображается в элементе управления получателя. Нажмите кнопку **сведения о подключении** кнопку, чтобы выполнить <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />, который используется для преобразования данных между двумя несовместимыми точками подключения в подключении веб-частей.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Соединение веб-частей существует два способа, в которых можно подключиться управления поставщика и получателя в соединении. Они могут подключаться напрямую, через соответствующие <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объекты и типом интерфейса, понятную для обоих элементов управления. Или, если они несовместимы, они могут подключаться напрямую, с помощью <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект, который преобразует экземпляр интерфейса от поставщика в тип, принимаемый объектом-получателем.  
  
 При необходимости как часть соединения, который преобразователь <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> свойство предоставляет ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта. Преобразователь для подключения декларативно в разметке веб-страницы, можно добавить, добавив тег для пользовательского преобразователя (или одного из преобразователей, предоставленных в наборе элементов управления веб-частей) в пределах `<asp:WebPartConnection>` элемент. Можно также добавить преобразователь программным способом, создание его экземпляра в коде и вызов <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления, чтобы создать подключение, передавая ему объект преобразователя, а также другие необходимые параметры.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> объектов, используемых внутренне набором элементов управления веб-частей.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />, содержащий объекты <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Свойство никогда не предназначен для использования разработчиками. Чтобы получить доступ к transformer, ассоциированные с соединением, разработчикам следует всегда использовать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> свойство.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Свойство используется внутренне элементом управления веб-частей, значение позволяют разработчикам объявлять преобразователь элементов внутри `<asp:webpartconnection>` элемент в разметке веб-страницы.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Веб-частей ASP.NET элементов управления</related>
      </Docs>
    </Member>
  </Members>
</Type>