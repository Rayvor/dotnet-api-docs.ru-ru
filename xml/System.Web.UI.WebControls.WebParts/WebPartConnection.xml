<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51155de7d23c7958800f502e0aaf995f864d8b09" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69394485" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет объект, который позволяет двум элементам управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> устанавливать подключение. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В наборе элементов управления веб-части соединение — это связь или связь между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> (или другими серверными или пользовательскими) элементами управления, позволяющими им обмениваться данными. Эта возможность совместного использования данных позволяет использовать подключенные элементы управления в целях, превышающих функциональные возможности, предоставляемые изолированными элементами управления. Например, если один элемент управления предоставляет данные почтового индекса, а другой элемент управления может считывать эти данные и предоставлять информацию о погоде на основе почтового индекса, то возможность подключения двух элементов управления предоставляет пользователям больше возможностей. Чтобы расширить этот пример, можно создать другие элементы управления, которые также отображают информацию на основе почтового индекса, например элемент управления со ссылками на местные новости, и все эти элементы управления, которые могут работать с данными почтовых индексов, могут обмениваться данными с одним элементом управления, предоставляющим почтовый индекс. Конечные пользователи веб-части приложений могут создавать подключения между всеми совместимыми элементами управления и управлять ими непосредственно из веб-браузера, используя стандартный пользовательский интерфейс подключений, предоставляемый <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элементом управления, или пользовательский интерфейс, предоставляемый Developer.  
  
 В <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> этом обзоре класса приведена общая инструкция основных сведений о создании соединения. Дополнительные сведения о конкретных компонентах и требованиях, связанных с созданием подключений, см. в разделе [веб-части Connections Overview](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))или просмотрите справочные классы и примеры кода, упомянутые в следующем обсуждении. Существует несколько фундаментальных аспектов веб-части подключения.  
  
-   Два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления. Каждое подключение веб-части состоит из двух элементов управления. Элемент управления может участвовать в нескольких соединениях одновременно, но каждое отдельное соединение состоит только из двух элементов управления. Элементы управления могут быть производными непосредственно от <xref:System.Web.UI.WebControls.WebParts.WebPart> базового класса или могут быть другими серверными элементами управления, включая элементы управления ASP.NET, пользовательские серверные элементы управления и пользовательские элементы управления. Элементы управления, которые не являются производными <xref:System.Web.UI.WebControls.WebParts.WebPart> от класса, если <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> они помещены <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> в зону, автоматически упаковываются вместе с объектом во время выполнения <xref:System.Web.UI.WebControls.WebParts.WebPart> , что позволяет им наследовать от класса и функционировать как время <xref:System.Web.UI.WebControls.WebParts.WebPart> выполнения. элементы управления.  
  
-   Элементы управления, находящиеся в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зонах. Как <xref:System.Web.UI.WebControls.WebParts.WebPart> элементы управления, так и другие типы серверных элементов управления должны <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> находиться в зоне, чтобы принимать участие в веб-части подключениях (и большинство других веб-частиных функций).  
  
-   Потребители и поставщики. В каждом подключении веб-части существует два элемента управления: поставщик данных и потребитель данных. Поставщик подает данные потребителю через указанный метод обратного вызова, который возвращает данные в форме интерфейса. (Пример создания и указания метода обратного вызова см. в подразделе «Пример» этого раздела.) Этот метод обратного вызова называется точкой подключения поставщика. Сведения об этой точке подключения (ее понятное имя, идентификатор и тип возвращаемого интерфейса) содержатся в <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекте, связанном с элементом управления поставщика. Потребитель получает данные с помощью указанного метода, который может принимать экземпляр интерфейса. Этот метод известен как точка подключения потребителя, а сведения о точке подключения (имя, идентификатор и тип интерфейса) содержатся в <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекте, связанном с элементом управления потребителя.  
  
-   Совместимые элементы управления или допустимый преобразователь. Чтобы соединение работало, потребитель и поставщик должны быть совместимыми (это означает, что их определенные методы точек соединения могут работать с одним и тем же типом интерфейса) или должен быть <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект, способный переносить тип, предоставляемый в тип, понятный потребителю.  
  
-   Объект <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Для существующего соединения должен существовать экземпляр <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> класса, который содержит ссылки на элементы управления поставщика и потребителя, а также сведения о точках соединения. Если поставщик и потребитель несовместимы и вместо этого используют <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект для подключения, соединение ссылается на преобразователь.  
  
-   Способ установления соединения. После того, как совместимые элементы управления потребителя и поставщика были правильно спроектированы с помощью методов точек подключения и помещены в зону, а <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект доступен, последний основной шаг необходим для инициации соединения. Это может быть вызвано тем, что пользователи могут создавать подключение через пользовательский интерфейс. Если поместить `<asp:connectionszone>` элемент на страницу и другие необходимые компоненты для соединения, во время выполнения пользователь может переключить страницу в режим экрана подключения, щелкнуть команду подключения в меню команд поставщика или потребителя. и появится пользовательский интерфейс подключения (на основе <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления). Через этот пользовательский интерфейс пользователь может инициировать подключение. Другой способ инициировать подключение — это сделать это программным способом. В любом случае, через пользовательский интерфейс или программным способом, базовый метод, инициирующий соединение, будет одинаковым. Приложение вызывает <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод ( <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> или метод при использовании преобразователя) для <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления, передавая ему поставщик, потребитель и соответствующие объекты <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> точек соединения, и метод возвращает объектами.  
  
 Класс определяет объект, инкапсулирующий базовые сведения о соединении между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементами управления. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Класс содержит почти все свойства, связанные с подробными сведениями о конкретном соединении. Некоторые свойства касаются элемента управления получателя в соединении. Свойство ссылается на сам элемент управления потребителя, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> а свойство ссылается на идентификатор потребителя. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> На объект, содержащий сведения о точке подключения потребителя, ссылается <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство потребителя. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Свойство ссылается на идентификатор <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Всем этим свойствам подключения, связанным с потребителем, должно быть назначено значение для создания соединения.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Класс также имеет несколько свойств, связанных с элементом управления поставщика в соединении, и они соответствуют свойствам потребителя. Свойство ссылается на сам элемент управления поставщика, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> а свойство ссылается на его идентификатор. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Свойство ссылается на <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> объект, а свойство ссылается на идентификатор точки соединения поставщика. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>  
  
 Некоторые свойства касаются состояния соединения. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Свойство указывает, является ли соединение активным (в настоящее время выполняется обмен данными) или неактивным (все еще подключенные, но не имеющие общего доступа к данным). Свойство указывает, является ли соединение общим (доступным для всех пользователей страницы) или пользовательским соединением, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> а свойство указывает, является ли элемент управления статическим (объявленным в разметке страницы и, таким является, постоянным) или <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Dynamic (создается программно, то есть может быть удалено).  
  
   
  
## Examples  
 В следующем примере кода показано, как создать простое соединение между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементами управления. В примере показано три способа формирования соединения: декларативно, путем размещения тегов для соединения в разметке веб-страницы. программно, путем создания соединения в коде; и через пользовательский интерфейс, поместив <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> на страницу элемент управления, который позволяет пользователям устанавливать соединение.  
  
 Пример кода состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Также <xref:System.Web.UI.WebControls.WebParts.WebPart> существует класс с именем `ZipCodeWebPart` , который реализует интерфейс и выступает в качестве элемента управления поставщика. Его `ProvideIZipCode` метод — это метод обратного вызова, реализующий член интерфейса. Метод просто возвращает экземпляр интерфейса. Обратите внимание, что метод помечен `ConnectionProvider` атрибутом в его метаданных. Это механизм идентификации метода в качестве метода обратного вызова для точки соединения поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс`WeatherWebPart`называется, и он выступает в качестве потребителя для соединения. Этот класс имеет метод с именем `GetZipCode` , который получает экземпляр `IZipCode` интерфейса из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` атрибутом в его метаданных.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Ближе к началу представлены `Register` директивы пользовательского элемента управления и пользовательских <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Поскольку в примере предполагается динамическая компиляция элементов управления, исходный код для элементов управления должен находиться в вложенной папке App_Code. `Register` тег на странице ссылается только на произвольный префикс тега и пространство имен элементов управления. Пользовательские <xref:System.Web.UI.WebControls.WebParts.WebPart> элементы управления (поставщик и потребитель) объявляются внутри `<asp:webpartzone>` элемента веб-страницы внутри `<zonetemplate>` элемента.  
  
 Страница предоставляет три способа формирования соединения между пользовательскими элементами управления. Первый метод является декларативным. В разметке для страницы `<StaticConnections>` объявляется элемент, а внутри этого `<asp:WebPartConnections>` элемента — различные сведения о потребителе и поставщике соединения, заданные в качестве атрибутов. Это один из способов создания соединения путем его объявления непосредственно на веб-странице, в частности `<asp:WebPartManager>` в элементе. Из-за этого статического соединения соединение между двумя пользовательскими элементами управления создается сразу же при первой загрузке страницы.  
  
 Второй способ формирования соединения между элементами управления обеспечивается `<asp:connectionszone>` элементом на странице. Если пользователь переключает страницу в режим отображения соединения во время выполнения и щелкает команду подключения в одном из пользовательских элементов управления, `<asp:connectionszone>` элемент автоматически отображает пользовательский интерфейс для создания соединения.  
  
 На странице также демонстрируется третий способ создания соединения, который предназначен для программного выполнения. В методе код <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> создает объект для элемента управления поставщика и получает его сведения о <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> точке подключения, вызывая метод. `Button1_Click` Он выполняет аналогичную задачу для элемента управления потребителя, вызывая <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> метод. Наконец, он создает новый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> вызывая метод для <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки веб-страницы в браузере первое соединение уже существует, так как оно объявлено в `<StaticConnections>` элементе. Введите текст в элементе управления **поставщика** почтовых индексов, который будет отображаться в элементе управления потребителя. Затем отключите два элемента управления. С помощью раскрывающегося списка **режим экрана** измените страницу на режим экрана подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) для каждого элемента <xref:System.Web.UI.WebControls.WebParts.WebPart> управления и обратите внимание, что каждый из них имеет параметр **Connect** . Это команда подключения, которая отображается в меню команд только в том случае, если страница находится в режиме соединения. Щелкните команду подключения на одном из элементов управления, и появится пользовательский интерфейс подключения, предоставленный <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элементом управления. Нажмите кнопку **Disconnect (отключить** ), чтобы завершить статическое подключение между элементами управления. Используйте элемент управления " **режим отображения** ", чтобы вернуть страницу в режим просмотра. Попробуйте еще раз ввести новый текст в поставщик, и обратите внимание, что поскольку элементы управления отключены, текст не обновляется в элементе управления получателя.  
  
 Затем используйте тот же метод, что и выше, чтобы снова переключить страницу в режим экрана подключения. Щелкните команду подключения на одном из элементов управления. Щелкните ссылку **создать соединение** и используйте пользовательский интерфейс, предоставленный <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элементом управления, чтобы создать подключение между элементами управления. Это второй способ создания соединения. Обратите внимание, что как только соединение сформировано, последняя строка, введенная в элементе управления поставщика (которая не отображалась из-за отключения элементов управления), внезапно появляется в потребителе, так как соединение было создано повторно. Нажмите кнопку **Отключить** , чтобы завершить текущее подключение, которое вы только что создали. Возврат страницы в режим просмотра. Введите новый текст в поставщике, чтобы показать, что текст не обновлен и элементы управления снова отключены.  
  
 Возврат страницы в режим отображения подключения. Вместо того чтобы щелкнуть команду подключения, нажмите кнопку **Connect WebPart Controls (соединить элементы управления** ), которая иллюстрирует третий способ формирования соединения. Этот подход позволяет программно соединить элементы управления за один простой шаг без использования <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления. Обратите внимание, что при создании соединения последняя строка, введенная в поставщике, внезапно появляется в элементе управления потребителя.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Общие сведения о веб-части подключениях</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Конструктор является открытым, поэтому средство синтаксического анализа ASP.NET может создать экземпляр при объявлении соединения в разметке веб-страницы. Этот конструктор не предназначен для использования в коде разработчика.  
  
 Если необходимо создать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект программно, следует <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> использовать метод или <xref:System.Web.UI.WebControls.WebParts.WebPartManager> , <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> предоставленный в элементе управления. Эти методы обработают множество деталей создания соединения и возвращают <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Конструктор <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> для класса задает для свойств`true`и значение. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Поэтому по умолчанию новое соединение должно быть статическим (то есть оно объявлено в разметке содержащей веб-страницы) и общим (видимым для всех пользователей страницы). Это происходит в случае добавления соединения в типичном сценарии путем объявления соединения в разметке страницы с помощью `<asp:webpartconnection>` элемента. Однако в других случаях соединение будет иметь разные значения для этих свойств. Например, при программном добавлении соединения путем создания объекта соединения в коде, если пользователь просматривает страницу в области персонализации пользователя по умолчанию, соединение создается как динамический пользователь (видимый только для конкретного пользователя). соединен.  
  
> [!NOTE]
>  Свойства <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager> и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> доступны только для чтения, и эти свойства, определяющие природу соединения, задаются внутренне элементом управления в зависимости от способа создания соединения (декларативно в разметке страницы) или программно с помощью кода или пользовательского интерфейса).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует в подключении как элементу правления получателя.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который представляет элемент управления веб-частей, функционирующий в подключении как получатель.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждое подключение веб-части состоит из двух элементов управления, которые совместно используют данные. Один элемент управления выступает в качестве поставщика данных, а другой элемент управления выступает в качестве потребителя, получая и обрабатывая данные от поставщика. Свойство получает ссылку <xref:System.Web.UI.WebControls.WebParts.WebPart> на элемент управления, действующий как потребитель в связи соединения. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойства.  
  
 Пример кода состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат потребителем и поставщиком для соединения, а также интерфейс, используемый для точек подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — это код веб-страницы, на которой размещены элементы управления, и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойства. В верхней части страницы находятся `Register` директивы для пользовательского элемента управления и пользовательских элементов управления. Поскольку в `Register` этом примере используется динамическая компиляция, директиве для исходного файла не требуется ссылаться на имя сборки; она включает только произвольный префикс тега и пространство имен элементов управления. В методе код обращается к объекту Connection <xref:System.Web.UI.WebControls.WebParts.WebPartManager> через элемент управления и получает ссылку на элемент управления потребителя. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере используйте раскрывающийся список **режим экрана** , чтобы переключить страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Для создания соединения между двумя элементами управления используйте кнопку **Connect WebPart Controls (подключение элементов управления** ) или предоставленный пользовательский интерфейс подключения. Нажмите кнопку **Показать сведения о потребителе** , чтобы запустить код, демонстрирующий <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Длина свойства <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> равна нулю.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который служит в качестве точки подключения для элементов управления, функционирующих в подключении в качестве получателя.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />, связанный с элементом управления получателя в подключении.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Одним из действий, необходимых для создания соединения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементами управления, является создание точек соединения для каждого элемента управления. Точка подключения потребителя — это объект, который содержит сведения о подключении к элементу управления, действующему в качестве потребителя. В исходном коде потребителя один из методов должен быть идентифицирован с помощью `ConnectionConsumer` атрибута. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Объект, связанный с элементом управления получателя, содержит подробные сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе и тип интерфейса, который может быть извлечен методом. Этот набор сведений о потребителе, его метод для формирования соединений и тип интерфейса, который он понимает, совокупно формирует точку подключения потребителя.  
  
 По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект может подключаться только к <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> одному объекту за раз. Потребитель может иметь несколько методов, идентифицированных как возможные точки подключения потребителя, но потребитель может участвовать только в одном соединении в качестве потребителя (таким образом, только одна из точек подключения потребителя может быть активна) за раз. Напротив, <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> компонент может подключаться к любому <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> числу объектов. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> свойства <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат потребителем и поставщиком для соединения, а также интерфейс, используемый для точек подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — это код веб-страницы, на которой размещены элементы управления, и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойства. В методе создаются все объекты, необходимые для формирования соединения, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> включая объект. `Button1_Click` Все эти объекты передаются <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> в метод для создания соединения. В методе код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойству и отображает некоторые сведения о точке подключения. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере используйте раскрывающийся список **режим экрана** , чтобы переключить страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Для создания соединения между двумя элементами управления используйте кнопку **Connect WebPart Controls (подключение элементов управления** ) или ПРЕДОСТАВЛЕННЫЙ пользовательский интерфейс подключения. Нажмите кнопку **сведения о ConnectionPoint** , чтобы запустить код, демонстрирующий <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, служащего в качестве точки подключения получателя для этого подключения.</summary>
        <value>Строка, которая содержит идентификатор для точки подключения получателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для статического соединения, объявленного в разметке веб-страницы, разработчики могут указать, какая точка подключения получателя будет использоваться для соединения, назначив значение `ConsumerConnectionPointID` атрибуту `<asp:webpartconnection>` элемента. Если атрибуту не присвоено значение, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
 При создании динамических (программных) соединений обычно не следует задавать значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойства. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> для элемента управления, передав ему объекты точек подключения потребителя и потребителя (вместе с другими обязательными параметрами), и этот метод определяет правильный идентификатор, используемый для подключения потребителя. точки. Аналогично при отключении можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> метод без <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> указания значения свойства.  
  
> [!NOTE]
>  Идентификатор точки подключения потребителя можно определить при назначении <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления в качестве потребителя. Необходимо указать метод в потребителе, который извлекает экземпляр интерфейса, предоставляемого либо элементом управления поставщика, либо преобразователем. Чтобы опознать метод, пометьте его `ConnectionConsumer` атрибутом Code. При добавлении этого атрибута можно добавить необязательный параметр строкового значения, который служит идентификатором <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта потребителя. Если указать значение для необязательного параметра ID, это значение станет значением <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойства для соединения. Если значение идентификатора не указано, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
   
  
## Examples  
 В следующем примере кода показано декларативное и программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявляется в разметке страницы `<StaticConnections>` с `<asp:WebPartsConnection>` помощью элементов и. Объявление соединения включает обязательный `ConsumerConnectionPointID` атрибут. Второй метод создания соединения отображается в `Button1_Click` методе, где код создает новое соединение, используя точку соединения, определенную в элементе управления потребителя. Затем в `Button2_Click` методе код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойству.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере соединение уже существует из-за статического соединения, объявленного на странице. Введите некоторый текст в элемент управления поставщика и обратите внимание, что он отображается в потребителе из-за соединения. Затем отключите элементы управления. С помощью раскрывающегося списка **режим экрана** переключите страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Нажмите кнопку **Disconnect (отключить** ). Используйте кнопку **подключить элементы управления WebPart** , чтобы повторно создать соединение между двумя элементами управления. Нажмите кнопку **сведения о ConnectionPoint** , чтобы запустить код, обращающийся к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> значению свойства. Значение записывается в метку под элементами управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, функционирующего в качестве получателя для этого подключения.</summary>
        <value>Строка, которая содержит идентификатор элемента управления, который функционирует в подключении в качестве получателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение свойства является обязательным при создании соединения между <xref:System.Web.UI.WebControls.WebParts.WebPart> элементами управления. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Если значение не присвоено свойству, то при <xref:System.Web.UI.WebControls.WebParts.WebPartManager> попытке элемента управления активировать соединение возникает исключение.  
  
   
  
## Examples  
 В следующем примере кода показано декларативное и программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявляется в разметке страницы `<StaticConnections>` с `<asp:WebPartsConnection>` помощью элементов и. Объявление соединения включает обязательный `ConsumerID` атрибут. Второй метод создания соединения отображается в `Button1_Click` методе, где код создает новое соединение, используя точку соединения, определенную в элементе управления потребителя. Затем в `Button2_Click` методе код обращается к значению <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойства и отображает его в метке.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере соединение уже существует из-за статического соединения, объявленного на странице. Введите некоторый текст в элемент управления поставщика и обратите внимание, что он отображается в потребителе из-за соединения. Затем отключите элементы управления. С помощью раскрывающегося списка **режим экрана** переключите страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Нажмите кнопку **Disconnect (отключить** ). Используйте кнопку **подключить элементы управления WebPart** , чтобы повторно создать соединение между двумя элементами управления. Нажмите кнопку **сведения о потребителе** , чтобы запустить код, обращающийся <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> к значению свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает идентификатор объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Строка, содержащая идентификатор объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект имеет уникальное значение, присвоенное его <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойству. Это позволяет убедиться в том, что существует способ различать несколько подключений.  
  
 Если вы создаете статическое соединение, объявляя `<asp:webpartconnection>` элемент на веб-странице, и не назначаете значение `ID` атрибуту для соединения, при попытке <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления установить соединение возникнет исключение.  
  
 Когда элемент управления создает новое динамическое соединение, он <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> вызывает метод, чтобы создать уникальный идентификатор для соединения. <xref:System.Web.UI.WebControls.WebParts.WebPartManager>  
  
   
  
## Examples  
 В следующем примере кода показано декларативное и программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявляется в разметке страницы `<StaticConnections>` с `<asp:WebPartsConnection>` помощью элементов и. Объявление соединения включает обязательный `ID` атрибут. Второй метод создания соединения отображается в `Button1_Click` методе, где код создает новое соединение, используя точку соединения, определенную в элементе управления потребителя. Здесь свойство ID не является обязательным, так как соединение является динамическим и <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемент управления назначает идентификатор для соединения. В методе код обращается к значению <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойства и отображает его в метке. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере соединение уже существует из-за статического соединения, объявленного на странице. Введите некоторый текст в элемент управления поставщика и обратите внимание, что он отображается в потребителе из-за соединения. Затем отключите элементы управления. С помощью раскрывающегося списка **режим экрана** переключите страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Нажмите кнопку **Disconnect (отключить** ). Используйте кнопку **подключить элементы управления WebPart** , чтобы повторно создать соединение между двумя элементами управления. Нажмите кнопку **сведения о подключении** , чтобы выполнить код, обращающийся к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> значению свойства.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, существует ли в настоящее время объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> и способен ли передавать данные между элементами управления поставщика и получателя.</summary>
        <value>Значение <see langword="true" />, если подключение является активным; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство указывает состояние <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объекта. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Когда соединение находится в этом состоянии, элементы управления поставщика и потребителя в соединении взаимодействуют и могут обмениваться данными через общий интерфейс или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект.  
  
 Когда пользователь просматривает подготовленную к просмотру страницу, которая включает установленное соединение в обычном режиме просмотра, подключение обычно активно (если не удалось активировать из-за возникновения конфликта или другой проблемы при загрузке страницы). На ранних стадиях жизненного цикла страницы и управления значение свойства равно `false`. Соединение активируется сразу после <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> возникновения события <xref:System.Web.UI.WebControls.WebParts.WebPartManager> в элементе управления. В частности, соединение активируется после того, как потребитель извлекает экземпляр указанного интерфейса из поставщика или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта.  
  
 Полезно определить, является ли соединение активным в ситуациях, когда могут возникнуть конфликты или проблемы синхронизации из-за нескольких соединений на странице. Например, если существует какой-либо конфликт между двумя соединениями, <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемент управления может не активировать одно из соединений, чтобы избежать конфликта.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> свойства.  
  
 Пример состоит из трех частей:  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страница. Ближе к началу `Register` относится директива, которая ссылается на исходный код для двух динамически компилируемых <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое соединение объявляется в `<StaticConnections>` элементе на странице. `<script>` Внутри элемента находятся четыре обработчика событий. Каждый обработчик событий проверяет значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> свойства статического соединения и записывает сообщение <xref:System.Web.UI.WebControls.Label> в элемент управления, указывающее, является ли соединение активным или неактивным в этом состоянии жизненного цикла страницы и управления. Это показывает, что соединение становится активным и остается активным после подготовки страницы к просмотру.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое соединение уже создано, а сообщения уже записаны в метки, показывающие, активно ли соединение в различных точках страницы и управления жизненным циклом. Нажмите кнопку **сведения о соединении** и обратите внимание на то, что соединение на этом этапе неактивно, но подключение повторно активируется каждый раз после <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> события и остается активным (и останется <xref:System.Web.UI.Control.PreRender> таким) после события страница.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> видимым для всех пользователей или же только для текущего пользователя.</summary>
        <value>Значение <see langword="true" />, если подключение используется совместно, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как и в <xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> случае с отдельными элементами управления, объект может быть общим или индивидуально пользовательским экземпляром. Общий экземпляр означает, что соединение является видимым для всех пользователей веб-страницы, а экземпляр на уровне пользователя означает, что соединение отображается только для конкретного пользователя.  
  
 Как правило, способ добавления соединения на страницу определяет, является ли соединение общим. Если соединение объявлено в разметке веб-страницы, соединение является общим, а <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство имеет `true`значение. Кроме того, если при добавлении подключения веб-страница находится в общей области персонализации, соединение также становится общим. Как правило, когда пользователь использует `<asp:connectionszone>` пользовательский интерфейс для добавления соединения, эта страница находится в области персонализации пользователя, поэтому соединение не является общим, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> а свойство имеет `false`значение.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойства.  
  
 Пример кода состоит из пяти частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Запись в файле Web. config, необходимую для выполнения примера.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. В методе он проверяет свойство существующего соединения и отображает результат на странице. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Четвертая часть примера кода — это запись в файле Web. config, которая требуется для учетной записи пользователя, которая будет выполнять пример, чтобы иметь возможность изменять страницу в общей области персонализации. Чтобы включить эту функцию, необходимо иметь запись в файле `<system.web>` Web. config в разделе, который выглядит, как в следующем примере.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 После загрузки страницы в браузере используйте раскрывающийся список **режим экрана** , чтобы переключить страницу в режим экрана подключения. Нажмите кнопку **Connect WebPart Controls (соединить элементы управления** ), чтобы сформировать соединение. Затем нажмите кнопку **сведения о подключении** , чтобы показать, является ли соединение общим. Если вы создали соединение со страницей в области персонализации пользователя по умолчанию, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> значение свойства должно быть `false` для соединения.  
  
 В меню команд одного из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления (обозначено стрелкой вниз в заголовке окна) щелкните команду Подключить. Когда появится пользовательский интерфейс подключения, нажмите кнопку **Отключить** , чтобы завершить соединение. Используйте элемент управления " **режим отображения** ", чтобы вернуть страницу в режим просмотра.  
  
 В элементе управления **режимом просмотра** выберите параметр **Общий** , чтобы переключить страницу в область общей персонализации. Выполните те же действия, что и для создания подключения, и снова нажмите кнопку **сведения о подключении** , чтобы показать, является ли соединение общим. В этом случае значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойства должно быть `true`равно.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, объявлен ли объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> в разметке веб-страницы или же создан программным способом.</summary>
        <value>Значение <see langword="true" />, если подключение является статическим, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Соединения между элементами управления веб-части могут быть либо статическими, либо динамическими. Статическое соединение объявляется в разметке веб-страницы с помощью `<asp:WebPartConnection>` элемента. Динамические соединения создаются программно или при создании соединения пользователем через пользовательский интерфейс, определенный <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элементом управления.  
  
 Статические соединения являются общими объектами, то есть они доступны всем пользователям веб-страницы. Кроме того, они являются постоянными, поскольку, как <xref:System.Web.UI.WebControls.WebParts.WebPart> и статический элемент управления, они не могут быть удалены без возможности восстановления.  
  
> [!NOTE]
>  Хотя объект статического соединения нельзя удалить окончательно, он может быть безвозвратно отключен. В этом случае Отсоединенный объект будет существовать на сервере, но конечный пользователь никогда не будет знать о существовании объекта на странице.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства.  
  
 Пример кода состоит из трех частей:  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страница. Ближе к началу `Register` относится директива, которая ссылается на исходный код для двух динамически компилируемых <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое соединение объявляется в `<StaticConnections>` элементе на странице. Метод обращается к свойству, чтобы проверить, является ли соединение статическим. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> `Button1_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое соединение уже создано. Введите некоторый текст в элемент управления поставщика и обратите внимание, что текст отображается в элементе управления потребителя. Нажмите кнопку **сведения о подключении** , чтобы отобразить значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает элемент управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует как поставщик в подключении веб-частей.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует как поставщик данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждое подключение веб-части состоит из двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления — потребителя и поставщика, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> а свойство возвращает ссылку на элемент управления поставщика в соединении.  
  
 Как и его аналог в соединении (элемент управления "потребитель"), для установления соединения требуется элемент управления поставщика. Независимо от того, создается ли соединение программно или путем объявления его в формате сохраняемости страницы, необходимо указать элемент управления, который будет использоваться в качестве поставщика для соединения.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойства.  
  
 Пример кода состоит из трех частей:  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страница. Ближе к началу `Register` относится директива, которая ссылается на исходный код для двух динамически компилируемых <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое соединение объявляется в `<StaticConnections>` элементе на странице. Обратите внимание, `<asp:webpartconnection>` что в элементе `ProviderID` атрибут имеет идентификатор, присвоенный ему элементу управления поставщика. Это необходимо для того, чтобы указать поставщика для статического соединения. Метод обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойству и записывает часть его сведений в метку. `Button1_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое соединение уже создано. Введите некоторый текст в элемент управления поставщика и обратите внимание, что текст отображается в элементе управления потребителя. Нажмите кнопку **сведения о поставщике** , чтобы отобразить некоторые значения свойств, доступ к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> которым осуществляется через свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Длина значения свойства <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> равна нулю.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который служит как точка подключения для элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, выполняющего функцию поставщика в подключении.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />, связанный с элементом управления поставщика в подключении.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Одним из действий, необходимых для создания соединения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементами управления, является создание точек соединения для каждого элемента управления. Точка соединения поставщика — это объект, который содержит сведения о подключении к элементу управления, действующему в качестве поставщика. В исходном коде поставщика один из методов должен быть идентифицирован с помощью `ConnectionProvider` атрибута. Объект <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , связанный с элементом управления поставщика, содержит подробные сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе и тип экземпляра интерфейса, который метод может вернуть потребителю. элемента. Этот набор сведений о поставщике, его метод для формирования соединений и тип предоставляемого им интерфейса формируют точку подключения поставщика.  
  
 По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> компонент может подключаться только <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> к одному объекту за раз. Потребитель может иметь несколько методов, идентифицированных как возможные точки подключения потребителя, но потребитель может участвовать только в одном соединении в качестве потребителя (таким образом, только одна из точек подключения потребителя может быть активна) за раз. В отличие от этого <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , компонент может подключаться <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> к любому количеству объектов по умолчанию. Например, элемент управления поставщика, предоставляющий почтовый индекс, может быть подключен к нескольким элементам управления потребителя, которые используют почтовый индекс для создания различных видов данных на основе почтового индекса, например данных о погоде, новостей и т. д. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> свойства <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат потребителем и поставщиком для соединения, а также интерфейс, используемый для точек подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — это код веб-страницы, на которой размещены элементы управления, и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойства. В методе создаются все объекты, необходимые для формирования соединения, <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> включая объект. `Button1_Click` Обратите внимание на вызов <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager> в элементе управления. Различные созданные объекты передаются <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> в метод для создания соединения. В методе код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойству и отображает некоторые сведения о точке подключения. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере используйте раскрывающийся список **режим экрана** , чтобы переключить страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Для создания соединения между двумя элементами управления используйте кнопку **Connect WebPart Controls (подключение элементов управления** ) или ПРЕДОСТАВЛЕННЫЙ пользовательский интерфейс подключения. Нажмите кнопку **сведения о ConnectionPoint** , чтобы запустить код, демонстрирующий <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, выполняющего роль точки подключения поставщика для этого подключения.</summary>
        <value>Строка, содержащая идентификатор для объекта точки подключения поставщика.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для статического соединения, объявленного в разметке веб-страницы, разработчики могут указать, какая точка подключения поставщика будет использоваться для соединения, назначив значение `ProviderConnectionPointID` атрибуту `<asp:webpartconnection>` элемента. Если атрибуту не присвоено значение, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
 При создании динамических (программных) соединений обычно не следует задавать значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойства. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> для элемента управления, передав ему объекты точки подключения поставщика и поставщика (вместе с другими необходимыми параметрами), и этот метод определяет правильный идентификатор, используемый для соединения поставщика. точки. Аналогично при отключении можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> метод без <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> указания значения свойства.  
  
> [!NOTE]
>  Идентификатор точки подключения поставщика можно определить при назначении <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления в качестве поставщика. Необходимо задать метод обратного вызова в поставщике, который обслуживает экземпляр интерфейса, содержащего данные, для потребителя. Чтобы опознать метод, пометьте его `ConnectionProvider` атрибутом Code. При добавлении этого атрибута можно добавить необязательный параметр строкового значения, который служит идентификатором <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта поставщика. Если указать значение для необязательного параметра ID, это значение станет значением <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойства для соединения. Если значение идентификатора не указано, <xref:System.Web.UI.WebControls.WebParts.WebPartManager> при создании объекта элемент управления назначает идентификатор по умолчанию.  
  
   
  
## Examples  
 В следующем примере кода показано декларативное и программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявляется в разметке страницы `<StaticConnections>` с `<asp:WebPartsConnection>` помощью элементов и. Объявление соединения включает обязательный `ProviderConnectionPointID` атрибут. Второй метод создания соединения отображается в `Button1_Click` методе, где код создает новое соединение, используя точку соединения (и идентификатор), определенную в элементе управления поставщика. Затем в `Button2_Click` методе код обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойству.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере соединение уже существует из-за статического соединения, объявленного на странице. Введите некоторый текст в элемент управления поставщика и обратите внимание, что он отображается в потребителе из-за соединения. Затем отключите элементы управления. С помощью раскрывающегося списка **режим экрана** переключите страницу в режим подключения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Нажмите кнопку **Disconnect (отключить** ). Используйте кнопку **подключить элементы управления WebPart** , чтобы повторно создать соединение между двумя элементами управления. Нажмите кнопку **сведения о ConnectionPoint** , чтобы запустить код, обращающийся к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> значению свойства. Значение записывается в метку под элементами управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, выполняющего роль поставщика для этого подключения.</summary>
        <value>Строка, содержащая идентификатор элемента управления поставщика.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение свойства является обязательным при создании соединения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементами управления. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Если значение не присвоено свойству, то при <xref:System.Web.UI.WebControls.WebParts.WebPartManager> попытке элемента управления активировать соединение возникает исключение.  
  
   
  
## Examples  
 В следующем примере кода показано декларативное и программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойства.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявляется в разметке страницы `<StaticConnections>` с `<asp:WebPartsConnection>` помощью элементов и. Объявление соединения включает обязательный `ProviderID` атрибут. Второй метод создания соединения отображается в `Button1_Click` методе, где код создает новое соединение, используя точку соединения, определенную в элементе управления потребителя. Затем в `Button2_Click` методе код обращается к значению <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойства и отображает его в метке.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере соединение уже существует из-за статического соединения, объявленного на странице. Введите некоторый текст в элемент управления поставщика и обратите внимание, что он отображается в потребителе из-за соединения. Затем отключите элементы управления. Для этого используйте раскрывающийся список **режим экрана** , чтобы переключить страницу в режим соединения. Щелкните меню глаголы (представленное стрелкой вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и выберите команду Подключить. Нажмите кнопку **Отключить** , и элементы управления отключаются. Затем с помощью кнопки **соединить элементы управления WebPart** создайте соединение между двумя элементами управления. Нажмите кнопку **сведения о потребителе** , чтобы запустить код, обращающийся <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> к значению свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределяет унаследованный метод <see cref="M:System.Object.ToString" /> и возвращает краткое имя типа для объекта подключения.</summary>
        <returns>Строка, которая содержит краткое (неполное) имя типа для объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется преимущественно для удобства конструкторами элементов управления. Он улучшает отображение объектов соединения в представление конструирования с использованием более короткого имени типа, а не полного имени типа. Однако метод может быть вызван в любой точке кода, где необходимо получить имя типа объекта соединения.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод, чтобы получить имя <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> короткого типа объекта.  
  
 Пример кода состоит из трех частей:  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть примера кода — это исходный код для интерфейса, а также элементы управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — веб-страница. Ближе к началу `Register` относится директива, которая ссылается на исходный код для двух динамически компилируемых <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статическое соединение объявляется в `<StaticConnections>` элементе на странице. `Button1_Click` Метод<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> вызывает метод для записи имени типа соединения в метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое соединение уже создано. Введите некоторый текст в элемент управления поставщика и обратите внимание, что текст отображается в элементе управления потребителя. Нажмите кнопку **сведения о подключении** , чтобы выполнить <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />, который используется для преобразования данных между двумя несовместимыми точками подключения в подключении веб-частей.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В подключении веб-части существует два способа подключения элементов управления поставщика и потребителя. Они могут напрямую подключаться через соответствующие <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объекты и тип интерфейса, понятный обоим элементам управления. Или, если они несовместимы, они могут подключаться косвенно, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> используя объект, который преобразует экземпляр интерфейса из поставщика в тип, понятный потребителю.  
  
 Если в качестве части соединения требуется преобразователь, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> свойство предоставляет ссылку <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> на объект. Можно добавить преобразователь для соединения декларативно в разметке веб-страницы, добавив тег для пользовательского преобразователя (или одного из преобразователей, поставляемых с набором элементов управления веб-части) в `<asp:WebPartConnection>` элементе. Можно также добавить преобразователь программно, создать его экземпляр в коде и вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> для элемента управления, чтобы создать соединение, передав ему объект transformer вместе с другими необходимыми параметрами.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> объектов, используемых внутренне набором элементов управления веб-частей.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />, содержащий объекты <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Свойство никогда не предназначено для использования разработчиками. Для доступа к преобразователь, связанному с соединением, разработчики всегда <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> должны использовать свойство.  
  
 Свойство внутренне используется набором элементов управления веб-части, чтобы позволить разработчикам страниц объявлять элементы трансформатора `<asp:webpartconnection>` внутри элемента в разметке веб-страницы. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
