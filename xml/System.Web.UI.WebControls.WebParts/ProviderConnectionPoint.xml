<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64b02411247bc4383c9d0ba96309240f908373f9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70637536" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет объект точки подключения, позволяющий серверному элементу управления действовать в качестве поставщика, чтобы сформировать подключение к потребителю.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый элемент управления в каждом веб-части соединении между двумя серверными элементами управления должен иметь (среди прочих требований) связанный объект точки соединения, который позволяет ему подключаться к другому элементу управления и предоставлять или использовать данные в зависимости от того, является ли элемент управления назначается поставщиком или потребителем для соединения. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Объект в целом содержит сведения о том, как элемент управления может подключаться к другому элементу управления и типу данных, к которым он может предоставлять общий доступ. Для элемента управления, действующего в качестве поставщика в соединении, его точка соединения должна <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> быть объектом. Дополнительные сведения о веб-части подключениях и точках подключения см. в подразделах, перечисленных в разделе см. также ниже.  
  
 Чтобы создать <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект, необходимо выполнить несколько действий.  
  
1.  Создайте интерфейс. Когда поставщик использует данные совместно с потребителем, он делает это, получая экземпляр интерфейса и возвращая этот экземпляр потребителю.  
  
2.  Реализуйте интерфейс в поставщике. Можно использовать <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> или другой серверный элемент управления (любой тип серверного элемента управления в зоне), который будет поставщиком должен реализовывать интерфейс, созданный на первом шаге. <xref:System.Web.UI.WebControls.WebParts.WebPart>  
  
3.  Определяет метод обратного вызова. Для установления соединения метод в поставщике должен быть идентифицирован как метод обратного вызова. Этот метод возвращает экземпляр реализованного интерфейса для потребителя. Веб-части подход для идентификации метода обратного вызова в поставщике заключается в добавлении `ConnectionProvider` атрибута метаданных (определенного <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> классом) в метод, возвращающий экземпляр интерфейса. При добавлении атрибута единственным обязательным параметром является отображаемое имя, используемое для точки подключения поставщика. Кроме того, можно добавить необязательные параметры, например идентификатор точки подключения.  
  
 После того, как элемент управления будет функционировать в качестве поставщика, элемент управления может участвовать в соединениях (предполагая, что элемент управления "потребитель" аналогичен и доступен). Чтобы создать статическое, декларативное соединение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если атрибут в исходном коде поставщика, определяющий метод обратного вызова, задает идентификатор для точки подключения, то это значение должно быть присвоено `ProviderConnectionPointID` атрибуту в `<asp:webpartconnection>` элементе на странице. `ConnectionProvider` Одной из причин, по которой разработчик может указать идентификатор для точки подключения поставщика, является наличие нескольких точек подключения в элементе управления поставщика. Если идентификатор не указан для точки подключения поставщика в элементе управления поставщика, значение не обязательно должно быть назначено `ProviderConnectionPointID` атрибуту на странице, так как соединение будет создано с использованием значения по умолчанию, полученного из <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> полями.  
  
 Чтобы создать соединение в коде, разработчики должны создать новый <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> вызвав метод и передав ему идентификатор элемента управления поставщика, а также идентификатор или индекс определенного <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта в элементе управления поставщика. Возвращаемый <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект, а также ссылка на элемент управления поставщика, ссылка на элемент управления потребителя и соответствующий <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект передаются <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> в метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 Несмотря на то, что разработчики могут использовать точки подключения поставщика как часть установления соединений декларативно или программно, пользователи также могут взаимодействовать с точками подключения поставщика для установления соединений через пользовательский интерфейс. Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемент управления на веб-странице, он предоставляет пользователям пользовательский интерфейс времени выполнения для создания подключений. Если пользователь выбирает элемент управления "потребитель" в качестве начальной точки для установления соединения, щелкнув его команду подключения (он мог бы также выбрать поставщик; в этом случае нет разницы в результирующем соединении), в пользовательском интерфейсе он увидит раскрывающийся список с элементом управления отображаемое имя доступной точки подключения поставщика (или указывает, если имеется несколько). Чтобы создать подключение, пользователи должны выбрать точку подключения поставщика.  
  
 Объект напрямую связывается с конкретным элементом управления поставщика и сохраняет сведения о соединении в свойствах, которые он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Например, в унаследованном <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойстве точка подключения поставщика сохраняет тип интерфейса, возвращаемого поставщиком. Если поставщик и потребитель в соединении работают с одним и тем же типом интерфейса, элементы управления совместимы и могут создавать прямое соединение. Если поставщик и потребитель не могут работать с одним и тем же типом интерфейса, они несовместимы и должны использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект для преобразования <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> значения точки подключения поставщика в тип, с которым может работать потребитель. Еще одним важным наследуемым <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> свойством является свойство, которое предоставляет понятное имя, отображаемое в пользовательском интерфейсе, чтобы пользователи могли выбрать точку подключения поставщика при создании подключений. Отображаемое имя является обязательным параметром, когда разработчики добавляют `ConnectionProvider` атрибут в метод обратного вызова в элементе управления поставщика. Унаследованное <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> свойство также полезно, как указано выше, так как оно предоставляет уникальный идентификатор для точки подключения поставщика в случае, когда у поставщика есть несколько точек подключения. В поставщике может быть <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> определено несколько объектов, и в данном случае, когда разработчики `ConnectionProvider` добавляют атрибут к методу, они должны указать значение идентификатора, чтобы отличать каждую точку соединения. Еще одним важным наследуемым свойством является <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> свойство, которое указывает, может ли точка подключения поставщика одновременно подключаться к нескольким потребителям. Значение этого свойства по `true` умолчанию используется для точек соединения поставщика (в `false` то время как по умолчанию используется для точек подключения потребителя).  
  
 Класс добавляет несколько уникальных методов к членам, которые он наследует <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> от класса. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Метод получает экземпляр интерфейса, который метод обратного вызова будет возвращать потребителям. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Метод получает дополнительные пользовательские интерфейсы, которые являются частью существующего соединения, но не являются интерфейсами, используемыми для установления соединения.  
  
   
  
## Examples  
 В следующем примере кода показаны простые способы создания соединения декларативно, программно или через пользовательский интерфейс в каждом случае использования точки подключения поставщика.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в разделе [Пошаговое руководство. изменение режимов экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Также <xref:System.Web.UI.WebControls.WebParts.WebPart> существует класс с именем `ZipCodeWebPart` , который реализует интерфейс и выступает в качестве элемента управления поставщика. Его `ProvideIZipCode` метод — это метод обратного вызова, реализующий член интерфейса. Метод просто возвращает экземпляр интерфейса. Обратите внимание, что метод помечен `ConnectionProvider` атрибутом в его метаданных. Это механизм идентификации метода в качестве метода обратного вызова для точки соединения поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс `WeatherWebPart` называется, и он выступает в качестве потребителя для соединения. Этот класс имеет метод с именем `GetZipCode` , который получает экземпляр `IZipCode` интерфейса из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` атрибутом в его метаданных. Это механизм идентификации метода точки подключения в элементе управления потребителя.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором показано, как выполнить компиляцию, см. в разделе [Пошаговое руководство. Разработка и использование пользовательского веб-элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. В верхней части приведены `Register` директивы для регистрации пользовательских элементов управления, образующих соединение, и пользовательского элемента управления, который позволяет пользователям изменять режимы экрана на странице. Само соединение создается декларативно в `<staticconnections>` элементе на странице. Это демонстрирует один из способов создания соединения — Обратите внимание на `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` в элементе. Можно также создать подключение программным способом. код для этого используется в `Button1_Click` методе. В этом случае <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> создается объект, который затем передается в метод, который создает фактическое соединение. Независимо от того, создается ли соединение декларативно или программно, точки соединения всегда должны быть указаны как для поставщика, так и для потребителя. Метод обращается к <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объектам как для поставщика, так и для потребителя и записывает некоторые значения их свойств в метку на странице. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 После загрузки страницы в браузере нажмите кнопку **сведения о точке соединения** . Отобразятся сведения о точках подключения поставщика и потребителя, установленных в декларативном соединении. Затем с помощью раскрывающегося списка **режим экрана** переключите страницу в режим подключения. В меню команды<xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления **почтовый индекс почтового индекса** (представленного стрелкой вниз в заголовке окна) щелкните команду подключения. Открывается пользовательский интерфейс подключения, который `<asp:connectionszone>` автоматически создается элементом управления, объявленным на странице. Это еще один способ создания соединения (через пользовательский интерфейс), а также декларативный и программный метод, описанный выше. Нажмите кнопку **Disconnect (отключить** ), чтобы завершить существующее статическое соединение. Щелкните ссылку **создать соединение с поставщиком** . Теперь в пользовательском интерфейсе отображается раскрывающийся список, содержащий отображаемое имя точки подключения поставщика. Выберите точку подключения в раскрывающемся списке и нажмите кнопку **Подключиться** , чтобы завершить подключение. Затем снова нажмите кнопку **Отключить** . Затем нажмите кнопку **динамического подключения** , чтобы создать подключение программным способом. Используйте элемент управления " **режим отображения** ", чтобы вернуть страницу в режим просмотра. Снова нажмите кнопку **сведения о точке соединения** , чтобы еще раз указать сведения об объекте точки подключения поставщика.  
  
 В примере демонстрируется установка соединения и использование точки подключения поставщика тремя способами: статическое соединение, объявленное в разметке веб-страницы. соединение, созданное в коде, в <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> котором использовался объект, и соединение, созданное пользователем через пользовательский интерфейс подключения.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Общие сведения о веб-части подключениях</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Метод в элементе управления поставщика, возвращающий экземпляр интерфейса потребителям для установления подключения.</param>
        <param name="interfaceType">Объект <see cref="T:System.Type" /> интерфейса, который поставщик обслуживает для потребителей.</param>
        <param name="controlType">Объект <see cref="T:System.Type" /> элемента управления поставщика, с которым сопоставлена точка подключения поставщика.</param>
        <param name="displayName">Понятное отображаемое имя для точки подключения поставщика, которое видят пользователи в пользовательском интерфейсе подключения.</param>
        <param name="id">Уникальный идентификатор для точки подключения поставщика.</param>
        <param name="allowsMultipleConnections">Логическое значение, указывающее может ли точка подключения поставщика иметь несколько одновременных подключений с потребителями.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Конструктор <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>  для класса просто вызывает базовый конструктор, передавая ему различные параметры и инициализирует базовый класс.  
  
 Конструктор базового класса проверяет количество параметров для точки соединения и может вызывать несколько исключений. Список возможных исключений см. в разделе исключения.  
  
 Можно вызвать <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> конструктор, чтобы создать собственный экземпляр <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класса. Однако в случаях, когда вы просто устанавливаете соединение и не расширяете класс, следует вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод, чтобы вернуть существующий объект точки соединения от поставщика.  
  
   
  
## Examples  
 В следующем примере кода показано, как выполнить наследование от <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класса для создания настраиваемой точки подключения поставщика.  
  
 Пример кода состоит из трех частей:  
  
-   Исходный файл, содержащий элемент управления поставщика <xref:System.Web.UI.WebControls.WebParts.WebPart> , элемент управления получателя <xref:System.Web.UI.WebControls.WebParts.WebPart> и пользовательский <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект.  
  
-   Веб-страница, на которой размещены элементы управления в статическом соединении.  
  
-   Объяснение того, как выполнить пример кода.  
  
 Первая часть примера кода — это источник для элементов управления поставщика и потребителя <xref:System.Web.UI.WebControls.WebParts.WebPart> , а также пользовательский <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класс с именем `TableProviderConnectionPoint`. Обратите внимание, что конструктор `TableProviderConnectionPoint` класса вызывает базовый конструктор, передавая ему необходимые параметры, как указано в разделе Parameters. Также обратите внимание, `TableProviderWebPart` что в классе `GetConnectionInterface` метод указывается как метод обратного вызова `ConnectionProvider` для соединений, а атрибут объявляет настраиваемый `TableProviderConnectionPoint` в качестве параметра. В этом примере показано, как создать настраиваемую точку подключения поставщика, а затем связать ее с элементом управления поставщика. В этом примере предполагается, что исходный код компилируется динамически, поэтому файл исходного кода следует поместить во вложенную папку App_Code веб-приложения.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Вторая часть примера кода — это веб-страница, на которой размещены пользовательские элементы управления в статическом соединении веб-части. В верхней части страницы находится `Register` директива для объявления префикса и пространства имен для пользовательских элементов управления. Соединение объявляется с помощью `<asp:webpartconnection>` элемента, а элементы управления поставщика и потребителя объявляются `<asp:webpartzone>` внутри элемента.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Загрузите страницу в браузере. Соединение между элементами управления уже существует, и потребитель отображает данные от поставщика, поскольку соединение было объявлено как статическое соединение на странице.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> — <see langword="null" />.  
  
-или- 
 Свойство <paramref name="interfaceType" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="controlType" /> имеет значение <see langword="null" />.  
  
- или - 
 Параметр <paramref name="displayName" /> имеет значение <see langword="null" /> или равен пустой строке ("").</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="controlType" /> имеет тип, отличный от типа элемента управления поставщика (или производного от него допустимого класса).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, действующий как поставщик в связи веб-частей.</param>
        <summary>Вызывает метод обратного вызова в элементе управления поставщика, который получает экземпляр интерфейса для возвращения потребителям.</summary>
        <returns>Объект <see cref="T:System.Object" />, являющийся экземпляром интерфейса, который поставщик возвращает потребителям для установления подключения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает объект из элемента управления поставщика, который является экземпляром интерфейса, используемого для установления соединения. Тип объекта будет типом реализованного интерфейса. Например, двумя интерфейсами, которые реализуются для соединений в наборе элементов управления веб-части <xref:System.Web.UI.WebControls.WebParts.IWebPartField> , <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>являются и. При вызове  <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> метода для объекта, если связанный поставщик реализует один из этих интерфейсов, возвращаемый объект будет иметь тот же тип. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Метод вызывается <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>  объектами при активации подключения. Это важный шаг, который фактически инициирует соединение и начинает процесс, который позволяет двум элементам управления обмениваться данными.  
  
 Элемент управления "потребитель" в соединении должен иметь возможность работать с тем же типом интерфейса, что и поставщик. В противном случае элементы управления несовместимы, и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> для установления соединения необходимо использовать объект.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, действующий как поставщик в связи веб-частей.</param>
        <summary>Получает дополнительную коллекцию дополнительных интерфейсов, которые могут поддерживаться точкой подключения поставщика.</summary>
        <returns>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> дополнительных интерфейсов, предоставленных элементом управления, действующим как поставщик.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект точки подключения поставщика всегда имеет интерфейс по умолчанию, который используется для установления соединения с потребителями. Экземпляр интерфейса по умолчанию извлекается путем вызова <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> метода <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> для объекта.  
  
 Однако некоторые элементы управления поставщика будут реализовывать несколько интерфейсов для предоставления потребителям в рамках подключения. Эти интерфейсы, которые не используются по умолчанию для установления соединения, называются дополнительными интерфейсами. Метод предоставляет способ возврата коллекции ссылок на дополнительные интерфейсы так же, <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> как метод возвращает ссылку на интерфейс по умолчанию. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> Метод <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />  в классе не содержит реализации; он возвращает пустую коллекцию вторичных интерфейсов. Чтобы реализовать этот метод, необходимо наследовать от <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> класса и переопределять этот метод, возвращая из него определенный набор дополнительных интерфейсов.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
