<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="194e2a1c164244ca14c63e1d5a3c3366754fdd7e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69395674" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет объект точки подключения, который позволяет серверному элементу управления выполнять роль получателя для установки подключения к поставщику.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый элемент управления в каждом веб-части соединении между двумя серверными элементами управления должен иметь (среди прочих требований) связанный объект точки соединения, который позволяет ему подключаться к другому элементу управления и предоставлять или использовать данные в зависимости от того, является ли элемент управления назначается поставщиком или потребителем для соединения. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Объект в целом содержит сведения о том, как элемент управления может подключаться к другому элементу управления и типу данных, к которым он может предоставлять общий доступ. Для элемента управления, действующего как потребитель в соединении, его точка соединения должна быть <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объектом. Дополнительные сведения о веб-части подключениях и точках подключения см. в разделах, перечисленных в разделе см. также ниже.  
  
 Чтобы создать <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект, необходимо выполнить несколько действий.  
  
1.  Включение элемента управления "потребитель" для ссылки на экземпляр интерфейса. Другой серверный элемент управления (любой тип серверного элемента управления, который будет добавлен <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> в зону) должен иметь возможность использовать данные из определенного экземпляра интерфейса. <xref:System.Web.UI.WebControls.WebParts.WebPart> Элементу управления не требуется реализовывать интерфейс; только поставщик должен его реализовать. Потребитель может работать с точным типом интерфейса, обслуживаемым поставщиком, или, если нет, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект может использоваться для преобразования данных из типа интерфейса поставщика в тип, понятный потребителю. Типичный способ разрешить потребителю — объявить частное поле, которое будет содержать ссылку на нужный тип интерфейса.  
  
2.  Определяет метод обратного вызова. Метод в потребителе должен быть идентифицирован как метод обратного вызова для установления соединения с поставщиком. Этот метод извлекает экземпляр интерфейса, реализуемого поставщиком, и назначает его (например,) закрытому полю, созданному на первом шаге. Веб-части подход для идентификации метода обратного вызова в потребителе заключается в добавлении `ConnectionConsumer` атрибута метаданных (определенного <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> классом) к методу, который получает экземпляр интерфейса. При добавлении атрибута единственным обязательным параметром является отображаемое имя, используемое для точки подключения потребителя. Кроме того, можно добавить необязательные параметры, например идентификатор.  
  
3.  Обработка и вывод данных из экземпляра интерфейса. Выполните любую внутреннюю обработку данных, а затем, как правило, элемент управления "потребитель" будет отображать данные на странице. Обычно это делается путем переопределения <xref:System.Web.UI.Control.OnPreRender%2A> метода элемента управления.  
  
    > [!NOTE]
    >  Во время синхронного запроса потребитель должен запрашивать данные непосредственно от поставщика во время или сразу после <xref:System.Web.UI.Control.PreRender> события. При асинхронном запросе, если метод обратного вызова поставщика не вызывается в какой-либо момент во время отрисовки, разработчик может предположить, что данные не отправлялись потребителю.  
  
 После того как элемент управления будет работать в качестве потребителя, элемент управления может участвовать в соединениях (предполагая, что элемент управления поставщика также оснащен и доступен). Чтобы создать статическое, декларативное соединение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если атрибут в исходном коде объекта-получателя, определяющий метод обратного вызова, задает идентификатор для точки подключения, то это значение должно быть присвоено `ConsumerConnectionPointID` атрибуту `<asp:webpartconnection>` в элементе на странице. `ConnectionConsumer` Причина, по которой разработчик может указать идентификатор для точки подключения потребителя, — если в элементе управления потребителя определено несколько точек соединения. Если для точки подключения потребителя в элементе управления потребителя не задан идентификатор, значение не обязательно должно быть присвоено `ConsumerConnectionPointID` атрибуту на странице, так как соединение будет создано с использованием значения по умолчанию, полученного из <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> полями.  
  
 Чтобы создать соединение в коде, разработчики должны создать новый <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> вызвав метод и передав ему идентификатор элемента управления потребителя, а также идентификатор или индекс определенного <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта в элементе управления потребителя. Возвращаемый <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект, а также ссылка на элемент управления поставщика, ссылка на элемент управления поставщиком и соответствующий <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект, передаются <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> в метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 Хотя разработчики могут использовать точки подключения потребителя как часть установления соединений декларативно или программно, пользователи также могут взаимодействовать с точками подключения потребителя для установления соединений через пользовательский интерфейс. Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемент управления на веб-странице, он предоставляет пользователям пользовательский интерфейс времени выполнения для создания подключений. Если пользователи выбирают элемент управления поставщика в качестве отправной точки для установления соединения, щелкнув его команду подключения (он также может выбрать потребителя; в результирующем наборе нет разницы), в пользовательском интерфейсе он увидит раскрывающийся список с элементом управления отображаемые имена доступной точки подключения потребителя (или точки, если они есть несколько), которые поставщик может отправить в данные. Чтобы установить соединение, пользователи должны выбрать точку подключения потребителя.  
  
 Объект связывается непосредственно с конкретным элементом управления потребителя и сохраняет сведения о соединении в свойствах, которые он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Например, в унаследованном <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойстве точка подключения потребителя поддерживает тип используемого интерфейса. Если поставщик и потребитель в соединении поддерживают тип интерфейса, элементы управления совместимы и могут создавать прямое соединение. Если поставщик и потребитель не могут работать с одним и тем же типом интерфейса, они несовместимы и должны использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект для преобразования <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойства точки подключения поставщика в тип, с которым может работать потребитель. Еще одним важным наследуемым <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> свойством является свойство, которое предоставляет понятное имя, отображаемое в пользовательском интерфейсе, чтобы пользователи могли выбрать точку подключения получателя при создании подключений. Отображаемое имя является обязательным параметром, когда разработчики добавляют `ConnectionConsumer` атрибут в метод обратного вызова в элементе управления получателя. Унаследованное <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> свойство также полезно, как указано выше, так как оно предоставляет уникальный идентификатор для точки подключения потребителя в случае, когда потребитель имеет несколько точек подключения. У потребителя может быть определено несколько <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объектов, и в данном случае, когда разработчики `ConnectionConsumer` добавляют атрибут к методу, они должны указать значение идентификатора, чтобы отличать каждую точку соединения. Еще одним важным наследуемым свойством является <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> свойство, которое указывает, может ли точка подключения потребителя одновременно подключаться к нескольким поставщикам. Значение этого свойства по `false` умолчанию используется для точек подключения потребителя (в `true` то время как по умолчанию используется точка подключения поставщика).  
  
 Класс добавляет несколько уникальных методов к членам, которые он наследует <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> от класса. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Метод вызывает собственный определенный метод обратного вызова потребителя для получения экземпляра интерфейса от поставщика. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Метод возвращает логическое значение, указывающее, может ли точка соединения устанавливать соединения на основе текущего состояния связанного элемента управления потребителя.  
  
   
  
## Examples  
 В следующем примере кода показаны простые способы создания соединения декларативно, программно или через пользовательский интерфейс в каждом случае использования точки подключения потребителя.  
  
 Пример состоит из четырех частей:  
  
-   Пользовательский элемент управления, позволяющий изменять режим просмотра веб-части на странице.  
  
-   Исходный код для интерфейса и два <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, выступающих в качестве поставщика и потребителя для соединения.  
  
-   Веб-страница для размещения всех элементов управления и выполнения примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — это пользовательский элемент управления, позволяющий пользователям изменять режимы экрана на веб-странице. Сохраните следующий исходный код в ASCX-файл и присвойте ему имя файла, присвоенное `Src` атрибуту `Register` директивы для этого пользовательского элемента управления, который находится ближе к верхней части страницы размещения. Дополнительные сведения о режимах вывода и описание исходного кода в этом элементе управления см. в [разделе Пошаговое руководство. Изменение режима экрана на веб-части странице](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть примера кода — это исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Также <xref:System.Web.UI.WebControls.WebParts.WebPart> существует класс с именем `ZipCodeWebPart` , который реализует интерфейс и выступает в качестве элемента управления поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс`WeatherWebPart`называется, и он выступает в качестве потребителя для соединения. Этот класс имеет метод с именем `GetZipCode` , который получает экземпляр `IZipCode` интерфейса из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` атрибутом в его метаданных. Это механизм идентификации метода точки подключения в элементе управления потребителя.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Его можно скомпилировать явным образом и разместить полученную сборку в папке Bin веб-сайта или в глобальном кэше сборок. Кроме того, можно разместить исходный код в папке App_Code сайта, где он будет динамически компилироваться во время выполнения. В этом примере кода используется динамическая компиляция. Пошаговое руководство, в котором демонстрируется компиляция [, см. в разделе Пошаговое руководство. Разработка и использование пользовательского серверного веб-](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)элемента управления.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. В верхней части приведены `Register` директивы для регистрации пользовательских элементов управления, образующих соединение, и пользовательского элемента управления, который позволяет пользователям изменять режимы экрана на странице. Само соединение создается декларативно в `<staticconnections>` элементе на странице. Это демонстрирует один из способов создания соединения — Обратите внимание на `ConsumerConnectionPointID` атрибут `<asp:webpartconnection>` в элементе. Можно также создать подключение программным способом. код для этого используется в `Button1_Click` методе. В этом случае <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> создается объект, который затем передается в метод, который создает фактическое соединение. Независимо от того, создается ли соединение декларативно или программно, точки соединения всегда должны быть указаны как для поставщика, так и для потребителя. Метод обращается к <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объектам как для поставщика, так и для потребителя и записывает некоторые значения их свойств в метку на странице. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 После загрузки страницы в браузере нажмите кнопку **сведения о точке соединения** . Отобразятся сведения о точках подключения поставщика и потребителя, установленных в декларативном соединении. Затем с помощью раскрывающегося списка **режим экрана** переключите страницу в режим подключения. В меню глаголы элемента управления **поставщика** <xref:System.Web.UI.WebControls.WebParts.WebPart> почтовых индексов (представленные стрелкой вниз в заголовке окна) щелкните команду Подключить. Открывается пользовательский интерфейс подключения, который `<asp:connectionszone>` автоматически создается элементом управления, объявленным на странице. Это еще один способ создания соединения (через пользовательский интерфейс), а также декларативный и программный метод, описанный выше. Нажмите кнопку **Disconnect (отключить** ), чтобы завершить существующее статическое соединение. Щелкните ссылку **создать соединение с потребителем** . Теперь в пользовательском интерфейсе отображается раскрывающийся список, содержащий отображаемое имя точки подключения потребителя. Выберите точку подключения в раскрывающемся списке и нажмите кнопку **Подключиться** , чтобы завершить подключение. Затем снова нажмите кнопку **Отключить** . Нажмите кнопку **Динамическое соединение** , чтобы создать подключение программным способом. Используйте элемент управления " **режим отображения** ", чтобы вернуть страницу в режим просмотра. Снова нажмите кнопку **сведения о точке соединения** , чтобы указать сведения о объекте точки подключения потребителя еще раз.  
  
 В примере демонстрируется установка соединения и использование точки подключения потребителя тремя способами: статическое соединение, объявленное в разметке веб-страницы. соединение, созданное в коде, в <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> котором использовался объект, и соединение, созданное пользователем через пользовательский интерфейс подключения.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Общие сведения о веб-части подключениях</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Метод в элементе управления получателя, который возвращает экземпляр интерфейса получателям для создания подключения.</param>
        <param name="interfaceType">Тип <see cref="T:System.Type" /> интерфейса, который получатель принимает от поставщика.</param>
        <param name="controlType">Тип <see cref="T:System.Type" /> элемента управления получателя, с которым связана точка подключения получателя.</param>
        <param name="displayName">Понятное отображаемое имя для точки подключения получателя, которая отображается для пользователей в пользовательском интерфейсе подключения.</param>
        <param name="id">Уникальный идентификатор точки подключения получателя.</param>
        <param name="allowsMultipleConnections">Логическое значение, указывающее, может ли точка подключения получателя иметь несколько одновременных подключений с поставщиками.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Конструктор<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> для класса просто вызывает базовый конструктор, передавая ему различные параметры и инициализирует базовый класс.  
  
 Конструктор базового класса проверяет количество параметров для точки соединения и может вызывать несколько исключений. Список возможных исключений см. в разделе исключения.  
  
 Можно вызвать <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> конструктор, чтобы создать собственный экземпляр <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса. Однако в случаях, когда вы просто устанавливаете соединение и не расширяете класс, необходимо вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> метод, чтобы вернуть объект точки подключения от поставщика.  
  
   
  
## Examples  
 В следующем примере кода показано, как выполнить наследование от <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса для создания настраиваемой точки подключения поставщика.  
  
 Пример кода состоит из трех частей:  
  
-   Исходный файл, содержащий элемент управления поставщика <xref:System.Web.UI.WebControls.WebParts.WebPart> , элемент управления получателя <xref:System.Web.UI.WebControls.WebParts.WebPart> и пользовательский <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект.  
  
-   Веб-страница, на которой размещены элементы управления в статическом соединении.  
  
-   Объяснение того, как выполнить пример кода.  
  
 Первая часть примера кода — это источник для элементов управления поставщика и потребителя <xref:System.Web.UI.WebControls.WebParts.WebPart> , а также пользовательский <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класс с именем `TableConsumerConnectionPoint`. Обратите внимание, что конструктор `TableConsumerConnectionPoint` класса вызывает базовый конструктор, передавая ему необходимые параметры, как указано в разделе Parameters. Также обратите внимание, `TableConsumer` что в классе `SetConnectionInterface` метод указывается как метод обратного вызова `ConnectionConsumer` для соединений, а атрибут объявляет настраиваемый `TableConsumerConnectionPoint` в качестве параметра. В этом примере показано, как создать настраиваемую точку подключения потребителя и затем связать ее с элементом управления потребителя. В этом примере предполагается, что исходный код компилируется динамически, поэтому файл исходного кода следует поместить во вложенную папку App_Code веб-приложения.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Вторая часть примера кода — это веб-страница, на которой размещены пользовательские элементы управления в статическом соединении веб-частей. В верхней части страницы находится `Register` директива для объявления префикса и пространства имен для пользовательских элементов управления. Соединение объявляется с помощью `<asp:webpartconnection>` элемента, а элементы управления поставщика и потребителя объявляются `<asp:webpartzone>` внутри элемента.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Загрузите страницу в браузере. Соединение между элементами управления уже существует, и потребитель отображает данные от поставщика, поскольку соединение было объявлено как статическое соединение на странице.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> — <see langword="null" />.  
  
- или - 
 Свойство <paramref name="interfaceType" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="controlType" /> имеет значение <see langword="null" />.  
  
-или- 
 Параметр <paramref name="displayName" /> имеет значение <see langword="null" /> или равен пустой строке ("").</exception>
        <exception cref="T:System.ArgumentException">Тип <paramref name="controlType" /> не является тем же типом, что и тип элемента управления получателя (или допустимого производного класса).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Элементы управления веб-части ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления получателя, с которым связана точка подключения получателя.</param>
        <param name="data">Экземпляр интерфейса, возвращенного из элемента управления поставщика.</param>
        <summary>Вызывает метод обратного вызова в элементе управления получателя и получает экземпляр интерфейса из элемента управления поставщика.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод получает экземпляр интерфейса от поставщика, который содержит данные для элемента управления потребителя.  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Метод вызывается<xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объектами при активации подключения. Это важный шаг, который является частью процесса инициирования соединения и включения совместного использования данных двумя элементами управления.  
  
 Элемент управления "потребитель" в соединении должен иметь возможность работать с тем же типом интерфейса, что и поставщик. В противном случае элементы управления несовместимы, и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> для установления соединения необходимо использовать объект.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="control" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления получателя, связанный с точкой подключения <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">Коллекция <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> любых дополнительных интерфейсов, участвующих в подключении.</param>
        <summary>Определяет, может ли точка подключения получателя в настоящий момент устанавливать подключение.</summary>
        <returns>Значение <see langword="true" />, если точка подключения в настоящий момент может создавать подключение; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализованный `true` метод всегда возвращает <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> во всех случаях для класса. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Цель этого метода заключается в том, чтобы проверить состояние `control` и `secondaryInterfaces` в определенных критических <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> точках, чтобы определить, может ли объект создать соединение.  
  
 Возможны ситуации, когда `control` находятся в состоянии, которое сделает невозможным создание соединения, или место, где `secondaryInterfaces` оно должно существовать до того, как соединение может быть сформировано. В таких случаях разработчики могут наследовать от <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса и <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> переопределять метод, предоставляя пользовательскую реализацию, чтобы определить, когда точка подключения готова к поддержке соединений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
