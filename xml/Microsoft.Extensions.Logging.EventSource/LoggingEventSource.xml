<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6971d9c39297efc4e895f22b6d96a3785890c8e9" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72412116" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
      <AttributeName>System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="af769-101">Класс LoggingEventSource является связующим звеном между всеми журналами на основе ILogger и журналами на основе EventSource и EventListener.</span><span class="sxs-lookup"><span data-stu-id="af769-101">The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</span></span>
            
<span data-ttu-id="af769-102">Для включения этого ведения журнала используется следующий источник событий:</span><span class="sxs-lookup"><span data-stu-id="af769-102">You turn this logging on by enabling the EventSource called</span></span> 
<span data-ttu-id="af769-103">Microsoft-Extensions-Logging</span><span class="sxs-lookup"><span data-stu-id="af769-103">Microsoft-Extensions-Logging</span></span> 
<span data-ttu-id="af769-104">При включении источника событий заданный уровень событий явным образом преобразуется в уровень, связанный с ILogger (то есть Debug = verbose, Informational = Informational ... Critical == Critical).</span><span class="sxs-lookup"><span data-stu-id="af769-104">When you enabled the EventSource, the EventLevel you set is translated in the obvious way to the level associated with the ILogger (thus Debug = verbose, Informational = Informational ... Critical == Critical)</span></span> 
<span data-ttu-id="af769-105">Это позволяет без лишних усилий выполнять фильтрацию по уровню событий.</span><span class="sxs-lookup"><span data-stu-id="af769-105">This allows you to filter by event level in a straightforward way.</span></span>
            
<span data-ttu-id="af769-106">Для более точного управления можно указать следующий аргумент источника событий:</span><span class="sxs-lookup"><span data-stu-id="af769-106">For finer control you can specify a EventSource Argument called</span></span> 
<span data-ttu-id="af769-107">FilterSpecs</span><span class="sxs-lookup"><span data-stu-id="af769-107">FilterSpecs</span></span> 
<span data-ttu-id="af769-108">Аргумент FilterSpecs представляет собой список спецификаций, разделенных точкой с запятой.</span><span class="sxs-lookup"><span data-stu-id="af769-108">The FilterSpecs argument is a semicolon separated list of specifications.</span></span>   <span data-ttu-id="af769-109">Каждая спецификация имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="af769-109">Where each specification is</span></span> 
<span data-ttu-id="af769-110">SPEC =                          // пустая спецификация, аналогично \* | NAME                     // просто имя, уровень по умолчанию — level | NAME : LEVEL            // указывает уровень для определенного средства ведения журнала (может иметь суффикс \*).</span><span class="sxs-lookup"><span data-stu-id="af769-110">SPEC =                          // empty spec, same as \* | NAME                     // Just a name the level is the default level | NAME : LEVEL            // specifies level for a particular logger (can have a \* suffix).</span></span>
            
<span data-ttu-id="af769-111">Здесь Name — это имя ILoggger (с учетом регистра). Имя может иметь суффикс "\*", выступающий в роли подстановочного знака.</span><span class="sxs-lookup"><span data-stu-id="af769-111">Where Name is the name of a ILoggger (case matters), Name can have a \* which acts as a wildcard AS A SUFFIX.</span></span>   <span data-ttu-id="af769-112">Например, "Net\*" соответствует любому средству ведения журнала, имя которого начинается со строки "Net".</span><span class="sxs-lookup"><span data-stu-id="af769-112">Thus Net\* will match any loggers that start with the 'Net'.</span></span>
            
<span data-ttu-id="af769-113">LEVEL — это число или строка LogLevel.</span><span class="sxs-lookup"><span data-stu-id="af769-113">The LEVEL is a number or a LogLevel string.</span></span> <span data-ttu-id="af769-114">0=Trace, 1=Debug, 2=Information, 3=Warning, 4=Error, 5=Critical. Определяет уровень связанного шаблона.</span><span class="sxs-lookup"><span data-stu-id="af769-114">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 This specifies the level for the associated pattern.</span></span>  <span data-ttu-id="af769-115">Если номер не указан (первая форма спецификации), используется уровень по умолчанию для источника событий.</span><span class="sxs-lookup"><span data-stu-id="af769-115">If the number is not specified, (first form of the specification) it is the default level for the EventSource.</span></span>
            
<span data-ttu-id="af769-116">Если имени соответствуют несколько шаблонов, используется первое совпадение.</span><span class="sxs-lookup"><span data-stu-id="af769-116">First match is used if a particular name matches more than one pattern.</span></span>
            
<span data-ttu-id="af769-117">Помимо уровня и аргумента FilterSpecs, можно также задать ключевые слова источника событий.</span><span class="sxs-lookup"><span data-stu-id="af769-117">In addition the level and FilterSpec argument, you can also set EventSource Keywords.</span></span>  <span data-ttu-id="af769-118">Полное определение ключевых слов приведено ниже, однако, как правило, необходимо определить следующие ключевые слова:</span><span class="sxs-lookup"><span data-stu-id="af769-118">See the Keywords definition below, but basically you get to decide if you wish to have</span></span> 
<span data-ttu-id="af769-119">\* Keywords.Message — вы получаете событие с проанализированными данными;</span><span class="sxs-lookup"><span data-stu-id="af769-119">\* Keywords.Message - You get the event with the data in parsed form.</span></span>
<span data-ttu-id="af769-120">\* Keywords.JsonMessage — вы получаете событие с проанализированными данными, но в виде большого двоичного объекта JSON (не разбитого по аргументу...); \* Keywords.FormattedMessage — вы получаете событие с данными, отформатированными в виде строки.</span><span class="sxs-lookup"><span data-stu-id="af769-120">\* Keywords.JsonMessage - you get an event with the data in parse form but as a JSON blob (not broken up by argument ...) \* Keywords.FormattedMessage - you get an event with the data formatted as a string</span></span> 
<span data-ttu-id="af769-121">Обычно включается только одно из этих ключевых слов, но вы можете включить их все (и получить одни и те же данные в трех разных формах).</span><span class="sxs-lookup"><span data-stu-id="af769-121">It is expected that you will turn only one of these keywords on at a time, but you can turn them all on (and get the same data logged three different ways.</span></span>
            
<span data-ttu-id="af769-122">Пример использования</span><span class="sxs-lookup"><span data-stu-id="af769-122">Example Usage</span></span> 
<span data-ttu-id="af769-123">В этом примере показано, как можно использовать EventListener для получения данных ILogging.</span><span class="sxs-lookup"><span data-stu-id="af769-123">This example shows how to use an EventListener to get ILogging information</span></span> 
<span data-ttu-id="af769-124">class MyEventListener : EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // Инициализация строкового словаря аргументов, передаваемого в источник событий.</span><span class="sxs-lookup"><span data-stu-id="af769-124">class MyEventListener : EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // initialize a string, string dictionary of arguments to pass to the EventSource.</span></span>
<span data-ttu-id="af769-125">// Для средств ведения журнала, имена которых соответствуют шаблону App*, устанавливается уровень Information, а для остальных (*) — уровень по умолчанию (то есть EventLevel.Error). var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } }; // В качестве уровня (детализации) по умолчанию устанавливается Error; в этом случае запрашиваются только отформатированные сообщения.</span><span class="sxs-lookup"><span data-stu-id="af769-125">// Turn on loggers matching App\* to Information, everything else (*) is the default level (which is EventLevel.Error) var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;\*" } }; // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.</span></span>
<span data-ttu-id="af769-126">EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // Ожидается отформатированное сообщение о событии, которое имеет следующую структуру аргументов (согласно определению в LoggingEventSource).</span><span class="sxs-lookup"><span data-stu-id="af769-126">EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.</span></span>
<span data-ttu-id="af769-127">// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</span><span class="sxs-lookup"><span data-stu-id="af769-127">// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
