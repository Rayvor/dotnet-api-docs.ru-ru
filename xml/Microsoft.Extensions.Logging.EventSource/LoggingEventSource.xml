<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a0d9418fc6fd1112e04bdbe206324340fc5f3bb" /><Meta Name="ms.sourcegitcommit" Value="2b0967e04b047f6709322418d97215dfcef6a938" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/20/2019" /><Meta Name="ms.locfileid" Value="74234733" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
      <AttributeName>System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3ad77-101">Класс LoggingEventSource является связующим звеном между всеми журналами на основе ILogger и журналами на основе EventSource и EventListener.</span><span class="sxs-lookup"><span data-stu-id="3ad77-101">The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3ad77-102">Чтобы включить ведение журнала, включите объект EventSource с именем `Microsoft-Extensions-Logging`.</span><span class="sxs-lookup"><span data-stu-id="3ad77-102">You turn this logging on by enabling the EventSource called `Microsoft-Extensions-Logging`.</span></span>
            
<span data-ttu-id="3ad77-103">Когда EventSource включается, заданный Евентлевел преобразуется в очевидный путь к уровню, связанному с ILogger (таким образом, Debug = Verbose, информационный = информационный... Критическое = = критическое)</span><span class="sxs-lookup"><span data-stu-id="3ad77-103">When you enabled the EventSource, the EventLevel you set is translated in the obvious way to the level associated with the ILogger (thus Debug = verbose, Informational = Informational ... Critical == Critical)</span></span>
            
<span data-ttu-id="3ad77-104">Это позволяет без лишних усилий выполнять фильтрацию по уровню событий.</span><span class="sxs-lookup"><span data-stu-id="3ad77-104">This allows you to filter by event level in a straightforward way.</span></span>
            
<span data-ttu-id="3ad77-105">Для более точного управления можно указать аргумент EventSource с именем `FilterSpecs`.</span><span class="sxs-lookup"><span data-stu-id="3ad77-105">For finer control you can specify a EventSource Argument called `FilterSpecs`.</span></span>
            
<span data-ttu-id="3ad77-106">Аргумент `FilterSpecs` — это список спецификаций, разделенных точкой с запятой.</span><span class="sxs-lookup"><span data-stu-id="3ad77-106">The `FilterSpecs` argument is a semicolon separated list of specifications.</span></span> <span data-ttu-id="3ad77-107">Каждая спецификация имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="3ad77-107">Where each specification is</span></span>

```
SPEC =                          // empty spec, same as *
     | NAME                     // Just a name the level is the default level
     | NAME : LEVEL            // specifies level for a particular logger (can have a * suffix).
```
            
<span data-ttu-id="3ad77-108">Где name — имя Илоггжер (case имеет значение), имя может иметь \*, который выступает в качестве СУФФИКСа в качестве подстановочного знака.</span><span class="sxs-lookup"><span data-stu-id="3ad77-108">Where Name is the name of a ILoggger (case matters), Name can have a \* which acts as a wildcard AS A SUFFIX.</span></span> <span data-ttu-id="3ad77-109">Таким словами, NET\* будет соответствовать любым средствам ведения журнала, которые начинаются с "NET".</span><span class="sxs-lookup"><span data-stu-id="3ad77-109">Thus, Net\* will match any loggers that start with the 'Net'.</span></span>
            
<span data-ttu-id="3ad77-110">LEVEL — это число или строка LogLevel.</span><span class="sxs-lookup"><span data-stu-id="3ad77-110">The LEVEL is a number or a LogLevel string.</span></span> <span data-ttu-id="3ad77-111">0=Trace, 1=Debug, 2=Information, 3=Warning, 4=Error, 5=Critical. Определяет уровень связанного шаблона.</span><span class="sxs-lookup"><span data-stu-id="3ad77-111">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 This specifies the level for the associated pattern.</span></span>  <span data-ttu-id="3ad77-112">Если номер не указан (первая форма спецификации), используется уровень по умолчанию для источника событий.</span><span class="sxs-lookup"><span data-stu-id="3ad77-112">If the number is not specified, (first form of the specification) it is the default level for the EventSource.</span></span>
            
<span data-ttu-id="3ad77-113">Если имени соответствуют несколько шаблонов, используется первое совпадение.</span><span class="sxs-lookup"><span data-stu-id="3ad77-113">First match is used if a particular name matches more than one pattern.</span></span>
            
<span data-ttu-id="3ad77-114">Помимо аргумента Level и Филтерспек, можно также задать ключевые слова EventSource.</span><span class="sxs-lookup"><span data-stu-id="3ad77-114">In addition to the level and FilterSpec argument, you can also set EventSource Keywords.</span></span> <span data-ttu-id="3ad77-115">Полное определение ключевых слов приведено ниже, однако, как правило, необходимо определить следующие ключевые слова:</span><span class="sxs-lookup"><span data-stu-id="3ad77-115">See the Keywords definition below, but basically you get to decide if you wish to have</span></span>
            
* <span data-ttu-id="3ad77-116">Keywords. Message — вы получаете событие с данными в проанализированной форме.</span><span class="sxs-lookup"><span data-stu-id="3ad77-116">Keywords.Message - You get the event with the data in parsed form.</span></span>
* <span data-ttu-id="3ad77-117">Keywords. Жсонмессаже — вы получаете событие с данными в форме синтаксического анализа, но в виде большого двоичного объекта JSON (не разбивается по аргументам...)</span><span class="sxs-lookup"><span data-stu-id="3ad77-117">Keywords.JsonMessage - you get an event with the data in parse form but as a JSON blob (not broken up by argument ...)</span></span>
* <span data-ttu-id="3ad77-118">Keywords. Форматтедмессаже — вы получаете событие с данными в формате строки.</span><span class="sxs-lookup"><span data-stu-id="3ad77-118">Keywords.FormattedMessage - you get an event with the data formatted as a string</span></span>
            
<span data-ttu-id="3ad77-119">Предполагается, что в каждый момент времени будет включено только одно из этих ключевых слов, но их можно включить и получить одни и те же данные тремя разными способами.</span><span class="sxs-lookup"><span data-stu-id="3ad77-119">It is expected that you will turn only one of these keywords on at a time, but you can turn them all on and get the same data logged three different ways.</span></span>
            
## Examples
            
<span data-ttu-id="3ad77-120">В следующем примере показано, как использовать EventListener для получения сведений о Илоггинг:</span><span class="sxs-lookup"><span data-stu-id="3ad77-120">The following example shows how to use an EventListener to get ILogging information:</span></span>
            
```csharp
class MyEventListener : EventListener 
{
    protected override void OnEventSourceCreated(EventSource eventSource) 
    {
        if (eventSource.Name == "Microsoft-Extensions-Logging") 
        {
            // initialize a string, string dictionary of arguments to pass to the EventSource.
            // Turn on loggers matching App* to Information, everything else (*) is the default level (which is EventLevel.Error)
            var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } };
            // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.
            EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args);
        }
    }

    protected override void OnEventWritten(EventWrittenEventArgs eventData) 
    {
        // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.
        // FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage);
        if (eventData.EventName == "FormattedMessage")
            Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]);
    }
}
```

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
