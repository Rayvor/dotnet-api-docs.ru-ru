<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="98168fe8a5962d9aba67f7eb67ddd708a69e45ce" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70712119" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Управляет состояниями и логикой для переходов между состояниями элементов управления.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager> Позволяет задавать состояния для элемента управления, внешнего вида элемента управления, когда он находится в определенном состоянии, а также когда изменяется состояние элемента управления. Например, при нажатии кнопки, когда она не нажата, <xref:System.Windows.Controls.Button> может слегка отличаться внешний вид. Два состояния, которые <xref:System.Windows.Controls.Button> соответствуют определению при нажатии (`"Pressed"`) и когда это не (`"Normal"`). Внешний вид элемента управления, когда он находится в состоянии, определяется <xref:System.Windows.VisualState>. Объект <xref:System.Windows.VisualState> содержит <xref:System.Windows.Media.Animation.Storyboard>  коллекцию объектов, определяющих изменение внешнего вида элемента управления, когда элемент управления находится в этом состоянии. Визуальные состояния добавляются в элемент управления путем задания `VisualStateManager.VisualStateGroups` присоединенного свойства элемента управления. Каждый <xref:System.Windows.VisualStateGroup> объект содержит <xref:System.Windows.VisualState> коллекцию объектов, которые являются взаимоисключающими. Это значит, что элемент управления всегда находится в точности в одном состоянии в <xref:System.Windows.VisualStateGroup>каждом.  
  
 <xref:System.Windows.VisualStateManager> Также позволяет указать, когда элемент управления переходит в определенное состояние. Метод, который следует вызывать для состояний изменений, зависит от вашего сценария. При создании элемента управления, который использует <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>в, вызовите <xref:System.Windows.VisualStateManager.GoToState%2A> метод. Дополнительные сведения о создании элементов управления, использующих <xref:System.Windows.VisualStateManager>, см. в разделе [Создание элемента управления с настраиваемым внешним видом](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md). <xref:System.Windows.VisualStateManager> Если используется <xref:System.Windows.VisualStateManager.GoToElementState%2A> вне <xref:System.Windows.Controls.ControlTemplate> (например <xref:System.Windows.VisualStateManager> , при использовании в <xref:System.Windows.Controls.UserControl> или в одном элементе), вызовите метод. В любом случае <xref:System.Windows.VisualStateManager> выполняет логику, необходимую для надлежащего запуска и завершения раскадровок, связанных с вовлеченным состоянием. Например, предположим, что элемент управления определяет состояния, `State1` и `State2`каждый из них имеет связанную с ним раскадровку. Если элемент управления находится в `State1` и вы <xref:System.Windows.VisualStateManager.GoToState%2A> передаете <xref:System.Windows.VisualStateManager.GoToElementState%2A> `State2` в или <xref:System.Windows.VisualStateManager> , то запускает раскадровку в `State2` и останавливает `State1`раскадровку в.  
  
 Элементы управления, входящие в [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] состав, <xref:System.Windows.VisualStateManager> используют для изменения визуальных состояний. При создании <xref:System.Windows.Controls.ControlTemplate> для элемента управления, включенного в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], можно добавить <xref:System.Windows.VisualState> объекты в элемент управления <xref:System.Windows.Controls.ControlTemplate> , чтобы указать внешний вид элемента управления в определенном состоянии. Чтобы найти имена визуальных состояний для элементов управления, которые включены в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], см. раздел [стили и шаблоны элемента управления](~/docs/framework/wpf/controls/control-styles-and-templates.md). Логика элемента управления обрабатывает переход между состояниями, поэтому не нужно выполнять никаких действий, кроме определения <xref:System.Windows.VisualState> объектов в новом. <xref:System.Windows.Controls.ControlTemplate> Дополнительные сведения о создании шаблонов элементов управления для существующих элементов управления см. в разделе [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 Если необходимо реализовать собственную логику для перехода между состояниями, необходимо наследовать от <xref:System.Windows.VisualStateManager>, <xref:System.Windows.VisualStateManager.GoToStateCore%2A> переопределить <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType> метод и установить присоединенное свойство для элемента управления, который использует пользовательскую логику.  
  
   
  
## Examples  
 В следующем примере создается объект <xref:System.Windows.Shapes.Rectangle> и <xref:System.Windows.VisualStateGroup> добавляется имя `CommonStates` к `VisualStateManager.VisualStatesGroups` присоединенному свойству. В примере определяются `MouseOver` объекты `Normal` и <xref:System.Windows.VisualState> в `CommonStates` . <xref:System.Windows.VisualStateGroup> Когда пользователь наводит указатель <xref:System.Windows.Shapes.Rectangle>мыши на, он изменяется с красного на зеленый в течение одной половины секунды. Когда пользователь перемещает указатель мыши за пределы прямоугольника, <xref:System.Windows.Controls.Grid> он сразу же меняет свой цвет на красный. Обратите внимание `Normal` , что состояние не <xref:System.Windows.Media.Animation.Storyboard>определяет. `Normal` <xref:System.Windows.Media.Animation.Storyboard> `MouseOver` <xref:System.Windows.Shapes.Rectangle> `MouseOver` <xref:System.Windows.Media.SolidColorBrush.Color%2A> Не является обязательным <xref:System.Windows.Media.SolidColorBrush>  , поскольку при переходах из состояния в состояние для останавливается, а свойство для возвращаемых данных <xref:System.Windows.Media.Animation.Storyboard> к красному.  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 В следующем примере показан обработчик событий, определенный в предыдущем примере, и вызывает <xref:System.Windows.VisualStateManager.GoToElementState%2A> метод для перехода между состояниями. Если прямоугольник в предыдущем примере был частью <xref:System.Windows.Controls.ControlTemplate>, в примере бы пришлось бы <xref:System.Windows.VisualStateManager.GoToState%2A> вызвать метод.  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.VisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает или задает объект <see cref="T:System.Windows.VisualStateManager" />, который осуществляет переход между состояниями элемента управления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> имеет `null`значение , <xref:System.Windows.VisualStateManager>  компонент использует собственную логику для перехода между состояниями. Если вы хотите реализовать собственную логику для перехода между состояниями, создайте класс, который наследует от <xref:System.Windows.VisualStateManager> и <xref:System.Windows.VisualStateManager.GoToStateCore%2A> переопределяет метод. Чтобы использовать пользовательский класс, задайте <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> для свойства объект пользовательского типа.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Элемент, из которого требуется получить вложенное свойство зависимостей <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</param>
        <summary>Получает вложенное свойство <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <returns>Диспетчер визуальных состояний, который осуществляет переход между состояниями элемента управления.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Элемент, из которого требуется получить вложенное свойство зависимостей <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</param>
        <summary>Получает вложенное свойство <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</summary>
        <returns>Коллекция объектов <see cref="T:System.Windows.VisualStateGroup" />, связанная с заданным объектом.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Состояние, в которое требуется перейти.</param>
        <param name="useTransitions">Значение <see langword="true" />, если для перехода между состояниями необходимо использовать объект <see cref="T:System.Windows.VisualTransition" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Переводит элемент из одного из двух состояний в другое. Этот метод используется для смены состояний, определенных приложением, а не определенных элементом управления.</summary>
        <returns>Значение <see langword="true" />, если элемент управления успешно перешел в новое состояние; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Window> <xref:System.Windows.DataTemplate> <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate> Вызовите метод, чтобы изменить состояния элемента за пределами (например, если используется в или). <xref:System.Windows.VisualStateManager.GoToElementState%2A> Вызовите <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>метод, если вы изменяете состояния в элементе управления, который использует в. <xref:System.Windows.VisualStateManager.GoToState%2A>  
  
   
  
## Examples  
 В следующем примере создается приложение, предлагающее пользователю угадать число от 1 до 100.  Когда пользователь вводит число, оно указывает, является ли прогноз слишком высоким, слишком низким или правильным.  Следующий пример [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] создает пользовательский интерфейс для приложения и определяет 4 состояния: `TooLow`, `TooHigh`, `Correct`и `Guessing`. При запуске приложение находится в `Guessing` состоянии. .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 В следующем коде показана логика приложения.  Когда пользователь вводит число и нажимает кнопку, приложение вызывает <xref:System.Windows.VisualStateManager.GoToElementState%2A> `TooHigh`переход на, `TooLow`или `Correct` , чтобы предоставить отзыв пользователю о предположении.  Чтобы испытать этот пример, вызовите `GenerateNumber` метод при запуске приложения.  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateGroupsRoot" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="stateName" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, переводимый из одного состояния в другое.</param>
        <param name="stateName">Состояние, в которое требуется перейти.</param>
        <param name="useTransitions">Значение <see langword="true" />, если для перехода между состояниями необходимо использовать объект <see cref="T:System.Windows.VisualTransition" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Переводит элемент управления из одного из двух состояний в другое. Этот метод используется для смены состояний элемента управления, содержащего объект <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>Значение <see langword="true" />, если элемент управления успешно перешел в новое состояние; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>метод, если вы изменяете состояния в элементе управления, который использует в. <xref:System.Windows.VisualStateManager.GoToState%2A> Вызовите <xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.UserControl> метод, чтобы изменить состояния элемента за пределами (например, если используется в или в одном элементе). <xref:System.Windows.VisualStateManager.GoToElementState%2A>  
  
   
  
## Examples  
 В следующем примере демонстрируется элемент управления, который <xref:System.Windows.VisualStateManager.GoToState%2A> использует метод для перехода между состояниями. Полный пример см. в разделе [Создание элемента управления с настраиваемым внешним видом](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> — <see langword="null" />.  
  
- или - 
 Свойство <paramref name="stateName" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, переводимый из одного состояния в другое.</param>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Имя состояния, в которое требуется перейти.</param>
        <param name="group">Объект <see cref="T:System.Windows.VisualStateGroup" />, к которому относится данное состояние.</param>
        <param name="state">Представление состояния, в которое требуется перейти.</param>
        <param name="useTransitions">Значение <see langword="true" />, если для перехода между состояниями необходимо использовать объект <see cref="T:System.Windows.VisualTransition" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Переводит элемент управления из одного состояния в другое.</summary>
        <returns>Значение <see langword="true" />, если элемент управления успешно перешел в новое состояние; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> Метод выполняет логику, необходимую для надлежащего запуска и окончания раскадровок, связанных с переходом. Когда элемент управления изменяет <xref:System.Windows.VisualStateManager.GoToState%2A> свое состояние <xref:System.Windows.VisualStateManager> , метод выполняет следующие действия:  
  
-   Во-первых, <xref:System.Windows.VisualState> при переходе элемента управления в в имеет значение <xref:System.Windows.Media.Animation.Storyboard>, начинается раскадровка. Затем, если <xref:System.Windows.VisualState> элемент управления поступает от <xref:System.Windows.Media.Animation.Storyboard>, то раскадровка заканчивается.  
  
-   Если элемент управления уже находится в `stateName` состоянии, <xref:System.Windows.VisualStateManager.GoToState%2A> не выполняет никаких действий и возвращает `true`значение.  
  
-   Если `stateName` не существует <xref:System.Windows.Controls.ControlTemplate> в `control`, `false`не выполняет никаких действий и возвращает. <xref:System.Windows.VisualStateManager.GoToState%2A>  
  
 Вы можете реализовать собственный <xref:System.Windows.VisualStateManager> интерфейс, чтобы предоставить другую логику для перехода между состояниями. Например, можно изменить логику, описанную выше, или логику для перехода между типами пользовательских анимаций.  Чтобы реализовать <xref:System.Windows.VisualStateManager>, создайте класс, наследующий от <xref:System.Windows.VisualStateManager> и переопределяющий <xref:System.Windows.VisualStateManager.GoToStateCore%2A> метод. Чтобы использовать пользовательский класс, задайте <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> для свойства объект пользовательского типа.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Объект, на котором произошло событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" />.</param>
        <param name="oldState">Состояние, из которого переходит элемент управления.</param>
        <param name="newState">Состояние, в которое переходит элемент управления.</param>
        <param name="control">Элемент управления, переходящий из одного состояния в другое.</param>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Порождает событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> на заданном объекте <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если для элемента управления задано <xref:System.Windows.Controls.ControlTemplate> значение, `control` для параметра задается элемент управления, которому принадлежит  <xref:System.Windows.Controls.ControlTemplate> .  <xref:System.Windows.VisualStateGroup>  `control` `null` `stateGroupsRoot` Если задано значение <xref:System.Windows.FrameworkElement>для, то параметр имеет значение, и следует использовать аргумент. <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> — <see langword="null" />.  
  
-или- 
 <paramref name="newState" /> — <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> в производном классе обязательно вызовите <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> метод базового класса, чтобы зарегистрированные делегаты получили событие.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Объект, на котором произошло событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" />.</param>
        <param name="oldState">Состояние, из которого переходит элемент управления.</param>
        <param name="newState">Состояние, в которое переходит элемент управления.</param>
        <param name="control">Элемент управления, переходящий из одного состояния в другое.</param>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Порождает событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> на заданном объекте <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если для элемента управления задано <xref:System.Windows.Controls.ControlTemplate> значение, `control` для параметра задается элемент управления, которому принадлежит  <xref:System.Windows.Controls.ControlTemplate> .  <xref:System.Windows.VisualStateGroup>  `control` `null` `stateGroupsRoot` Если задано значение <xref:System.Windows.FrameworkElement>для, то параметр имеет значение, и следует использовать аргумент. <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateGroupsRoot" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="newState" /> — <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> в производном классе обязательно вызовите <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> метод базового класса, чтобы зарегистрированные делегаты получили событие.</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, для которого устанавливается свойство.</param>
        <param name="value">Диспетчер визуальных состояний, который осуществляет переход между состояниями элемента управления.</param>
        <summary>Задает присоединенное свойство <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает или задает коллекцию объектов <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 Каждый <xref:System.Windows.VisualStateGroup> объект содержит <xref:System.Windows.VisualState> коллекцию объектов. Объект <xref:System.Windows.VisualState> содержит <xref:System.Windows.Media.Animation.Storyboard>  коллекцию объектов, определяющих изменение внешнего вида элемента управления, когда элемент управления находится в определенном состоянии. Например, при нажатии кнопки, когда она не нажата, <xref:System.Windows.Controls.Button> может слегка отличаться внешний вид. Два состояния, которые <xref:System.Windows.Controls.Button> соответствуют определению при нажатии (`"Pressed"`) и когда это не (`"Normal"`).  
  
 Добавление <xref:System.Windows.VisualState> в элемент управления осуществляется путем <xref:System.Windows.VisualStateManager.VisualStateGroups%2A> установки присоединенного свойства элемента управления. Вы помещаете взаимоисключающие состояния друг <xref:System.Windows.VisualStateGroup>в друга. Например, <xref:System.Windows.Controls.CheckBox> имеет два <xref:System.Windows.VisualStateGroup> объекта. Один из них содержит состояния `Normal`, `MouseOver` `Pressed`,, и `Disabled`. Другой содержит состояния, `Checked` `UnChecked`, и `Indeterminate`. `MouseOver` `UnChecked` `MouseOver` Может находиться в состоянии и в то же время, но не может находиться в состоянии и `Pressed` одновременно. <xref:System.Windows.Controls.CheckBox>  
  
 Хотя объекты можно добавлять <xref:System.Windows.VisualState> к любому элементу, они особенно полезны для того, чтобы другие могли переопределить визуальное поведение. <xref:System.Windows.Controls.Control> При создании пользовательского элемента управления, использующего <xref:System.Windows.Controls.ControlTemplate>, можно указать, к <xref:System.Windows.TemplateVisualStateAttribute> каким состояниям может принадлежать управление, добавив в его определение класса. Затем любой пользователь, создающий <xref:System.Windows.Controls.ControlTemplate> новый элемент управления, может <xref:System.Windows.VisualState> добавлять объекты в шаблон. Состояния с одинаковыми <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> принадлежат <xref:System.Windows.VisualStateGroup>к одному и тому же.  
  
 Дополнительные сведения об использовании <xref:System.Windows.VisualStateGroup> объектов <xref:System.Windows.Controls.ControlTemplate>в см. в разделе [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Дополнительные сведения о создании элементов управления, использующих <xref:System.Windows.VisualStateManager>, см. в разделе [Создание элемента управления с настраиваемым внешним видом](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
     
## Examples  
 В следующем примере создается простой <xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Button> для, который содержит один <xref:System.Windows.Controls.Grid>. <xref:System.Windows.VisualStateGroup> Он также содержит именованный `CommonStates`объект, который определяет `MouseOver` состояния `Normal` и. Также имеет значение <xref:System.Windows.VisualTransition> , которое указывает, что для изменения с зеленого на красный <xref:System.Windows.Controls.Grid> , когда пользователь наводит указатель <xref:System.Windows.Controls.Button>мыши на объект, требуется одна половина секунды. <xref:System.Windows.VisualStateGroup>  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
