<Type Name="RequestBringIntoViewEventHandler" FullName="System.Windows.RequestBringIntoViewEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2affaffb58c8ad42bd8dd92cf2c42183f7a9fa26" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64184936" /></Metadata><TypeSignature Language="C#" Value="public delegate void RequestBringIntoViewEventHandler(object sender, RequestBringIntoViewEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RequestBringIntoViewEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RequestBringIntoViewEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RequestBringIntoViewEventHandler(sender As Object, e As RequestBringIntoViewEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RequestBringIntoViewEventHandler(System::Object ^ sender, RequestBringIntoViewEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RequestBringIntoViewEventHandler = delegate of obj * RequestBringIntoViewEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RequestBringIntoViewEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Объект, к которому присоединен обработчик событий.</param>
    <param name="e">Данные события.</param>
    <summary>Представляет метод обработки перенаправленного события <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка этого события обычно доступен только в элементах, которые поддерживают прокручиваемую область, или в противном случае намеренно задать их размер отрисовки меньше, чем объединенным требуемого размера своих дочерних элементов и выполняется только с помощью намеренно обработки событие после его направил вверх в дереве элементов и был достигнут первый родительский элемент, который поддерживает прокрутки области. Существующую реализацию, обрабатывающем области прокрутки таким образом, обычно желательно для пользовательских элементов управления является <xref:System.Windows.Controls.ScrollViewer>. Если вы наследуете от <xref:System.Windows.Controls.ScrollViewer>, вы можете зарегистрировать обработчик класса для <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> и дополнять обработку базового класса события. Также следует рассмотреть использование или обработку класса, определенный классом <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> событий вместо <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType>. Кроме того при создании полностью пользовательского класса, который является производным от <xref:System.Windows.Controls.ScrollViewer>, по-прежнему можно добавить обработку путем вызова класса <xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=nameWithType> при создании экземпляра вашего класса.  Дополнительные сведения об обработке классов, см. в разделе [маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Элементы содержимого может вызвать событие, которое инициируется их содержимого узлами (через вызов метода <xref:System.Windows.FrameworkContentElement.BringIntoView%2A> и вызов <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> от узла содержимого). Аналогичным образом, вы можете запросить логическое дерево элементов можно сделать с помощью вспомогательного метода <xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=nameWithType>.  
  
 Объект <xref:System.Windows.Controls.ListBox> реализует метод родственная, но разные <xref:System.Windows.Controls.ListBox.ScrollIntoView%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.RequestBringIntoViewEventArgs" />
    <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
    <altmember cref="T:System.Windows.Controls.Primitives.ScrollBar" />
    <altmember cref="T:System.Windows.Controls.ScrollViewer" />
    <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
    <altmember cref="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
  </Docs>
</Type>