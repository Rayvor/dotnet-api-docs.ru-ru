<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a1fbc670a1b9aa9ee4ad658c1bc1ecbd1fdfa279" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75051089" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="82c6c-101">Предоставляет базовый класс для диспетчера событий, используемого в *шаблоне слабых событий*.</span><span class="sxs-lookup"><span data-stu-id="82c6c-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span></span> <span data-ttu-id="82c6c-102">Диспетчер добавляет и удаляет прослушиватели для событий (или обратных вызовов), которые также используют этот шаблон.</span><span class="sxs-lookup"><span data-stu-id="82c6c-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-103">Шаблон слабых событий обычно используется, когда источник событий имеет время существования объекта, не зависящее от прослушивателей событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="82c6c-104">Использование центральной функции диспетчеризации событий <xref:System.Windows.WeakEventManager> позволяет обработчикам прослушивателя быть собраны сборщиком мусора, даже если исходный объект сохраняется.</span><span class="sxs-lookup"><span data-stu-id="82c6c-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="82c6c-105">В отличие от этого, обычное подключение события с помощью оператора `+=` заставляет потенциально отключенный источник содержать ссылку на прослушиватели.</span><span class="sxs-lookup"><span data-stu-id="82c6c-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="82c6c-106">Это предотвращает своевременное выполнение сбора мусора для получателя.</span><span class="sxs-lookup"><span data-stu-id="82c6c-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="82c6c-107">Одна из распространенных ситуаций, когда отношения времени существования между источниками и прослушивателями должны использовать шаблон слабых событий, — это обработка событий обновления, поступающих от привязок данных.</span><span class="sxs-lookup"><span data-stu-id="82c6c-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="82c6c-108">Шаблон слабых событий также можно использовать для обратных вызовов и регулярных событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="82c6c-109">Пример настраиваемого <see cref="T:System.Windows.WeakEventManager" />см. в разделе [Шаблоны слабых событий](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="82c6c-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span></span></para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c6c-110">Инициализирует значения базового класса при использовании этого метода в качестве инициализатора конструктором производного класса.</span><span class="sxs-lookup"><span data-stu-id="82c6c-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="82c6c-111">Объект, в котором обрабатывается событие.</span><span class="sxs-lookup"><span data-stu-id="82c6c-111">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="82c6c-112">Объект <see cref="T:System.EventArgs" />, содержащий данные доставляемого события.</span><span class="sxs-lookup"><span data-stu-id="82c6c-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span></span></param>
        <summary><span data-ttu-id="82c6c-113">Доставляет управляемое событие к каждому прослушивателю.</span><span class="sxs-lookup"><span data-stu-id="82c6c-113">Delivers the event being managed to each listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-114">Вызовите метод <xref:System.Windows.WeakEventManager.DeliverEvent%2A> из обработчиков событий, которые добавляются или удаляются с помощью реализации подклассов <xref:System.Windows.WeakEventManager.StartListening%2A> и <xref:System.Windows.WeakEventManager.StopListening%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="82c6c-115">При вызове метода <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> в реализации `AddListener` класса список прослушивателей, получающих событие, хранится в базовой коллекции.</span><span class="sxs-lookup"><span data-stu-id="82c6c-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="82c6c-116">(`AddListener` не является частью контракта интерфейса или класса.</span><span class="sxs-lookup"><span data-stu-id="82c6c-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="82c6c-117">`AddListener` — это рекомендуемое имя метода класса Manager, который вызывает <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> и добавляет прослушиватели неслабых шаблонов событий для события.)</span><span class="sxs-lookup"><span data-stu-id="82c6c-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="82c6c-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> добавляет прослушиватели в один список.</span><span class="sxs-lookup"><span data-stu-id="82c6c-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="82c6c-119">Если ваша реализация диспетчера поддерживает несколько списков прослушивателей для каждого события, не используйте <xref:System.Windows.WeakEventManager.DeliverEvent%2A> или <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="82c6c-120">Вместо этого ваша реализация должна создавать собственные экземпляры <xref:System.Windows.WeakEventManager.ListenerList>, `AddListener` добавлять прослушиватели в соответствующий список, а события должны доставляться в соответствующий список прослушивателей путем вызова <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="82c6c-121">Объект, в котором обрабатывается событие.</span><span class="sxs-lookup"><span data-stu-id="82c6c-121">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="82c6c-122">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="82c6c-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <param name="list"><span data-ttu-id="82c6c-123">Предоставленный <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="82c6c-124">Доставляет управляемое событие к каждому прослушивателю из предоставленного списка.</span><span class="sxs-lookup"><span data-stu-id="82c6c-124">Delivers the event being managed to each listener in the provided list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-125">Этот метод необходим, если ваша реализация диспетчера поддерживает отдельные списки прослушивателей на основе информации, захваченной в данных события.</span><span class="sxs-lookup"><span data-stu-id="82c6c-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="82c6c-126">Если вы используете эту расширенную методику, необходимо создать и поддерживать отдельные списки в рамках реализации диспетчера, и необходимо предоставить способ добавления прослушивателей в конкретный список.</span><span class="sxs-lookup"><span data-stu-id="82c6c-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="82c6c-127">Реализация обработчика, которая прослушивает событие RAW, должна действовать в соответствии с условиями, используемым для различения списков, и доставлять событие только в соответствующий список или списки.</span><span class="sxs-lookup"><span data-stu-id="82c6c-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="82c6c-128">Тип, для которого необходимо получить <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span></span></param>
        <summary><span data-ttu-id="82c6c-129">Возвращает реализацию <see cref="T:System.Windows.WeakEventManager" />, используемую для указанного типа.</span><span class="sxs-lookup"><span data-stu-id="82c6c-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span></span></summary>
        <returns><span data-ttu-id="82c6c-130">Соответствующая реализация <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> реализации вызывают этот метод, используя переданные `managerType`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="82c6c-132">Возвращаемый <xref:System.Windows.WeakEventManager> используется в качестве отличительного отличия, который определяет, какое событие было получено, и какой закрытый обработчик класса вызывать.</span><span class="sxs-lookup"><span data-stu-id="82c6c-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-133">Отсчитываемый от нуля индекс запрошенного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-133">The zero-based index of the requested source.</span></span></param>
        <summary><span data-ttu-id="82c6c-134">Получает или задает данные, сохраняемые для указанного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-134">Gets or sets the data being stored for the specified source.</span></span></summary>
        <value><span data-ttu-id="82c6c-135">Дата, сохраняемая диспетчером для данного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-135">Data being stored by the manager for this source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-136">Производные классы могут выбирать данные и тип для хранения в этом индексаторе.</span><span class="sxs-lookup"><span data-stu-id="82c6c-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="82c6c-137">Обычно это реализуется в виде <xref:System.Windows.WeakEventManager.ListenerList>, который представляет собой список слабых ссылок на прослушиватели.</span><span class="sxs-lookup"><span data-stu-id="82c6c-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="82c6c-138">Этот тип необходимо изменить только в том случае, если тип <xref:System.Windows.WeakEventManager.ListenerList> не может содержать требуемые сведения.</span><span class="sxs-lookup"><span data-stu-id="82c6c-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="82c6c-139">В этом случае потребуется переопределить метод <xref:System.Windows.WeakEventManager.Purge%2A>, чтобы все операции очистки базового типа выполнялись правильно.</span><span class="sxs-lookup"><span data-stu-id="82c6c-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c6c-140">Возвращает новый объект для добавления прослушивателей в событие.</span><span class="sxs-lookup"><span data-stu-id="82c6c-140">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="82c6c-141">Новый объект для добавления прослушивателей в событие.</span><span class="sxs-lookup"><span data-stu-id="82c6c-141">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-142">Исходный объект, на который подписывается делегат обработчика.</span><span class="sxs-lookup"><span data-stu-id="82c6c-142">The source object that the handler delegate subscribes to.</span></span></param>
        <param name="handler"><span data-ttu-id="82c6c-143">Делегат, обрабатывающий событие, вызванное объектом <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-143">The delegate that handles the event that is raised by <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="82c6c-144">Добавляет указанный делегат в качестве обработчика событий заданного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-144">Adds the specified delegate as an event handler of the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-145">Источник, к которому прикрепляются прослушиватели.</span><span class="sxs-lookup"><span data-stu-id="82c6c-145">The source to attach listeners to.</span></span></param>
        <param name="listener"><span data-ttu-id="82c6c-146">Прослушивающий класс (который должен реализовать <see cref="T:System.Windows.IWeakEventListener" />).</span><span class="sxs-lookup"><span data-stu-id="82c6c-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="82c6c-147">Добавляет указанный прослушиватель к указанному источнику для управляемого события.</span><span class="sxs-lookup"><span data-stu-id="82c6c-147">Adds the provided listener to the provided source for the event being managed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-148">Вызывайте этот метод в классе Manager `AddListener` методы в реализациях <xref:System.Windows.WeakEventManager>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="82c6c-149">`AddListener` — это рекомендуемое имя для статического метода, определяемого в классе Manager, чтобы разрешить другим классам добавлять прослушиватель для шаблона слабых событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="82c6c-150">`AddListener` должен принимать два параметра: `source`, к которому присоединен прослушиватель, и экземпляр `listener`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="82c6c-151">Для реализации `AddListener` вызовите метод <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> в текущем диспетчере и передайте те же два параметра.</span><span class="sxs-lookup"><span data-stu-id="82c6c-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="82c6c-152">Если список прослушивателей был ранее пуст, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> вызывает метод <xref:System.Windows.WeakEventManager.StartListening%2A> внутренне, который будет вызывать конкретное переопределение <xref:System.Windows.WeakEventManager.StartListening%2A> через полиморфизм.</span><span class="sxs-lookup"><span data-stu-id="82c6c-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="82c6c-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> добавляет прослушиватели для одного внутреннего <xref:System.Windows.WeakEventManager.ListenerList> на `source`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="82c6c-154">Если ваша реализация диспетчера поддерживает несколько списков прослушивателей для каждого сочетания источника событий, не используйте <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="82c6c-155">Вместо этого ваша реализация должна создавать собственные экземпляры <xref:System.Windows.WeakEventManager.ListenerList>, `AddListener` добавлять прослушиватели в соответствующий список, а события должны доставляться в соответствующий список прослушивателей путем вызова события <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> вместо метода <xref:System.Windows.WeakEventManager.DeliverEvent%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-156">Источник для удаления из обработчика.</span><span class="sxs-lookup"><span data-stu-id="82c6c-156">The source to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="82c6c-157">Делегат для удаления из <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-157">The delegate to remove from <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="82c6c-158">Удаляет ранее добавленный обработчик из заданного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-158">Removes the previously added handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-159">Источник, из которого удаляются прослушиватели.</span><span class="sxs-lookup"><span data-stu-id="82c6c-159">The source to remove listeners from.</span></span></param>
        <param name="listener"><span data-ttu-id="82c6c-160">Прослушивающий класс (который должен реализовать <see cref="T:System.Windows.IWeakEventListener" />).</span><span class="sxs-lookup"><span data-stu-id="82c6c-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="82c6c-161">Удаляет предварительно добавленный прослушиватель из указанного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-161">Removes a previously added listener from the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-162">Вызывайте этот метод в классе Manager `RemoveListener` методы в реализациях <xref:System.Windows.WeakEventManager>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="82c6c-163">`RemoveListener` — это рекомендуемое имя для статического метода, определяемого в классе Manager, чтобы разрешить другим классам удалять прослушиватель для шаблона слабых событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="82c6c-164">`RemoveListener` должен принимать два параметра: `source`, в котором удаляется прослушиватель, и класс `listener`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="82c6c-165">Для реализации `RemoveListener` вызовите метод <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> в текущем диспетчере и передайте те же два параметра.</span><span class="sxs-lookup"><span data-stu-id="82c6c-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="82c6c-166">Если вызов <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> удаляет последний прослушиватель в списке, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> вызывает метод <xref:System.Windows.WeakEventManager.StopListening%2A> внутренне, который будет вызывать конкретное переопределение <xref:System.Windows.WeakEventManager.StopListening%2A> через полиморфизм.</span><span class="sxs-lookup"><span data-stu-id="82c6c-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="82c6c-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> удаляет прослушиватели из одного внутреннего <xref:System.Windows.WeakEventManager.ListenerList> на `source`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="82c6c-168">Если ваша реализация диспетчера поддерживает несколько списков прослушивателей для каждого сочетания источника событий, не используйте <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="82c6c-169">Вместо этого в реализации следует создавать собственные экземпляры <xref:System.Windows.WeakEventManager.ListenerList>, `RemoveListener` должны удалять прослушиватели из соответствующего списка, а события должны доставляться в соответствующий список прослушивателей путем вызова метода <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> вместо метода <xref:System.Windows.WeakEventManager.DeliverEvent%2A>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-170">Источник для прослушиваемых событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-170">The source for events being listened to.</span></span></param>
        <param name="data"><span data-ttu-id="82c6c-171">Данные для проверки.</span><span class="sxs-lookup"><span data-stu-id="82c6c-171">The data to check.</span></span> <span data-ttu-id="82c6c-172">Ожидается, что данный объект будет реализацией <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="82c6c-173">Значение <see langword="true" />, чтобы остановить прослушивание <paramref name="source" /> и полностью удалить все записи из раздела <paramref name="data" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-173"><see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</span></span></param>
        <summary><span data-ttu-id="82c6c-174">Удаляет неактивные записи прослушивателя из списка даты для предоставленного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-174">Removes inactive listener entries from the data list for the provided source.</span></span> <span data-ttu-id="82c6c-175">Возвращает значение <see langword="true" />, если некоторые записи были фактически удалены из списка.</span><span class="sxs-lookup"><span data-stu-id="82c6c-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span></span></summary>
        <returns><span data-ttu-id="82c6c-176"><see langword="true" />, если некоторые записи были фактически удалены;в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-176"><see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-177">Метод <xref:System.Windows.WeakEventManager.Purge%2A> имеет реализацию по умолчанию, которая удалит все записи, когда данные являются <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c6c-178">Если базовый тип для <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> отличается от <see cref="T:System.Windows.WeakEventManager.ListenerList" />или содержит данные за пределами <see cref="T:System.Windows.WeakEventManager.ListenerList" />, необходимо переопределить метод <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span></span> <span data-ttu-id="82c6c-179">Переопределение должно обеспечивать поведение очистки для списка альтернативных элементов типа.</span><span class="sxs-lookup"><span data-stu-id="82c6c-179">The override should provide purge behavior for the alternate type items list.</span></span> <span data-ttu-id="82c6c-180">Как правило, переопределение должно обеспечивать поведение без вызова базовой реализации.</span><span class="sxs-lookup"><span data-stu-id="82c6c-180">Generally, the override should provide behavior without calling the base implementation.</span></span> <span data-ttu-id="82c6c-181">Если определенная <see cref="T:System.Windows.WeakEventManager.ListenerList" /> по-прежнему требует очистки, вызовите <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c6c-182">Устанавливает блокировку на чтение для базовой таблицы данных и возвращает <see cref="T:System.IDisposable" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="82c6c-183">Объект, который может быть использован для блокировки членов таблицы данных и затем корректно удален с помощью конструкции <see langword="using" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-184">В производных классах запросы к таблице, содержащейся в <xref:System.Windows.WeakEventManager.Item%2A>, должны всегда встречаться в предложении `using (ReadLock) { ... }`, за исключением запросов, которые уже находятся в блокировке записи.</span><span class="sxs-lookup"><span data-stu-id="82c6c-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="82c6c-185">Эти запросы могут быть необходимы, если ваш класс поддерживает более сложную `AddListener`ную реализацию, которая требует больше данных за пределами `source` и `listener`и использует коллекцию <xref:System.Windows.WeakEventManager.Item%2A> для хранения дополнительной информации.</span><span class="sxs-lookup"><span data-stu-id="82c6c-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-186">Источник для удаления информации о прослушивателях.</span><span class="sxs-lookup"><span data-stu-id="82c6c-186">The source to remove listener information for.</span></span></param>
        <summary><span data-ttu-id="82c6c-187">Удаляет все прослушиватели для заданного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-187">Removes all listeners for the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c6c-188">Запрашивает, чтобы очистка ненужных записей из базового списка прослушивателей выполнялась в потоке с более низким приоритетом.</span><span class="sxs-lookup"><span data-stu-id="82c6c-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-189">Вызов метода <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> аналогичен вызову метода <xref:System.Windows.WeakEventManager.Purge%2A> в списке текущего диспетчера с низким приоритетом потока с параметром `purgeAll`, для которого задано значение `false`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="82c6c-190">Тип, для которого задается новый диспетчер событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-190">The type to set the new event manager.</span></span></param>
        <param name="manager"><span data-ttu-id="82c6c-191">Новый диспетчер событий.</span><span class="sxs-lookup"><span data-stu-id="82c6c-191">The new event manager.</span></span></param>
        <summary><span data-ttu-id="82c6c-192">Задает текущий диспетчер для заданного типа диспетчера.</span><span class="sxs-lookup"><span data-stu-id="82c6c-192">Sets the current manager for the specified manager type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-193">Вызовите метод <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> для инициализации диспетчера, если это требуется для вызова свойства `CurrentManager` в реализации <xref:System.Windows.WeakEventManager>.</span><span class="sxs-lookup"><span data-stu-id="82c6c-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-194">Источник, прослушивание которого необходимо начать.</span><span class="sxs-lookup"><span data-stu-id="82c6c-194">The source to begin listening on.</span></span></param>
        <summary><span data-ttu-id="82c6c-195">При переопределении в производном классе начинает прослушивать управляемые события.</span><span class="sxs-lookup"><span data-stu-id="82c6c-195">When overridden in a derived class, starts listening for the event being managed.</span></span> <span data-ttu-id="82c6c-196">После первого вызова метода <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> диспетчер должен находиться в состоянии вызова метода <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> или <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> при каждой обработке соответствующего события из указанного источника.</span><span class="sxs-lookup"><span data-stu-id="82c6c-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c6c-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> переопределения должны добавлять обработчик к предоставленному <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span></span> <span data-ttu-id="82c6c-198">Обработчик объявляется самим руководителем.</span><span class="sxs-lookup"><span data-stu-id="82c6c-198">The handler is declared by the manager itself.</span></span> <span data-ttu-id="82c6c-199">Обработчик класса не должен быть открытым, и его следует вызывать только в ответ на управляемое событие.</span><span class="sxs-lookup"><span data-stu-id="82c6c-199">The class handler should not be public, and it should only be called in response to the event being managed.</span></span> <span data-ttu-id="82c6c-200">Обработчик класса должен вызывать метод <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> или метод <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> соответствующим образом.</span><span class="sxs-lookup"><span data-stu-id="82c6c-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="82c6c-201">Источник, прослушивание которого необходимо прекратить.</span><span class="sxs-lookup"><span data-stu-id="82c6c-201">The source to stop listening on.</span></span></param>
        <summary><span data-ttu-id="82c6c-202">При переопределении в производном классе прекращает прослушивать указанный источник управляемого события.</span><span class="sxs-lookup"><span data-stu-id="82c6c-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c6c-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> реализации должны удалить обработчик класса, как добавленный методом <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span></span> <span data-ttu-id="82c6c-204">Удаление прослушивателя не должно очищать список прослушивателей.</span><span class="sxs-lookup"><span data-stu-id="82c6c-204">Removing a listener should not clear the listener list.</span></span> <span data-ttu-id="82c6c-205">Вместо этого он должен отключаться только к обработчику класса (возможно, временно).</span><span class="sxs-lookup"><span data-stu-id="82c6c-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span></span> <span data-ttu-id="82c6c-206">Для очистки всего списка можно использовать другие методы, например метод <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> с параметром <paramref name="purgeAll" />, для которого задано значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c6c-207">Устанавливает блокировку на запись для базовой таблицы данных и возвращает <see cref="T:System.IDisposable" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="82c6c-208">Объект, который может быть использован для блокировки членов таблицы данных и затем корректно удален с помощью конструкции <see langword="using" />.</span><span class="sxs-lookup"><span data-stu-id="82c6c-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c6c-209">В производных классах все изменения базовой таблицы данных должны находиться в предложении `using (WriteLock) { ... }`.</span><span class="sxs-lookup"><span data-stu-id="82c6c-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="82c6c-210">Эти изменения могут потребоваться, если класс поддерживает более сложную `AddListener`ную реализацию, которая требует больше данных, чем `source` и `listener`, и использует коллекцию <xref:System.Windows.WeakEventManager.Item%2A> для хранения дополнительной информации.</span><span class="sxs-lookup"><span data-stu-id="82c6c-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>
