<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="620ca50d7b7841b0be3d9ebb860f452ea6667928" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70679366" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="76470-101">Предоставляет связанные с событиями служебные методы, регистрирующие маршрутизируемые события для владельцев класса и добавляющие обработчики класса.</span><span class="sxs-lookup"><span data-stu-id="76470-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76470-102">Этот класс чаще всего используется для регистрации нового перенаправленного события с <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span><span class="sxs-lookup"><span data-stu-id="76470-102">This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span>  
  
 <span data-ttu-id="76470-103">Вторым наиболее распространенным [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] использованием является <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="76470-103">The second most common [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span> <span data-ttu-id="76470-104">Этот метод используется для включения обработки класса перенаправленного события в классе или присоединенного события.</span><span class="sxs-lookup"><span data-stu-id="76470-104">You use this method to enable class handling of a routed event on the class, or an attached event.</span></span> <span data-ttu-id="76470-105">Дополнительные сведения см. в разделе [Маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span><span class="sxs-lookup"><span data-stu-id="76470-105">For details, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76470-106">В следующем примере показано, как использовать этот класс для регистрации нового перенаправленного события в качестве члена класса, а также метода перенаправленного события "оболочки", переопределяющего реализации Add и Remove для [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] события.</span><span class="sxs-lookup"><span data-stu-id="76470-106">The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.</span></span>  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="76470-107">Возвращает идентификаторы для маршрутизируемых событий, зарегистрированных на системе событий.</span><span class="sxs-lookup"><span data-stu-id="76470-107">Returns identifiers for routed events that have been registered to the event system.</span></span></summary>
        <returns><span data-ttu-id="76470-108">Массив типа <see cref="T:System.Windows.RoutedEvent" />, содержащий зарегистрированные объекты.</span><span class="sxs-lookup"><span data-stu-id="76470-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76470-109">Позже <xref:System.Windows.RoutedEvent> можно будет зарегистрировать дополнительные объекты.</span><span class="sxs-lookup"><span data-stu-id="76470-109">More <xref:System.Windows.RoutedEvent> objects can be registered later.</span></span> <span data-ttu-id="76470-110">Этот метод получает моментальный снимок, и коллекция перенаправленных событий доступна для записи в течение всего времени существования приложения.</span><span class="sxs-lookup"><span data-stu-id="76470-110">This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</span></span> <span data-ttu-id="76470-111">Возвращаемая коллекция может быть достаточно большой.</span><span class="sxs-lookup"><span data-stu-id="76470-111">The collection returned might be quite large.</span></span> <span data-ttu-id="76470-112">Даже просто подсчитайте только те события, которые являются [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] частью компонента [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], число коллекций находится в больших сотнях.</span><span class="sxs-lookup"><span data-stu-id="76470-112">Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="76470-113">Тип, с которого следует начать поиск.</span><span class="sxs-lookup"><span data-stu-id="76470-113">The type to start the search with.</span></span> <span data-ttu-id="76470-114">Базовые классы включены в поиск.</span><span class="sxs-lookup"><span data-stu-id="76470-114">Base classes are included in the search.</span></span></param>
        <summary><span data-ttu-id="76470-115">Находит все идентификаторы маршрутизируемого события для событий, зарегистрированных с предоставленным типом владельца.</span><span class="sxs-lookup"><span data-stu-id="76470-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="76470-116">Массив соответствующих идентификаторов маршрутизируемого события (при обнаружении); в противном случае — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76470-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="76470-117">Регистрирует обработчик класса для определенного маршрутизируемого события.</span><span class="sxs-lookup"><span data-stu-id="76470-117">Registers a class handler for a particular routed event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType"><span data-ttu-id="76470-118">Тип класса, объявляющего обработку класса.</span><span class="sxs-lookup"><span data-stu-id="76470-118">The type of the class that is declaring class handling.</span></span></param>
        <param name="routedEvent"><span data-ttu-id="76470-119">Идентификатор маршрутизируемого события для обработки.</span><span class="sxs-lookup"><span data-stu-id="76470-119">The routed event identifier of the event to handle.</span></span></param>
        <param name="handler"><span data-ttu-id="76470-120">Ссылка на реализацию обработчика класса.</span><span class="sxs-lookup"><span data-stu-id="76470-120">A reference to the class handler implementation.</span></span></param>
        <summary><span data-ttu-id="76470-121">Регистрирует обработчик класса для определенного маршрутизируемого события.</span><span class="sxs-lookup"><span data-stu-id="76470-121">Registers a class handler for a particular routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76470-122">Обработка классов — это функция, доступная для перенаправленных событий, включая вложенные события, реализованные с помощью резервного копирования перенаправленных событий.</span><span class="sxs-lookup"><span data-stu-id="76470-122">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="76470-123">Обработчик класса похож на статический обработчик, который существует для всех экземпляров класса.</span><span class="sxs-lookup"><span data-stu-id="76470-123">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="76470-124">Поскольку обработчик является статическим, вы не можете изменять свойства экземпляра непосредственно с помощью обработчика класса, но вы можете получить доступ `sender` к экземплярам через параметр и (или) данные события.</span><span class="sxs-lookup"><span data-stu-id="76470-124">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="76470-125">Обработчики классов вызываются до обработчиков экземпляров.</span><span class="sxs-lookup"><span data-stu-id="76470-125">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="76470-126">Можно реализовать обработчик класса, который имеет поведение пометки события как обработанного.</span><span class="sxs-lookup"><span data-stu-id="76470-126">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="76470-127">Поэтому обработчики экземпляров для события, обрабатываемого классом, не вызываются, если только обработчики экземпляров не регистрируются специально для обработанных событий.</span><span class="sxs-lookup"><span data-stu-id="76470-127">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="76470-128">Многие события базового элемента предоставляют виртуальные методы обработки классов. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</span><span class="sxs-lookup"><span data-stu-id="76470-128">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="76470-129">Переопределяя эти методы в классах, которые наследуют базовые классы, можно реализовать обработку классов без вызова <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статических конструкторах.</span><span class="sxs-lookup"><span data-stu-id="76470-129">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="76470-130">Эти методы обработки класса обычно существуют для входных событий и имеют имена, начинающиеся с "on" и заканчивающиеся именем события, обрабатываемого классом.</span><span class="sxs-lookup"><span data-stu-id="76470-130">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="76470-131">Дополнительные сведения об обработке классов см. в разделе [Маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span><span class="sxs-lookup"><span data-stu-id="76470-131">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="76470-132">С помощью этой сигнатуры обработчики классов будут зарегистрированы для вызова только в ответ на необработанные события.</span><span class="sxs-lookup"><span data-stu-id="76470-132">Using this signature, class handlers will be registered to invoke only in response to unhandled events.</span></span> <span data-ttu-id="76470-133">Можно также зарегистрировать обработчики классов для вызова, даже если аргументы события помечены как обработанные с помощью <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> сигнатуры с `handledEventsToo` `true`параметром.</span><span class="sxs-lookup"><span data-stu-id="76470-133">You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76470-134">В следующем примере добавляется обработчик для <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>вызова метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="76470-134">The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType"><span data-ttu-id="76470-135">Тип класса, объявляющего обработку класса.</span><span class="sxs-lookup"><span data-stu-id="76470-135">The type of the class that is declaring class handling.</span></span></param>
        <param name="routedEvent"><span data-ttu-id="76470-136">Идентификатор маршрутизируемого события для обработки.</span><span class="sxs-lookup"><span data-stu-id="76470-136">The routed event identifier of the event to handle.</span></span></param>
        <param name="handler"><span data-ttu-id="76470-137">Ссылка на реализацию обработчика класса.</span><span class="sxs-lookup"><span data-stu-id="76470-137">A reference to the class handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="76470-138">Значение <see langword="true" /> для вызова данного обработчика класса даже если аргументы маршрутизируемого события отмечены как обработанные; значение <see langword="false" /> для сохранения метода действия по умолчанию (обработчик не будет вызываться для событий, отмеченных как обработанные).</span><span class="sxs-lookup"><span data-stu-id="76470-138"><see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span></span></param>
        <summary><span data-ttu-id="76470-139">Регистрирует обработчик класса для определенного маршрутизируемого события с возможностью обработки событий, данные событий в которых уже отмечены как обработанные.</span><span class="sxs-lookup"><span data-stu-id="76470-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76470-140">Обработка классов — это функция, доступная для перенаправленных событий, включая вложенные события, реализованные с помощью резервного копирования перенаправленных событий.</span><span class="sxs-lookup"><span data-stu-id="76470-140">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="76470-141">Обработчик класса похож на статический обработчик, который существует для всех экземпляров класса.</span><span class="sxs-lookup"><span data-stu-id="76470-141">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="76470-142">Поскольку обработчик является статическим, вы не можете изменять свойства экземпляра непосредственно с помощью обработчика класса, но вы можете получить доступ `sender` к экземплярам через параметр и (или) данные события.</span><span class="sxs-lookup"><span data-stu-id="76470-142">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="76470-143">Обработчики классов вызываются до обработчиков экземпляров.</span><span class="sxs-lookup"><span data-stu-id="76470-143">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="76470-144">Можно реализовать обработчик класса, который имеет поведение пометки события как обработанного.</span><span class="sxs-lookup"><span data-stu-id="76470-144">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="76470-145">Поэтому обработчики экземпляров для события, обрабатываемого классом, не вызываются, если только обработчики экземпляров не регистрируются специально для обработанных событий.</span><span class="sxs-lookup"><span data-stu-id="76470-145">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="76470-146">Многие события базового элемента предоставляют виртуальные методы обработки классов. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</span><span class="sxs-lookup"><span data-stu-id="76470-146">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="76470-147">Переопределяя эти методы в классах, которые наследуют базовые классы, можно реализовать обработку классов без вызова <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статических конструкторах.</span><span class="sxs-lookup"><span data-stu-id="76470-147">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="76470-148">Эти методы обработки класса обычно существуют для входных событий и имеют имена, начинающиеся с "on" и заканчивающиеся именем события, обрабатываемого классом.</span><span class="sxs-lookup"><span data-stu-id="76470-148">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="76470-149">Дополнительные сведения об обработке классов см. в разделе [Маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span><span class="sxs-lookup"><span data-stu-id="76470-149">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="76470-150">С помощью этой сигнатуры обработчики классов могут быть зарегистрированы для вызова при обработке событий `handledEventsToo` , установив `true`для параметра значение.</span><span class="sxs-lookup"><span data-stu-id="76470-150">Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`.</span></span> <span data-ttu-id="76470-151">Как правило, это следует делать только в том случае, если существует известная проблема обработки, например обработка входных данных из событий мыши или клавиатуры.</span><span class="sxs-lookup"><span data-stu-id="76470-151">Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="76470-152">Имя маршрутизируемого события.</span><span class="sxs-lookup"><span data-stu-id="76470-152">The name of the routed event.</span></span> <span data-ttu-id="76470-153">Имя должно быть уникальным для данного типа владельца и не может быть пустой строкой или иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76470-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span></span></param>
        <param name="routingStrategy"><span data-ttu-id="76470-154">Стратегия маршрутизации события как значения перечисления.</span><span class="sxs-lookup"><span data-stu-id="76470-154">The routing strategy of the event as a value of the enumeration.</span></span></param>
        <param name="handlerType"><span data-ttu-id="76470-155">Тип обработчика событий.</span><span class="sxs-lookup"><span data-stu-id="76470-155">The type of the event handler.</span></span> <span data-ttu-id="76470-156">Должен быть типом делегата. Не может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76470-156">This must be a delegate type and cannot be <see langword="null" />.</span></span></param>
        <param name="ownerType"><span data-ttu-id="76470-157">Тип класса владельца маршрутизируемого события.</span><span class="sxs-lookup"><span data-stu-id="76470-157">The owner class type of the routed event.</span></span> <span data-ttu-id="76470-158">Не может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76470-158">This cannot be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="76470-159">Регистрирует новое маршрутизируемое событие в системе событий [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="76470-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span></span></summary>
        <returns><span data-ttu-id="76470-160">Идентификатор вновь зарегистрированного маршрутизируемого события.</span><span class="sxs-lookup"><span data-stu-id="76470-160">The identifier for the newly registered routed event.</span></span> <span data-ttu-id="76470-161">Этот объект-идентификатор теперь может храниться в виде статического поля в классе и использоваться в качестве параметра для методов, присоединяющих обработчики событий к событиям.</span><span class="sxs-lookup"><span data-stu-id="76470-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span></span> <span data-ttu-id="76470-162">Идентификатор маршрутизируемого события также используется для других систем событий [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span><span class="sxs-lookup"><span data-stu-id="76470-162">The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76470-163">Используйте возвращаемое значение этого метода, чтобы создать статическое объявление для поля уникального <xref:System.Windows.RoutedEvent> идентификатора.</span><span class="sxs-lookup"><span data-stu-id="76470-163">Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field.</span></span> <span data-ttu-id="76470-164">Это поле должно храниться в типе владельца.</span><span class="sxs-lookup"><span data-stu-id="76470-164">This field should be stored within the owner type.</span></span>  
  
 <span data-ttu-id="76470-165">Существует значительное количество соглашений и рекомендаций, связанных с тем, как перенаправляемые события должны называться, регистрироваться и предоставляться в классе.</span><span class="sxs-lookup"><span data-stu-id="76470-165">There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</span></span> <span data-ttu-id="76470-166">Дополнительные сведения см. в разделе [Общие сведения о перенаправленных событиях](~/docs/framework/wpf/advanced/routed-events-overview.md).</span><span class="sxs-lookup"><span data-stu-id="76470-166">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
