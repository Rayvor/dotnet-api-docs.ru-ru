<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9af1b370002031277aba01b111b81e2ddcd5ee62" /><Meta Name="ms.sourcegitcommit" Value="9058026d5788c19bed0a767fc52b40a1eac8ebfe" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/24/2019" /><Meta Name="ms.locfileid" Value="72849195" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет связанные с событиями служебные методы, регистрирующие маршрутизируемые события для владельцев класса и добавляющие обработчики класса.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс чаще всего используется для регистрации нового перенаправленного события с <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Вторым наиболее распространенным использованием API является <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Этот метод используется для включения обработки класса перенаправленного события в классе или присоединенного события. Дополнительные сведения см. в разделе [Маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 В следующем примере показано, как использовать этот класс для регистрации нового перенаправленного события в качестве члена класса, а также метода перенаправленного события "оболочки" для переопределения реализаций Add и Remove для события [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)].  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает идентификаторы для маршрутизируемых событий, зарегистрированных на системе событий.</summary>
        <returns>Массив типа <see cref="T:System.Windows.RoutedEvent" />, содержащий зарегистрированные объекты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные <xref:System.Windows.RoutedEvent> объекты можно зарегистрировать позже. Этот метод получает моментальный снимок, и коллекция перенаправленных событий доступна для записи в течение всего времени существования приложения. Возвращаемая коллекция может быть достаточно большой. Даже просто подсчитайте события, которые являются частью [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] API, число коллекций находится в больших сотнях.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Тип, с которого следует начать поиск. Базовые классы включены в поиск.</param>
        <summary>Находит все идентификаторы маршрутизируемого события для событий, зарегистрированных с предоставленным типом владельца.</summary>
        <returns>Массив соответствующих идентификаторов маршрутизируемого события (при обнаружении); в противном случае — <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Тип класса, объявляющего обработку класса.</param>
        <param name="routedEvent">Идентификатор маршрутизируемого события для обработки.</param>
        <param name="handler">Ссылка на реализацию обработчика класса.</param>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка классов — это функция, доступная для перенаправленных событий, включая вложенные события, реализованные с помощью резервного копирования перенаправленных событий. Обработчик класса похож на статический обработчик, который существует для всех экземпляров класса. Поскольку обработчик является статическим, свойства экземпляра нельзя изменить непосредственно с помощью обработчика класса, но можно получить доступ к экземплярам с помощью параметра `sender` и (или) данных события.  
  
 Обработчики классов вызываются до обработчиков экземпляров. Можно реализовать обработчик класса, который имеет поведение пометки события как обработанного. Поэтому обработчики экземпляров для события, обрабатываемого классом, не вызываются, если только обработчики экземпляров не регистрируются специально для обработанных событий.  
  
 Многие события базового элемента [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] предоставляют виртуальные методы обработки классов. Переопределяя эти методы в классах, которые наследуют базовые классы, можно реализовать обработку класса без вызова <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статических конструкторах. Эти методы обработки класса обычно существуют для входных событий и имеют имена, начинающиеся с "on" и заканчивающиеся именем события, обрабатываемого классом.  
  
 Дополнительные сведения об обработке классов см. в разделе [Маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 С помощью этой сигнатуры обработчики классов будут зарегистрированы для вызова только в ответ на необработанные события. Кроме того, можно зарегистрировать обработчики классов для вызова, даже если аргументы события помечены как обработанные с помощью подписи <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>, для `handledEventsToo` задано значение `true`.  
  
   
  
## Examples  
 В следующем примере добавляется обработчик для <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, вызывающий <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Тип класса, объявляющего обработку класса.</param>
        <param name="routedEvent">Идентификатор маршрутизируемого события для обработки.</param>
        <param name="handler">Ссылка на реализацию обработчика класса.</param>
        <param name="handledEventsToo">Значение <see langword="true" /> для вызова данного обработчика класса даже если аргументы маршрутизируемого события отмечены как обработанные; значение <see langword="false" /> для сохранения метода действия по умолчанию (обработчик не будет вызываться для событий, отмеченных как обработанные).</param>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события с возможностью обработки событий, данные событий в которых уже отмечены как обработанные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка классов — это функция, доступная для перенаправленных событий, включая вложенные события, реализованные с помощью резервного копирования перенаправленных событий. Обработчик класса похож на статический обработчик, который существует для всех экземпляров класса. Поскольку обработчик является статическим, свойства экземпляра нельзя изменить непосредственно с помощью обработчика класса, но можно получить доступ к экземплярам с помощью параметра `sender` и (или) данных события.  
  
 Обработчики классов вызываются до обработчиков экземпляров. Можно реализовать обработчик класса, который имеет поведение пометки события как обработанного. Поэтому обработчики экземпляров для события, обрабатываемого классом, не вызываются, если только обработчики экземпляров не регистрируются специально для обработанных событий.  
  
 Многие события базового элемента [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] предоставляют виртуальные методы обработки классов. Переопределяя эти методы в классах, которые наследуют базовые классы, можно реализовать обработку класса без вызова <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статических конструкторах. Эти методы обработки класса обычно существуют для входных событий и имеют имена, начинающиеся с "on" и заканчивающиеся именем события, обрабатываемого классом.  
  
 Дополнительные сведения об обработке классов см. в разделе [Маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 С помощью этой сигнатуры обработчики классов можно зарегистрировать для вызова при обработке событий, установив для `handledEventsToo` значение `true`. Как правило, это следует делать только в том случае, если существует известная проблема обработки, например обработка входных данных из событий мыши или клавиатуры.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Имя маршрутизируемого события. Имя должно быть уникальным для данного типа владельца и не может быть пустой строкой или иметь значение <see langword="null" />.</param>
        <param name="routingStrategy">Стратегия маршрутизации события как значения перечисления.</param>
        <param name="handlerType">Тип обработчика событий. Должен быть типом делегата. Не может иметь значение <see langword="null" />.</param>
        <param name="ownerType">Тип класса владельца маршрутизируемого события. Не может иметь значение <see langword="null" />.</param>
        <summary>Регистрирует новое маршрутизируемое событие в системе событий [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Идентификатор вновь зарегистрированного маршрутизируемого события. Этот объект-идентификатор теперь может храниться в виде статического поля в классе и использоваться в качестве параметра для методов, присоединяющих обработчики событий к событиям. Идентификатор маршрутизируемого события также используется для других API систем событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте возвращаемое значение этого метода, чтобы создать статическое объявление для уникального поля идентификатора <xref:System.Windows.RoutedEvent>. Это поле должно храниться в типе владельца.  
  
 Существует значительное количество соглашений и рекомендаций, связанных с тем, как перенаправляемые события должны называться, регистрироваться и предоставляться в классе. Дополнительные сведения см. в разделе [Общие сведения о перенаправленных событиях](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
