<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd1619345cd34651d751e03baae9adcccb046992" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64186944" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет связанные с событиями служебные методы, регистрирующие маршрутизируемые события для владельцев класса и добавляющие обработчики класса.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс обычно используется для регистрации новое перенаправленное событие, с <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Второй распространенный большинство [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] используется <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Этот метод позволяет включить обработку класса перенаправленных событий в классе или присоединенного события. Дополнительные сведения см. в разделе [маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 В следующем примере показано, как этот класс используется, чтобы зарегистрировать новое перенаправленное событие как член класса, а также переопределение добавить метод-«оболочка» перенаправленное событие и удалять реализации для [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает идентификаторы для маршрутизируемых событий, зарегистрированных на системе событий.</summary>
        <returns>Массив типа <see cref="T:System.Windows.RoutedEvent" />, содержащий зарегистрированные объекты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные <xref:System.Windows.RoutedEvent> объекты могут быть зарегистрированы в более поздней версии. Этот метод получает моментальный снимок и коллекцию перенаправленных событий не защищен от записи, на протяжении всего времени существования приложения. Коллекция, возвращаемая может быть весьма большим. Даже просто подсчет событий, которые являются частью [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], коллекция не содержит сотни высокого уровня.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Тип, с которого следует начать поиск. Базовые классы включены в поиск.</param>
        <summary>Находит все идентификаторы маршрутизируемого события для событий, зарегистрированных с предоставленным типом владельца.</summary>
        <returns>Массив соответствующих идентификаторов маршрутизируемого события (при обнаружении); в противном случае — <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Тип класса, объявляющего обработку класса.</param>
        <param name="routedEvent">Идентификатор маршрутизируемого события для обработки.</param>
        <param name="handler">Ссылка на реализацию обработчика класса.</param>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка класса — это функция, которая доступна для перенаправленных событий, включая вложенные события, которые реализуются с помощью перенаправленного события. Обработчик класса подобен использовать статический обработчик, для всех экземпляров класса. Так как обработчик является статическим, нельзя изменить свойства экземпляра непосредственно с помощью обработчика класса, но вы можно получить доступ к экземплярам через `sender` параметр и/или данные события.  
  
 Обработчики классов вызываются до обработчиков экземпляров. Вы можете реализовать обработчик класса, для которого из пометить событие как обработанное. Таким образом обработчиков экземпляров для обработки класса события не вызываются до регистрации обработчиков экземпляра для обработанных событий.  
  
 Многие из [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] события базовых элементов предоставляют виртуальные методы обработки класса. Переопределив эти методы в классах, наследующих базовые классы, можно реализовать обработку без вызова класса <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статические конструкторы. Эти методы обработки класса обычно используются для входных событий и имеют имена, начинающиеся с «On» и заканчиваться имя события, который обрабатывается классом.  
  
 Дополнительные сведения об обработке классов см. в разделе [маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 С помощью данной сигнатуры, обработчики классов будет зарегистрировано для вызова только в ответ на необработанные события. Вы также можете зарегистрировать обработчики классов для вызова, даже если аргументы события помечены как обработанные, с помощью <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подпись, с помощью `handledEventsToo` присвоено `true`.  
  
   
  
## Examples  
 В следующем примере добавляется обработчик для <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, вызов <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Тип класса, объявляющего обработку класса.</param>
        <param name="routedEvent">Идентификатор маршрутизируемого события для обработки.</param>
        <param name="handler">Ссылка на реализацию обработчика класса.</param>
        <param name="handledEventsToo">Значение <see langword="true" /> для вызова данного обработчика класса даже если аргументы маршрутизируемого события отмечены как обработанные; значение <see langword="false" /> для сохранения метода действия по умолчанию (обработчик не будет вызываться для событий, отмеченных как обработанные).</param>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события с возможностью обработки событий, данные событий в которых уже отмечены как обработанные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка класса — это функция, которая доступна для перенаправленных событий, включая вложенные события, которые реализуются с помощью перенаправленного события. Обработчик класса подобен использовать статический обработчик, для всех экземпляров класса. Так как обработчик является статическим, нельзя изменить свойства экземпляра непосредственно с помощью обработчика класса, но вы можно получить доступ к экземплярам через `sender` параметр и/или данные события.  
  
 Обработчики классов вызываются до обработчиков экземпляров. Вы можете реализовать обработчик класса, для которого из пометить событие как обработанное. Таким образом обработчиков экземпляров для обработки класса события не вызываются до регистрации обработчиков экземпляра для обработанных событий.  
  
 Многие из [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] события базовых элементов предоставляют виртуальные методы обработки класса. Переопределив эти методы в классах, наследующих базовые классы, можно реализовать обработку без вызова класса <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статические конструкторы. Эти методы обработки класса обычно используются для входных событий и имеют имена, начинающиеся с «On» и заканчиваться имя события, который обрабатывается классом.  
  
 Дополнительные сведения об обработке классов см. в разделе [маркировка перенаправленных событий как обработанных и обработка классов](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 С помощью данной сигнатуры, обработчики классов могут быть зарегистрированы для вызова при обработанных событиях, задав `handledEventsToo` присвоено `true`. Как правило это следует сделать только в том случае, если имеется проблема с обработкой, который вы пытаетесь решить, таких как система ввода, обработки событий мыши или клавиатуры.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Имя маршрутизируемого события. Имя должно быть уникальным для данного типа владельца и не может быть пустой строкой или иметь значение <see langword="null" />.</param>
        <param name="routingStrategy">Стратегия маршрутизации события как значения перечисления.</param>
        <param name="handlerType">Тип обработчика событий. Должен быть типом делегата. Не может иметь значение <see langword="null" />.</param>
        <param name="ownerType">Тип класса владельца маршрутизируемого события. Он не может иметь значение <see langword="null" />.</param>
        <summary>Регистрирует новое маршрутизируемое событие в системе событий [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Идентификатор вновь зарегистрированного маршрутизируемого события. Этот объект-идентификатор теперь может храниться в виде статического поля в классе и использоваться в качестве параметра для методов, присоединяющих обработчики событий к событиям. Идентификатор маршрутизируемого события также используется для других систем событий [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте возвращаемое значение этого метода для создания статического объявления для уникальный <xref:System.Windows.RoutedEvent> поле идентификатора. Это поле следует хранить в пределах типа владельца.  
  
 Существует значительное количество условных обозначений и рекомендации, связанные с как маршрутизированные события следует с именем, зарегистрированные и предоставляется в классе. Дополнительные сведения см. в разделе [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>