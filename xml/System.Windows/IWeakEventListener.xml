<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56c23c281fad327a8782e15b932a4c0347858871" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64185579" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет поддержку прослушивания событий для классов, ожидающих получения событий через шаблон WeakEvent и <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager> (Диспетчер) пересылает события путем вызова <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> метод в классах, которые реализуют этот интерфейс, и, были добавлены в качестве прослушивателей, вызвав <xref:System.Windows.WeakEventManager> методы заранее.  
  
 Следующий шаблон WeakEvent основной причиной является после источника события времени жизни объекта, потенциально независимого от прослушивателей событий. С помощью централизованной диспетчеризации событий <xref:System.Windows.WeakEventManager> включает обработчики прослушивателей сборщику мусора собранные (или ручной очистке) даже если время жизни объекта источника выходит за пределы прослушиватели. Напротив привязка обычных событий с помощью `+=` или потенциально постоянного подключенного источника, для хранения строгую ссылку на обработчик вызывает синтаксис эквивалентного события конкретного языка. Это позволяет сборщику мусора своевременно ссылки прослушивателя.  
  
 Одна из распространенных ситуаций, где связи между источниками и прослушивателями предлагает использовать этот шаблон является обработка событий обновления, поступающих из источников для привязок данных.  
  
 Шаблон WeakEvent можно использовать для прослушивания событий, которые являются внешними по отношению к приложению. Необходимо определить <xref:System.Windows.WeakEventManager> , обеспечить прослушивания поведение в <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>и использовать <xref:System.Windows.WeakEventManager> присоединить обработчик ссылающегося вместо `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Тип объекта <see cref="T:System.Windows.WeakEventManager" />, который вызывает этот метод.</param>
        <param name="sender">Объект, в котором произошло событие.</param>
        <param name="e">Данные события.</param>
        <summary>Получает события от централизованного диспетчера событий.</summary>
        <returns><see langword="true" />, если прослушиватель обработал событие. При обработке диспетчером <see cref="T:System.Windows.WeakEventManager" /> в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] регистрация прослушивателя для события, которое он не обрабатывает, считается ошибкой. Вне зависимости от этого, метод должен вернуть <see langword="false" /> в случае получения события, которое он не может распознать или обработать.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере реализуется <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> для обеспечения поддержки шаблон WeakEvent двух гипотетических событий `ClockwiseSpin` и `CounterclockwiseSpin` каждый из которых содержит специальный <xref:System.Windows.WeakEventManager> (не показано). Такая реализация вызывает заглушки обработчиков класса для каждого поддерживаемого события, приведение данных события (в этом случае два события совместно использовать тот же тип данных `SpinEventArgs`). Реализация возвращает `false` Если полученное событие не ожидается.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Этот метод предназначен для получения всех возможных событий, где находится получателя в список прослушивателей. Особенно в том случае, если реализация для класса, который будет прослушивать несколько событий, необходимо проверить тип входящего <paramref name="managerType" /> соответствующий параметр, чтобы определить, какое событие вызова. Именно поэтому каждое событие, который должен быть частью шаблона должен иметь специальный <see cref="T:System.Windows.WeakEventManager" />. Кроме того <paramref name="e" /> параметр типизируется как Общие <see cref="T:System.EventArgs" />. Таким образом, для получения свойств из данных события, для реализации необходимо для приведения к типу данных определенного события.  
  
Как правило, после проверки того, для идентификации события в зависимости от <see cref="T:System.Windows.WeakEventManager" /> типа, реализация должна вызывать обработчик закрытый класс. Обработчик класса предположительно может быть очень же обработчика класса, который используется для обработки этого события для прослушивателей, которые добавляются с помощью стандартный шаблон добавления <see langword="+=" /> событие на стороне отправителя. В следующем разделе примере приведены примерный шаблон реализации.</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>