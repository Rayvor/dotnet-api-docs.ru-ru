<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc2e6a04492a7e98297c411356edd79396b478a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444517" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет поддержку прослушивания событий для классов, ожидающих получения событий через шаблон WeakEvent и <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Диспетчер (Dispatcher) пересылает событие, <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> вызывая метод для классов, реализующих этот интерфейс, и которые были добавлены в качестве прослушивателей путем вызова <xref:System.Windows.WeakEventManager> методов заранее. <xref:System.Windows.WeakEventManager>  
  
 Основная причина следующего шаблона WeakEvent — когда источник событий имеет время существования объекта, потенциально независимый от прослушивателей событий. Использование центрального диспетчеризации <xref:System.Windows.WeakEventManager> событий позволяет обработчикам прослушивателей собирать мусор (или удалять их вручную), даже если время существования исходного объекта выходит за пределы прослушивателей. В отличие от этого, нормальное подключение `+=` события с использованием или эквивалентным синтаксисом событий конкретного языка приводит к тому, что потенциально подключенный источник удерживает строгую ссылку на обработчики. Это позволяет своевременно собирать ссылки на прослушиватели.  
  
 Одна из распространенных ситуаций, когда отношения между источниками и прослушивателями предполагает использование этого шаблона, — обработка событий обновления, поступающих из источников для привязок данных.  
  
 Шаблон WeakEvent можно использовать для прослушивания событий, которые являются внешними для приложения. <xref:System.Windows.WeakEventManager> Для него нужно определить только для него, предоставить поведение прослушивания в <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>и использовать <xref:System.Windows.WeakEventManager> для подключения к обработчику ссылок, а не `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Тип объекта <see cref="T:System.Windows.WeakEventManager" />, который вызывает этот метод.</param>
        <param name="sender">Объект, в котором произошло событие.</param>
        <param name="e">Данные события.</param>
        <summary>Получает события от централизованного диспетчера событий.</summary>
        <returns><see langword="true" />, если прослушиватель обработал событие. При обработке диспетчером <see cref="T:System.Windows.WeakEventManager" /> в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] регистрация прослушивателя для события, которое он не обрабатывает, считается ошибкой. Вне зависимости от этого, метод должен вернуть <see langword="false" /> в случае получения события, которое он не может распознать или обработать.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> реализуется поддержка шаблона WeakEvent для двух гипотетических `CounterclockwiseSpin` событий `ClockwiseSpin` , каждый из которых имеет выделенный <xref:System.Windows.WeakEventManager> (не показанный). Эта реализация вызывает заглушки обработчика для каждого поддерживаемого события, приведя данные события (в данном случае два события совместно используют тип `SpinEventArgs`данных события). Реализация возвращает `false` значение, если полученное событие не является ожидаемым.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Этот метод предназначен для получения всех возможных событий, в которых получатель находится в списке прослушивателей. Особенно если реализация для класса, ожидающего более одного события, необходимо проверить тип входящего <paramref name="managerType" /> параметра, чтобы узнать, к какому событию относится вызов. Именно поэтому каждое событие, которое должно быть частью шаблона, должен иметь выделенный <see cref="T:System.Windows.WeakEventManager" />объект. Кроме того, <paramref name="e" /> параметр типизирован как общий. <see cref="T:System.EventArgs" /> Таким образом, чтобы получить все определенные свойства из данных события, необходимо привести реализацию к конкретному типу данных события.  
  
Как правило, после проверки удостоверения события на основе <see cref="T:System.Windows.WeakEventManager" /> типа реализация должна вызывать закрытый обработчик класса. Ваш обработчик класса может быть одним и тем же обработчиком класса, который используется для обработки этого события для прослушивателей, добавленных с помощью стандартного шаблона событий для <see langword="+=" /> добавления через событие отправителя. В следующем примере описывается пример шаблона реализации.</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
