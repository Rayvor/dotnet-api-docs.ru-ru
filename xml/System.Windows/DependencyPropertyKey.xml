<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61f0be29cf151e08d249cb070c9ffec96ecb1f41" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70461550" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет идентификатор свойства зависимостей для ограниченного доступа на запись к доступному только для чтения свойству зависимостей.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey>экземпляры получаются как возвращаемое значение вызова регистрации свойства зависимостей с помощью методов <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> или. <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>  
  
 Типы, регистрирующие свойство зависимостей, могут использовать <xref:System.Windows.DependencyPropertyKey> в <xref:System.Windows.DependencyObject.SetValue%2A> вызовах и <xref:System.Windows.DependencyObject.ClearValue%2A> , которые корректируют значение свойства как часть логики класса. Если это разрешено уровнем доступа ключа, то связанные классы могут использовать ключ и свойство зависимостей также. Например, можно объявить ключ как внутренний, а другие типы в той же сборке также могут установить это свойство зависимостей.  
  
 <xref:System.Windows.DependencyPropertyKey> Регистрация свойства зависимостей, доступного только для чтения, не должна быть сделана открытой, поскольку предоставление ключа делает свойство настраиваемым, тем самым отменяя точку его регистрации как свойство зависимостей только для чтения. Кроме того, предоставление ключа вызывает несоответствие между доступными поведениями свойств зависимости и [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] реализацией оболочки свойств, что является неправильной конструкцией класса.  
  
 Вместо доступа к самому ключу вместо <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> него следует предоставить значение в <xref:System.Windows.DependencyPropertyKey> качестве `public static readonly` <xref:System.Windows.DependencyProperty> значения в классе. Это позволяет свойству возвращать допустимый идентификатор свойства зависимости для определенных операций системы свойств, таких как перечисление локально заданных значений. Тем не менее, полученный идентификатор не имеет полных возможностей <xref:System.Windows.DependencyProperty> для многих операций системы свойств.  
  
   
  
## Examples  
 В следующем примере регистрируется свойство зависимостей только для чтения, а также используется ключ для двух целей в других членах класса: реализация программы-оболочки Get и идентификатор для операции защищенного определения, которая задает значение на основе вычислений. других значений свойств.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификатор свойства зависимостей, связанный с данным специализированным идентификатором доступного только для чтения свойства зависимостей.</summary>
        <value>Соответствующий идентификатор свойства зависимостей.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> значение позволяет идентификатору свойства, доступного только для чтения, участвовать в общих операциях системы свойств с помощью некоторых интерфейсов, используемых для свойств зависимостей для чтения и записи.  
  
 Чтобы реализовать метод доступа get к свойству зависимостей только для чтения, необходимо создать и предоставить <xref:System.Windows.DependencyProperty> идентификатор для класса. Это служит двум целям:  
  
-   Вашему классу требуется идентификатор <xref:System.Windows.DependencyProperty> , чтобы реализовать метод доступа get для оболочки свойства. Используйте в <xref:System.Windows.DependencyProperty> качестве параметра <xref:System.Windows.DependencyObject.GetValue%2A> для вызова, который реализует метод доступа get.  
  
-   <xref:System.Windows.DependencyProperty>Идентификаторы предоставляют свойству зависимостей систему свойств, так что другие методы, использующие метаданные, могут получить доступ к нему в стандартной форме. Например, если вы вызывали <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> для некоторых <xref:System.Windows.DependencyObject> и получили перечисление локально заданных свойств (значения и идентификаторы), идентификатор, возвращаемый для свойства <xref:System.Windows.DependencyProperty> зависимостей только для чтения, будет иметь значение, а не ключ. Отсутствие доступа к <xref:System.Windows.DependencyProperty> идентификатору не повышает безопасность свойства зависимостей, доступного только для чтения. это просто делает операции, которые используют свойство, более неудобными как для последующих производных классов, так и для экземпляров классов.  
  
 Чтобы предоставить <xref:System.Windows.DependencyProperty> идентификатор вашему классу, вы напрямую вызываете <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> ключ. Это значение используется для создания `public static readonly` <xref:System.Windows.DependencyProperty> идентификатора класса <xref:System.Windows.DependencyPropertyKey>, который параллельет.  
  
   
  
## Examples  
 В следующем <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> примере вызывается метод для <xref:System.Windows.DependencyProperty> предоставления `AquariumGraphic` идентификатора`AquariumGraphicProperty`() для свойства зависимостей только для чтения в классе. В примере также показано <xref:System.Windows.DependencyPropertyKey> создание (как внутреннего элемента) и метод доступа get для. `AquariumGraphic`  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Тип, в котором существует данное свойство зависимостей и следует переопределить метаданные.</param>
        <param name="typeMetadata">Метаданные, переданные для этого типа.</param>
        <summary>Переопределяет метаданные доступного только для чтения свойства зависимостей, представленного данным идентификатором свойства зависимостей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Переопределение метаданных в свойстве зависимостей только для чтения выполняется по тем же причинам, что и переопределение метаданных в свойстве зависимости для чтения и записи, и доступ к нему ограничен, поскольку поведение, заданное в метаданных, может изменить поведение набора ( значение по умолчанию, например).  
  
 Как и в случае со свойствами зависимостей для чтения и записи, переопределение метаданных в свойстве зависимостей, доступном только для чтения, должно быть выполнено только до того, как это свойство будет помещено системой свойств (это соответствует времени, в течение которого определенные экземпляры объектов, регистрирующие создается экземпляр свойства). Вызовы должны выполняться только в статических конструкторах типа, который предоставляет себя `forType` как параметр этого метода, или эквивалентную инициализацию для этого класса. <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>  
  
 Этот метод эффективно пересылает <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> методу, <xref:System.Windows.DependencyPropertyKey> передавая экземпляр в качестве параметра ключа.  
  
   
  
## Examples  
 В следующем примере метаданные переопределяются для существующего свойства зависимостей только для чтения, наследуемого классом. В этом случае цель сценария — добавить обратный вызов приводимого значения, который не имелся в метаданных базового свойства. Можно также переопределить метаданные по любой другой причине, когда обычно подходящим переопределением метаданных (изменение значения по умолчанию, <xref:System.Windows.FrameworkPropertyMetadataOptions> добавление значений и т. д.).  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Попытка переопределения метаданных в доступном для чтения и записи свойстве зависимостей (не может быть осуществлена с помощью данной сигнатуры).</exception>
        <exception cref="T:System.ArgumentException">Метаданные уже были установлены для свойства, так как они существуют в указанном типе.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
