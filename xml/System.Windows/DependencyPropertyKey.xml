<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d75f53c5f064e0cd1a345a7c3787221dbc49ccdb" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64187347" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет идентификатор свойства зависимостей для ограниченного доступа на запись к доступному только для чтения свойству зависимостей.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> экземпляры получаются как возвращаемое значение вызова регистрации свойства зависимостей, с помощью методов <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> или <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Можно использовать типы, регистрируется свойство зависимости <xref:System.Windows.DependencyPropertyKey> в вызовах <xref:System.Windows.DependencyObject.SetValue%2A> и <xref:System.Windows.DependencyObject.ClearValue%2A> , измените значение свойства как часть логики класса. Если разрешено уровнем доступа ключа, связанные классы можно также использовать ключ и свойства зависимостей. Например можно объявить ключ внутренним и другим типам в той же сборке может также задать это свойство зависимостей.  
  
 <xref:System.Windows.DependencyPropertyKey> Возвращаются зависимости только для чтения регистрации свойства нельзя делать открытым, так как открытие ключа делает свойство настраиваемым, подрывая смысл его регистрации в качестве свойства зависимости только для чтения. Кроме того, открытие ключа приводит к возникновению рассогласования доступных зависимость поведения свойства и его [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] реализации оболочки свойства, которые имеет недопустимый класс конструктора.  
  
 Вместо предоставления самого ключа, вместо этого следует предоставлять <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> значение <xref:System.Windows.DependencyPropertyKey> как `public static readonly` <xref:System.Windows.DependencyProperty> в классе. Это позволяет возвращать допустимый идентификатор свойства зависимостей для определенных операций системы свойств, таких как отображение локально установленные значения свойства. Тем не менее, поэтому полученный идентификатор не поддерживает все возможности <xref:System.Windows.DependencyProperty> для многих операций системы свойств.  
  
   
  
## Examples  
 В следующем примере регистрирует свойство зависимостей только для чтения и также использует ключ для двух целей в других членах класса: реализация «оболочки» get и как идентификатор для защищенной операции определения, задающее значение на основе вычислений значений других свойств.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификатор свойства зависимостей, связанный с данным специализированным идентификатором доступного только для чтения свойства зависимостей.</summary>
        <value>Соответствующий идентификатор свойства зависимостей.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Значение включает идентификатор свойство только для чтения участвовать в стандартных операций системы свойств, используя некоторые из тех же интерфейсов в качестве используемых для свойств зависимостей чтения и записи.  
  
 Чтобы реализовать метод доступа get свойства для свойства зависимостей только для чтения, следует создать и представить <xref:System.Windows.DependencyProperty> идентификатор для класса. Это служит двум целям:  
  
-   Потребностей класс <xref:System.Windows.DependencyProperty> идентификатор, чтобы реализовать метод доступа get для свойства оболочки. Использовании <xref:System.Windows.DependencyProperty> как параметр для <xref:System.Windows.DependencyObject.GetValue%2A> вызов, который реализует метод доступа get.  
  
-   <xref:System.Windows.DependencyProperty> Идентификаторы предоставляют свойство зависимости в системе свойств таким образом, чтобы другие методы, основанные на метаданных доступен в стандартную форму. К примеру Если вызван <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> на некоторых <xref:System.Windows.DependencyObject> и получить идентификатор перечисления локально заданных свойств (значения и идентификаторы), возвращенный для свойства зависимостей только для чтения может быть ваш <xref:System.Windows.DependencyProperty> преимущества, а не ключ. Отсутствие прямого доступа к <xref:System.Windows.DependencyProperty> идентификатор повышает безопасность свойства зависимостей только для чтения любым способом, он просто выполняет операции, включающие свойство менее удобны для последующих производных классов и экземпляров классов.  
  
 Для предоставления <xref:System.Windows.DependencyProperty> идентификатор для класса, вы вызываете <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> непосредственно на ваш ключ. Это значение используется для создания `public static readonly` <xref:System.Windows.DependencyProperty> идентификатор на класс, который соответствует <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> для предоставления <xref:System.Windows.DependencyProperty> идентификатор (`AquariumGraphicProperty`) для `AquariumGraphic` зависимостей только для чтения свойство класса. В примере также показано <xref:System.Windows.DependencyPropertyKey> создания (как внутренний элемент) и метод доступа get для `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Тип, в котором существует данное свойство зависимостей и следует переопределить метаданные.</param>
        <param name="typeMetadata">Метаданные, переданные для этого типа.</param>
        <summary>Переопределяет метаданные доступного только для чтения свойства зависимостей, представленного данным идентификатором свойства зависимостей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Переопределение метаданных свойства зависимости только для чтения выполняется по тем же причинам, что переопределение метаданных свойства зависимости для чтения и записи, а также ограничен доступ на уровне ключей, так как поведения, указанные в метаданных можно изменить поведение набора ( значение по умолчанию, например).  
  
 Как с помощью свойства зависимости для чтения и записи, переопределение метаданных свойства зависимости только для чтения следует делать только до того, как свойство используется системой свойств (это равно времени, определенные экземпляры объектов, регистрирующие Свойство создаются экземпляры). Вызовы <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> следует выполнять только в статических конструкторах типа, предоставляющего себя в качестве `forType` параметр этого метода или эквивалентные инициализации для этого класса.  
  
 Этот метод фактически передает <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> , передавая <xref:System.Windows.DependencyPropertyKey> экземпляр в качестве параметра ключа.  
  
   
  
## Examples  
 В приведенном ниже примере переопределяются метаданные для существующего свойства зависимости только для чтения, наследующий класс. В этом случае целью сценария было Добавление принудительного обратного вызова значения, но не имеют метаданных базового свойства. Можно также переопределить метаданные для любой из других причин, которые обычно переопределения метаданных является подходят (изменение значения по умолчанию, добавление <xref:System.Windows.FrameworkPropertyMetadataOptions> значений и т. д.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Попытка переопределения метаданных в доступном для чтения и записи свойстве зависимостей (не может быть осуществлена с помощью данной сигнатуры).</exception>
        <exception cref="T:System.ArgumentException">Метаданные уже были установлены для свойства, так как они существуют в указанном типе.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>