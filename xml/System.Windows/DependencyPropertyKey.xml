<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61f0be29cf151e08d249cb070c9ffec96ecb1f41" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70461550" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c0084-101">Предоставляет идентификатор свойства зависимостей для ограниченного доступа на запись к доступному только для чтения свойству зависимостей.</span><span class="sxs-lookup"><span data-stu-id="c0084-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0084-102"><xref:System.Windows.DependencyPropertyKey>экземпляры получаются как возвращаемое значение вызова регистрации свойства зависимостей с помощью методов <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> или. <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A></span><span class="sxs-lookup"><span data-stu-id="c0084-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="c0084-103">Типы, регистрирующие свойство зависимостей, могут использовать <xref:System.Windows.DependencyPropertyKey> в <xref:System.Windows.DependencyObject.SetValue%2A> вызовах и <xref:System.Windows.DependencyObject.ClearValue%2A> , которые корректируют значение свойства как часть логики класса.</span><span class="sxs-lookup"><span data-stu-id="c0084-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="c0084-104">Если это разрешено уровнем доступа ключа, то связанные классы могут использовать ключ и свойство зависимостей также.</span><span class="sxs-lookup"><span data-stu-id="c0084-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="c0084-105">Например, можно объявить ключ как внутренний, а другие типы в той же сборке также могут установить это свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="c0084-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="c0084-106"><xref:System.Windows.DependencyPropertyKey> Регистрация свойства зависимостей, доступного только для чтения, не должна быть сделана открытой, поскольку предоставление ключа делает свойство настраиваемым, тем самым отменяя точку его регистрации как свойство зависимостей только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c0084-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="c0084-107">Кроме того, предоставление ключа вызывает несоответствие между доступными поведениями свойств зависимости и [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] реализацией оболочки свойств, что является неправильной конструкцией класса.</span><span class="sxs-lookup"><span data-stu-id="c0084-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="c0084-108">Вместо доступа к самому ключу вместо <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> него следует предоставить значение в <xref:System.Windows.DependencyPropertyKey> качестве `public static readonly` <xref:System.Windows.DependencyProperty> значения в классе.</span><span class="sxs-lookup"><span data-stu-id="c0084-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="c0084-109">Это позволяет свойству возвращать допустимый идентификатор свойства зависимости для определенных операций системы свойств, таких как перечисление локально заданных значений.</span><span class="sxs-lookup"><span data-stu-id="c0084-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="c0084-110">Тем не менее, полученный идентификатор не имеет полных возможностей <xref:System.Windows.DependencyProperty> для многих операций системы свойств.</span><span class="sxs-lookup"><span data-stu-id="c0084-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0084-111">В следующем примере регистрируется свойство зависимостей только для чтения, а также используется ключ для двух целей в других членах класса: реализация программы-оболочки Get и идентификатор для операции защищенного определения, которая задает значение на основе вычислений. других значений свойств.</span><span class="sxs-lookup"><span data-stu-id="c0084-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0084-112">Возвращает идентификатор свойства зависимостей, связанный с данным специализированным идентификатором доступного только для чтения свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="c0084-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span></span></summary>
        <value><span data-ttu-id="c0084-113">Соответствующий идентификатор свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="c0084-113">The relevant dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0084-114">Это <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> значение позволяет идентификатору свойства, доступного только для чтения, участвовать в общих операциях системы свойств с помощью некоторых интерфейсов, используемых для свойств зависимостей для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="c0084-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="c0084-115">Чтобы реализовать метод доступа get к свойству зависимостей только для чтения, необходимо создать и предоставить <xref:System.Windows.DependencyProperty> идентификатор для класса.</span><span class="sxs-lookup"><span data-stu-id="c0084-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="c0084-116">Это служит двум целям:</span><span class="sxs-lookup"><span data-stu-id="c0084-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="c0084-117">Вашему классу требуется идентификатор <xref:System.Windows.DependencyProperty> , чтобы реализовать метод доступа get для оболочки свойства.</span><span class="sxs-lookup"><span data-stu-id="c0084-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="c0084-118">Используйте в <xref:System.Windows.DependencyProperty> качестве параметра <xref:System.Windows.DependencyObject.GetValue%2A> для вызова, который реализует метод доступа get.</span><span class="sxs-lookup"><span data-stu-id="c0084-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="c0084-119"><xref:System.Windows.DependencyProperty>Идентификаторы предоставляют свойству зависимостей систему свойств, так что другие методы, использующие метаданные, могут получить доступ к нему в стандартной форме.</span><span class="sxs-lookup"><span data-stu-id="c0084-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="c0084-120">Например, если вы вызывали <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> для некоторых <xref:System.Windows.DependencyObject> и получили перечисление локально заданных свойств (значения и идентификаторы), идентификатор, возвращаемый для свойства <xref:System.Windows.DependencyProperty> зависимостей только для чтения, будет иметь значение, а не ключ.</span><span class="sxs-lookup"><span data-stu-id="c0084-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="c0084-121">Отсутствие доступа к <xref:System.Windows.DependencyProperty> идентификатору не повышает безопасность свойства зависимостей, доступного только для чтения. это просто делает операции, которые используют свойство, более неудобными как для последующих производных классов, так и для экземпляров классов.</span><span class="sxs-lookup"><span data-stu-id="c0084-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="c0084-122">Чтобы предоставить <xref:System.Windows.DependencyProperty> идентификатор вашему классу, вы напрямую вызываете <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> ключ.</span><span class="sxs-lookup"><span data-stu-id="c0084-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="c0084-123">Это значение используется для создания `public static readonly` <xref:System.Windows.DependencyProperty> идентификатора класса <xref:System.Windows.DependencyPropertyKey>, который параллельет.</span><span class="sxs-lookup"><span data-stu-id="c0084-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0084-124">В следующем <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> примере вызывается метод для <xref:System.Windows.DependencyProperty> предоставления `AquariumGraphic` идентификатора`AquariumGraphicProperty`() для свойства зависимостей только для чтения в классе.</span><span class="sxs-lookup"><span data-stu-id="c0084-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="c0084-125">В примере также показано <xref:System.Windows.DependencyPropertyKey> создание (как внутреннего элемента) и метод доступа get для. `AquariumGraphic`</span><span class="sxs-lookup"><span data-stu-id="c0084-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="c0084-126">Тип, в котором существует данное свойство зависимостей и следует переопределить метаданные.</span><span class="sxs-lookup"><span data-stu-id="c0084-126">The type on which this dependency property exists and metadata should be overridden.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="c0084-127">Метаданные, переданные для этого типа.</span><span class="sxs-lookup"><span data-stu-id="c0084-127">Metadata supplied for this type.</span></span></param>
        <summary><span data-ttu-id="c0084-128">Переопределяет метаданные доступного только для чтения свойства зависимостей, представленного данным идентификатором свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="c0084-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0084-129">Переопределение метаданных в свойстве зависимостей только для чтения выполняется по тем же причинам, что и переопределение метаданных в свойстве зависимости для чтения и записи, и доступ к нему ограничен, поскольку поведение, заданное в метаданных, может изменить поведение набора ( значение по умолчанию, например).</span><span class="sxs-lookup"><span data-stu-id="c0084-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="c0084-130">Как и в случае со свойствами зависимостей для чтения и записи, переопределение метаданных в свойстве зависимостей, доступном только для чтения, должно быть выполнено только до того, как это свойство будет помещено системой свойств (это соответствует времени, в течение которого определенные экземпляры объектов, регистрирующие создается экземпляр свойства).</span><span class="sxs-lookup"><span data-stu-id="c0084-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="c0084-131">Вызовы должны выполняться только в статических конструкторах типа, который предоставляет себя `forType` как параметр этого метода, или эквивалентную инициализацию для этого класса. <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="c0084-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="c0084-132">Этот метод эффективно пересылает <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> методу, <xref:System.Windows.DependencyPropertyKey> передавая экземпляр в качестве параметра ключа.</span><span class="sxs-lookup"><span data-stu-id="c0084-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0084-133">В следующем примере метаданные переопределяются для существующего свойства зависимостей только для чтения, наследуемого классом.</span><span class="sxs-lookup"><span data-stu-id="c0084-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="c0084-134">В этом случае цель сценария — добавить обратный вызов приводимого значения, который не имелся в метаданных базового свойства.</span><span class="sxs-lookup"><span data-stu-id="c0084-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="c0084-135">Можно также переопределить метаданные по любой другой причине, когда обычно подходящим переопределением метаданных (изменение значения по умолчанию, <xref:System.Windows.FrameworkPropertyMetadataOptions> добавление значений и т. д.).</span><span class="sxs-lookup"><span data-stu-id="c0084-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c0084-136">Попытка переопределения метаданных в доступном для чтения и записи свойстве зависимостей (не может быть осуществлена с помощью данной сигнатуры).</span><span class="sxs-lookup"><span data-stu-id="c0084-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c0084-137">Метаданные уже были установлены для свойства, так как они существуют в указанном типе.</span><span class="sxs-lookup"><span data-stu-id="c0084-137">Metadata was already established for the property as it exists on the provided type.</span></span></exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
