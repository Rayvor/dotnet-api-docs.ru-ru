<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba99bda134572e938946c434092cc0e4d72af0a5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434249" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="23438-101">Сообщает или применяет метаданные для свойства зависимостей, добавляя характеристики системы свойств, специфичные для платформы.</span><span class="sxs-lookup"><span data-stu-id="23438-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-102">Этот класс является производным <xref:System.Windows.PropertyMetadata> от ( <xref:System.Windows.UIPropertyMetadata>с до).</span><span class="sxs-lookup"><span data-stu-id="23438-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="23438-103">Для большинства целей <xref:System.Windows.FrameworkPropertyMetadata> разработки приложений на уровне среды WPF — это тип, используемый для метаданных свойств зависимостей, а не базовых типов <xref:System.Windows.PropertyMetadata> метаданных или <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="23438-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="23438-104">Это справедливо и для существующих свойств зависимостей, и для большинства сценариев настраиваемых свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="23438-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="23438-105">Члены, объявленные этим классом, дополняют <xref:System.Windows.PropertyMetadata> базовый класс, включают различные логические свойства, указывающие поведение системы свойств на уровне платформы WPF, например наследование свойств, привязку данных и макет.</span><span class="sxs-lookup"><span data-stu-id="23438-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="23438-106">Несколько подписей конструктора для создания <xref:System.Windows.FrameworkPropertyMetadata> экземпляра <xref:System.Windows.FrameworkPropertyMetadataOptions> принимают параметр.</span><span class="sxs-lookup"><span data-stu-id="23438-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="23438-107">Перечисление используется только для указания начального поведения в конструкторе и не является открытым иным образом после <xref:System.Windows.FrameworkPropertyMetadata>создания. <xref:System.Windows.FrameworkPropertyMetadataOptions></span><span class="sxs-lookup"><span data-stu-id="23438-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="23438-108">Из сконструированного экземпляра можно получить или задать соответствующие сведения с помощью различных свойств, которые совместно используют имена значений перечисления, используемых при вызове конструктора.</span><span class="sxs-lookup"><span data-stu-id="23438-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-109">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-109">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-110">Этот класс обычно не используется в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-111">В следующем примере показано получение метаданных для свойства зависимости определенного владельца в качестве первоначального базового <xref:System.Windows.PropertyMetadata> типа.</span><span class="sxs-lookup"><span data-stu-id="23438-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="23438-112">Эти метаданные приводятся <xref:System.Windows.FrameworkPropertyMetadata>к типу.</span><span class="sxs-lookup"><span data-stu-id="23438-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="23438-113">Если приведение вернуло допустимое <xref:System.Windows.FrameworkPropertyMetadata>значение, то различные <xref:System.Windows.FrameworkPropertyMetadata> значения свойств передаются через простой пользовательский интерфейс (не показано).</span><span class="sxs-lookup"><span data-stu-id="23438-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="23438-114">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="23438-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23438-115">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="23438-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-116">Эта подпись инициализирует все значения <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> свойств по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="23438-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>будет иметь `null`значение, а различные <xref:System.Windows.FrameworkPropertyMetadata> логические свойства будут `false`.</span><span class="sxs-lookup"><span data-stu-id="23438-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-118">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span><span class="sxs-lookup"><span data-stu-id="23438-118">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <summary><span data-ttu-id="23438-119">Выполняет инициализацию нового экземпляра класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с заданным по умолчанию значением.</span><span class="sxs-lookup"><span data-stu-id="23438-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-120">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-121">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-122">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-123">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-124">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-125">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-125"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-126">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="23438-127">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным ответом <see cref="T:System.Windows.PropertyChangedCallback" />.</span><span class="sxs-lookup"><span data-stu-id="23438-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="23438-128">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-129">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span><span class="sxs-lookup"><span data-stu-id="23438-129">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="23438-130">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="23438-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="23438-131">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span><span class="sxs-lookup"><span data-stu-id="23438-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <summary><span data-ttu-id="23438-132">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию и параметрами метаданных уровня платформы.</span><span class="sxs-lookup"><span data-stu-id="23438-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-133">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-134">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-135">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-136">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="23438-137">Значения, помеченные как флаги `flags` Set в параметре, будут задавать <xref:System.Windows.FrameworkPropertyMetadata> логические значения свойств, <xref:System.Windows.FrameworkPropertyMetadataOptions> соответствующих имени `true`этого флага.</span><span class="sxs-lookup"><span data-stu-id="23438-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="23438-138">Впоследствии можно изменить значения свойств в метаданных при условии, что метаданные еще не были применены к определенной операции системы свойств.</span><span class="sxs-lookup"><span data-stu-id="23438-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-139">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-140">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-140"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-141">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span><span class="sxs-lookup"><span data-stu-id="23438-141">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-142">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="23438-143">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с заданными значением по умолчанию и ответом <see cref="T:System.Windows.PropertyChangedCallback" />.</span><span class="sxs-lookup"><span data-stu-id="23438-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-144">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-145">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-146">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-147">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-148">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-149">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-149"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-150">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="23438-151">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> для данного свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="23438-152">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанными ответами.</span><span class="sxs-lookup"><span data-stu-id="23438-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-153">Эта реализация вызывает базовый инициализатор, а затем добавляет `coerceValueCallback` , задавая свойство для базового экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-154">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-155">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span><span class="sxs-lookup"><span data-stu-id="23438-155">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="23438-156">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="23438-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="23438-157">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span><span class="sxs-lookup"><span data-stu-id="23438-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-158">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="23438-159">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию, параметрами метаданных платформы и ответами <see cref="T:System.Windows.PropertyChangedCallback" />.</span><span class="sxs-lookup"><span data-stu-id="23438-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-160">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-161">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-162">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-163">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="23438-164">Значения, помеченные как флаги `flags` Set в параметре, будут задавать <xref:System.Windows.FrameworkPropertyMetadata> логические значения свойств, <xref:System.Windows.FrameworkPropertyMetadataOptions> соответствующих имени `true`этого флага.</span><span class="sxs-lookup"><span data-stu-id="23438-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="23438-165">Можно по-прежнему изменять значения свойств в метаданных, если метаданные еще не были применены к определенной операции системы свойств.</span><span class="sxs-lookup"><span data-stu-id="23438-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-166">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-167">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-167"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-168">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span><span class="sxs-lookup"><span data-stu-id="23438-168">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-169">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="23438-170">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> для данного свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="23438-171">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с заданными значением по умолчанию и ответами.</span><span class="sxs-lookup"><span data-stu-id="23438-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-172">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-173">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-174">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-175">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-176">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-177">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-177"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-178">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span><span class="sxs-lookup"><span data-stu-id="23438-178">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="23438-179">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="23438-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="23438-180">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span><span class="sxs-lookup"><span data-stu-id="23438-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-181">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="23438-182">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> против данного свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <summary><span data-ttu-id="23438-183">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию, параметрами метаданных платформы и ответами.</span><span class="sxs-lookup"><span data-stu-id="23438-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-184">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-185">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-186">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-187">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="23438-188">Значения, помеченные как флаги `flags` Set в параметре, будут задавать <xref:System.Windows.FrameworkPropertyMetadata> логические значения свойств, <xref:System.Windows.FrameworkPropertyMetadataOptions> соответствующих имени `true`этого флага.</span><span class="sxs-lookup"><span data-stu-id="23438-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="23438-189">Можно по-прежнему изменять значения свойств в метаданных, если метаданные еще не были применены к определенной операции системы свойств.</span><span class="sxs-lookup"><span data-stu-id="23438-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-190">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-191">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-191"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-192">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span><span class="sxs-lookup"><span data-stu-id="23438-192">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="23438-193">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="23438-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="23438-194">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span><span class="sxs-lookup"><span data-stu-id="23438-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-195">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="23438-196">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> данного свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="23438-197">Чтобы запретить системе управления свойствами воспроизводить анимацию для свойства, относящегося к данным метаданным, установите <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="23438-197"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="23438-198">Подобные свойства вызывают исключения во время выполнения, проистекающие из системы управления свойствами при попытке применения к ним анимаций.</span><span class="sxs-lookup"><span data-stu-id="23438-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="23438-199">Для разрешения анимации свойства следует установить значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-199"><see langword="false" /> to permit animating the property.</span></span> <span data-ttu-id="23438-200">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-200">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="23438-201">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию и установками метаданных платформы, указанными ответами и логическим значением, которое может быть использовано для предотвращения анимации свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-202">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-203">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-204">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-205">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="23438-206">Параметр задает начальное значение <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> свойства, объявленного непосредственно базовым <xref:System.Windows.UIPropertyMetadata> классом. `isAnimationProhibited`</span><span class="sxs-lookup"><span data-stu-id="23438-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="23438-207">Значения, помеченные как флаги `flags` Set в параметре, будут задавать <xref:System.Windows.FrameworkPropertyMetadata> логические значения свойств, <xref:System.Windows.FrameworkPropertyMetadataOptions> соответствующих имени `true`этого флага.</span><span class="sxs-lookup"><span data-stu-id="23438-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="23438-208">Можно по-прежнему изменять значения свойств в метаданных, если метаданные еще не были применены к определенной операции системы свойств.</span><span class="sxs-lookup"><span data-stu-id="23438-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-209">В следующем примере вызывается сигнатура этого конструктора:</span><span class="sxs-lookup"><span data-stu-id="23438-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-210">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-210"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="23438-211">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span><span class="sxs-lookup"><span data-stu-id="23438-211">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="23438-212">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="23438-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="23438-213">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span><span class="sxs-lookup"><span data-stu-id="23438-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="23438-214">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="23438-215">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> против данного свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="23438-216">Чтобы запретить системе управления свойствами воспроизводить анимацию для свойства, относящегося к данным метаданным, установите <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="23438-216"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="23438-217">Подобные свойства вызывают исключения во время выполнения, проистекающие из системы управления свойствами при попытке применения к ним анимаций.</span><span class="sxs-lookup"><span data-stu-id="23438-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="23438-218">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-218">The default is <see langword="false" />.</span></span></param>
        <param name="defaultUpdateSourceTrigger"><span data-ttu-id="23438-219"><see cref="T:System.Windows.Data.UpdateSourceTrigger" /> для использования, когда привязки, примененные к данному свойству имеют <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> со значением <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="23438-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></param>
        <summary><span data-ttu-id="23438-220">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию и установками метаданных платформы, указанными ответами, логическим значением, которое может быть использовано для предотвращения анимации свойства и триггером обновления привязки данных по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-221">Тип значения, предоставленного для `defaultValue` , должен соответствовать типу, указанному в исходной регистрации свойства зависимостей, к которому будут применяться эти метаданные, или быть связанным с ним.</span><span class="sxs-lookup"><span data-stu-id="23438-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="23438-222">Несоответствие между типом значения метаданных по умолчанию и типом свойства зависимости, к которому он применяется, может быть затруднено в отладке, так как во время компиляции несоответствие не обнаруживается.</span><span class="sxs-lookup"><span data-stu-id="23438-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="23438-223">Система свойств не вычисляет действительное значение свойства до времени выполнения, поэтому результатом несоответствия типа значения по умолчанию или типа свойства является ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="23438-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="23438-224">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение свойства зависимости по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="23438-225">Параметр задает начальное значение <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> свойства, объявленного непосредственно базовым <xref:System.Windows.UIPropertyMetadata> классом. `isAnimationProhibited`</span><span class="sxs-lookup"><span data-stu-id="23438-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="23438-226">Дополнительные сведения о поведении источника обновлений для привязок см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="23438-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="23438-227">Значения, помеченные как флаги `flags` Set в параметре, будут задавать <xref:System.Windows.FrameworkPropertyMetadata> логические значения свойств, <xref:System.Windows.FrameworkPropertyMetadataOptions> соответствующих имени `true`этого флага.</span><span class="sxs-lookup"><span data-stu-id="23438-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="23438-228">Можно по-прежнему изменять значения свойств в метаданных, если метаданные еще не были применены к определенной операции системы свойств.</span><span class="sxs-lookup"><span data-stu-id="23438-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-229">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="23438-229"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-230">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на порядок размещения во время операций обработчика макета.</span><span class="sxs-lookup"><span data-stu-id="23438-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="23438-231">Значение <see langword="true" />, если свойство зависимостей, в котором существуют эти метаданные, может влиять на порядок размещения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-231"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-232">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-232">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-233"><xref:System.Windows.FrameworkElement>и <xref:System.Windows.FrameworkContentElement> включают<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> реализацию, которая отслеживает действующие изменения значений для всех свойств зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="23438-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="23438-234">В рамках этой логики свойства зависимостей, которые изменяют эффективное значение и имеют <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> метаданные со `true` значением, будут инициировать отложенный запрос на недействительность визуальных <xref:System.Windows.UIElement.InvalidateArrange%2A>элементов для этого элемента (вызов).</span><span class="sxs-lookup"><span data-stu-id="23438-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="23438-235">Поскольку такая реализация на уровне платформы WPF уже существует, вам обычно не нужно искать свойства <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> зависимостей, если только вы не заменили или не измените поведение макета на уровне платформы WPF.</span><span class="sxs-lookup"><span data-stu-id="23438-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="23438-236">В <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> пользовательских реализациях может возникать схожее поведение при изменении свойств зависимостей <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> , `true`где свойство имеет значение.</span><span class="sxs-lookup"><span data-stu-id="23438-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23438-237">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-238">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-239">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-240">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-241">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-241">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-242">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-243">Следующий пример получает метаданные по умолчанию из различных полей свойств зависимости, запрашивает значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойств в нем и использует эти сведения для заполнения таблицы для реализации "браузера метаданных".</span><span class="sxs-lookup"><span data-stu-id="23438-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-244">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-245">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на передачу измерения во время операций обработчика макета.</span><span class="sxs-lookup"><span data-stu-id="23438-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="23438-246">Значение <see langword="true" />, если свойство зависимостей, в котором существуют эти метаданные, может влиять на передачу измерения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-246"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-247">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-247">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-248"><xref:System.Windows.FrameworkElement>и <xref:System.Windows.FrameworkContentElement> включают<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> реализацию, которая отслеживает действующие изменения значений для всех свойств зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="23438-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="23438-249">В рамках этой логики свойства зависимостей, которые изменяют эффективное значение и имеют <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> метаданные со `true` значением, будут инициировать отложенный запрос на недействительность визуальных элементов для этого элемента.</span><span class="sxs-lookup"><span data-stu-id="23438-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="23438-250">Поскольку такая реализация на уровне платформы WPF уже существует, вам обычно не нужно искать свойства <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> зависимостей, если только вы не заменили или не измените поведение макета на уровне платформы WPF.</span><span class="sxs-lookup"><span data-stu-id="23438-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="23438-251">В <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> пользовательских реализациях может возникать схожее поведение при изменении свойств зависимостей <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> , `true`где свойство имеет значение.</span><span class="sxs-lookup"><span data-stu-id="23438-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23438-252">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-253">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-254">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-255">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-256">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-256">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-257">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-258">Следующий пример получает метаданные по умолчанию из различных полей свойств зависимости, запрашивает значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойств в нем и использует эти сведения для заполнения таблицы для реализации "браузера метаданных".</span><span class="sxs-lookup"><span data-stu-id="23438-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-259">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-260">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на передачу размещения разметки родительского элемента во время операций обработчика разметки.</span><span class="sxs-lookup"><span data-stu-id="23438-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="23438-261">Значение <see langword="true" />, если свойство зависимостей, в котором существуют метаданные, влияет на передачу размещения непосредственно в родительском элементе; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-261"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-262">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-263"><xref:System.Windows.FrameworkElement>и <xref:System.Windows.FrameworkContentElement> включают<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> реализацию, которая отслеживает действующие изменения значений для всех свойств зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="23438-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="23438-264">В рамках этой логики свойства зависимостей, которые изменяют эффективное значение и имеют <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> метаданные со `true` значением, будут инициировать отложенный запрос на недействительность визуальных элементов для родительского элемента.</span><span class="sxs-lookup"><span data-stu-id="23438-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="23438-265">Как правило, нет необходимости <xref:System.Windows.FrameworkElement> сообщать об изменениях свойства в родительский элемент с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , так как сам элемент уже имеет свой собственный <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> как `true`.</span><span class="sxs-lookup"><span data-stu-id="23438-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="23438-266">Обычно это достаточно, поскольку изменения в дочернем элементе обычно инициируют родительский элемент при необходимости.</span><span class="sxs-lookup"><span data-stu-id="23438-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="23438-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>иногда используется для <xref:System.Windows.FrameworkContentElement> производного класса.</span><span class="sxs-lookup"><span data-stu-id="23438-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="23438-268">В этом случае дочерний элемент задает свойство, но <xref:System.Windows.FrameworkContentElement> производный класс не управляет его собственной отрисовкой.</span><span class="sxs-lookup"><span data-stu-id="23438-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="23438-269">Отрисовка обрабатывается <xref:System.Windows.FrameworkElement> родительским элементом, который выступает в качестве узла содержимого.</span><span class="sxs-lookup"><span data-stu-id="23438-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="23438-270">Например, изменение значения <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> присоединенного свойства дочерним элементом сделает недействительным расположение родителя, так как должно быть изменено расположение дочернего элемента в родительском элементе.</span><span class="sxs-lookup"><span data-stu-id="23438-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="23438-271">Поэтому присоединенное свойство имеет метаданные, где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> имеет `true`значение. <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="23438-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="23438-272">Другой пример: <xref:System.Windows.Controls.Control.Padding%2A>при изменении этого свойства родительский элемент может изменить положение дочернего элемента в зависимости от доступного пространства.</span><span class="sxs-lookup"><span data-stu-id="23438-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="23438-273">Поскольку такая реализация на уровне платформы WPF уже существует, вам обычно не нужно искать свойства <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> зависимостей, если только вы не заменили или не измените поведение макета на уровне платформы WPF.</span><span class="sxs-lookup"><span data-stu-id="23438-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="23438-274">В <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> пользовательских реализациях может возникать схожее поведение при изменении свойств зависимостей <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , `true`где свойство имеет значение.</span><span class="sxs-lookup"><span data-stu-id="23438-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23438-275">Свойства в любых производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-276">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-277">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-278">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-279">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-279">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-280">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-281">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-282">Возвращает или задает значение, указывающее, может ли свойство зависимостей потенциально влиять на передачу показателей разметки родительского элемента во время операций обработчика разметки.</span><span class="sxs-lookup"><span data-stu-id="23438-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="23438-283">Значение <see langword="true" />, если свойство зависимостей, в котором существуют метаданные, влияет на передачу измерений непосредственно на родительском элементе; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-283"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-284"><xref:System.Windows.FrameworkElement>и <xref:System.Windows.FrameworkContentElement> включают<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> реализацию, которая отслеживает действующие изменения значений для всех свойств зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="23438-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="23438-285">В рамках этой логики свойства зависимостей, которые изменяют эффективное значение и имеют <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> метаданные со `true` значением, будут инициировать отложенный запрос на недействительность визуальных элементов для родительского элемента.</span><span class="sxs-lookup"><span data-stu-id="23438-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="23438-286">Поскольку такая реализация на уровне платформы WPF уже существует, вам обычно не нужно искать свойства <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> зависимостей, если только вы не заменили или не измените поведение макета на уровне платформы WPF.</span><span class="sxs-lookup"><span data-stu-id="23438-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="23438-287">Как правило, нет необходимости <xref:System.Windows.FrameworkElement> сообщать об изменениях свойства в родительский элемент с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , так как сам элемент уже имеет свой собственный <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> как `true`.</span><span class="sxs-lookup"><span data-stu-id="23438-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="23438-288">Как правило, это достаточно, так как изменения в дочернем элементе, как правило, инициируют этап родительской меры, если это уместно.</span><span class="sxs-lookup"><span data-stu-id="23438-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="23438-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>иногда используется для <xref:System.Windows.FrameworkContentElement> производного класса.</span><span class="sxs-lookup"><span data-stu-id="23438-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="23438-290">В этом случае дочерний элемент задает свойство, но <xref:System.Windows.FrameworkContentElement> производный класс не управляет его собственной отрисовкой.</span><span class="sxs-lookup"><span data-stu-id="23438-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="23438-291">Отрисовка обрабатывается <xref:System.Windows.FrameworkElement> родительским элементом, который выступает в качестве узла содержимого.</span><span class="sxs-lookup"><span data-stu-id="23438-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="23438-292">Например, изменение значения <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> свойства на дочернем элементе делает недействительной меру родителя, поскольку относительный отступ абзацев может измениться и может увеличить или уменьшить размер узла содержимого.</span><span class="sxs-lookup"><span data-stu-id="23438-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="23438-293">Поэтому свойство имеет метаданные, где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> имеет `true`значение. <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="23438-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23438-294">Элементы узла содержимого также часто ищут изменения в свойствах зависимостей, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> где `true`— это часть логики отрисовки узла содержимого.</span><span class="sxs-lookup"><span data-stu-id="23438-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="23438-295">Например, <xref:System.Windows.Controls.TextBox> элемент должен отвечать на определенные изменения в тексте, который может потребовать изменения ограничивающего прямоугольника <xref:System.Windows.Controls.TextBox> самого себя.</span><span class="sxs-lookup"><span data-stu-id="23438-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="23438-296">В <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> пользовательских реализациях может возникать схожее поведение при изменении свойств зависимостей <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , `true`где свойство имеет значение.</span><span class="sxs-lookup"><span data-stu-id="23438-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23438-297">Свойства в любых производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-298">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-299">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-300">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-301">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-301">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-302">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-303">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-304">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на общий макет таким способом, который не оказывает специального воздействия на расположение или размеры, но требует перерисовку.</span><span class="sxs-lookup"><span data-stu-id="23438-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span></span></summary>
        <value><span data-ttu-id="23438-305">Значение <see langword="true" />, если свойство зависимостей, в котором существуют эти метаданные, влияет на отрисовку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-305"><see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-306">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-306">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-307"><xref:System.Windows.FrameworkElement>и <xref:System.Windows.FrameworkContentElement> включают<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> реализацию, которая отслеживает действующие изменения значений для всех свойств зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="23438-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="23438-308">В рамках этой логики свойства зависимостей, которые изменяют эффективное значение и имеют <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> метаданные со `true` значением, будут инициировать отложенный запрос на недействительность визуальных элементов для этого элемента.</span><span class="sxs-lookup"><span data-stu-id="23438-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="23438-309">Поскольку такая реализация на уровне платформы WPF уже существует, вам обычно не нужно искать свойства <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> зависимостей, если только вы не заменили или не измените поведение макета на уровне платформы WPF.</span><span class="sxs-lookup"><span data-stu-id="23438-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="23438-310">В <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> пользовательских реализациях может возникать схожее поведение при изменении свойств зависимостей <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> , `true`где свойство имеет значение.</span><span class="sxs-lookup"><span data-stu-id="23438-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="23438-311">Свойства в любых производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-312">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-313">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-314">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-315">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-315">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-316">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-317">Следующий пример получает метаданные по умолчанию из различных полей свойств зависимости, запрашивает значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойств в нем и использует эти сведения для заполнения таблицы для реализации "браузера метаданных".</span><span class="sxs-lookup"><span data-stu-id="23438-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-318">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-319">Получает или задает значение, указывающее, создает ли свойство двухсторонние привязки по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-319">Gets or sets a value that indicates whether the property binds two-way by default.</span></span></summary>
        <value><span data-ttu-id="23438-320">Значение <see langword="true" />, если свойство зависимостей, в котором существуют эти метаданные, создает двухсторонние привязки по умолчанию; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-320"><see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-321">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-321">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-322">В отсутствие этого свойства `true`Привязка обновлений по умолчанию является односторонней на основе поведения <xref:System.Windows.Data.Binding> конструкторов или эквивалентного [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="23438-323">В существующих элементах, как правило, этому свойству присваивается значение `true` в метаданных для свойств зависимостей, например <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>, состояние отчета и изменяемые пользователем действия.</span><span class="sxs-lookup"><span data-stu-id="23438-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="23438-324">Это свойство сообщает только о характеристиках обновления привязки по умолчанию свойства зависимостей в целом.</span><span class="sxs-lookup"><span data-stu-id="23438-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="23438-325">Любой набор привязок для этого свойства в экземпляре служб может локально <xref:System.Windows.Data.Binding.Mode%2A> задать свойство привязки и изменить это значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="23438-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="23438-326">Свойства в любых производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-327">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-328">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-329">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-330">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-330">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-331">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-332">Следующий пример получает метаданные по умолчанию из различных полей свойств зависимости, запрашивает значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойств в нем и использует эти сведения для заполнения таблицы для реализации "браузера метаданных".</span><span class="sxs-lookup"><span data-stu-id="23438-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-333">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-334">Получает или задает значение по умолчанию для <see cref="T:System.Windows.Data.UpdateSourceTrigger" />, который используется при привязке свойства к которому применены данные метаданные, с <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> имеющими значение <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="23438-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></summary>
        <value><span data-ttu-id="23438-335">Значение перечисления, кроме как <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="23438-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-336">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-337">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-338">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-339">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-340">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-340">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-341">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="23438-342">Данному свойству присвоено значение <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; указанное значение будет считаться значением по умолчанию при получении запросов от привязок.</span><span class="sxs-lookup"><span data-stu-id="23438-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-343">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-344">Получает или задает значение, которое указывает, наследуется ли значение свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="23438-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span></span></summary>
        <value><span data-ttu-id="23438-345">Значение <see langword="true" />, если значение свойства может быть унаследовано; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-345"><see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-346">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-346">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-347">Наследование значений свойств — это функция [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системы свойств на уровне платформы WPF, с помощью которой определенные свойства зависимостей могут быть заданы локально на элементе в корне [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] дерева элементов или рядом с ним, а значения наследуются все элементы в логическом дереве дочерних элементов, которые также обладают этим свойством.</span><span class="sxs-lookup"><span data-stu-id="23438-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="23438-348">Наследование значений свойств не включено по умолчанию, и включение этого параметра влияет на производительность.</span><span class="sxs-lookup"><span data-stu-id="23438-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="23438-349">Подробнее см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="23438-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23438-350">Несмотря на то, что наследование значений свойств может работать для неприсоединенных свойств зависимостей, поведение наследования для неприсоединенного свойства через определенные подразделения объектов в дереве среды выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="23438-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="23438-351">Всегда используйте <xref:System.Windows.DependencyProperty.RegisterAttached%2A> для регистрации свойств, в которых <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> указывается в метаданных.</span><span class="sxs-lookup"><span data-stu-id="23438-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="23438-352">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-353">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-354">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-355">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-356">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-356">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-357">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-358">Следующий пример получает метаданные по умолчанию из различных полей свойств зависимости, запрашивает значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойств в нем и использует эти сведения для заполнения таблицы для реализации "браузера метаданных".</span><span class="sxs-lookup"><span data-stu-id="23438-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-359">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-360">Возвращает значение, указывающее, поддерживается ли привязка данных для свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="23438-360">Gets a value that indicates whether data binding is supported for the dependency property.</span></span></summary>
        <value><span data-ttu-id="23438-361">Значение <see langword="true" />, если привязка данных поддерживается для свойства зависимостей, к которому применяются эти метаданные; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-361"><see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-362">Значение по умолчанию — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="23438-362">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-363">Это свойство сообщает `false` одно из двух возможных условий: привязка данных к свойству зависимости не разрешена, так как свойство зависимостей доступно только для чтения (как указано в идентификаторе свойства зависимостей, а не в метаданных) или значение другое свойство метаданных, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>имеет `true` значение в этих метаданных.</span><span class="sxs-lookup"><span data-stu-id="23438-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="23438-364">Это свойство предоставляется в качестве удобства, поэтому вызывающим объектам не нужно проверять оба <xref:System.Windows.DependencyProperty.ReadOnly%2A> значения и. <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A></span><span class="sxs-lookup"><span data-stu-id="23438-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="23438-365">Если вы пытаетесь создать метаданные, указывающие, что в противном случае свойство для чтения и записи не должно поддерживать привязку данных, <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> укажите флаг (Обратите внимание на незначительное различие соглашений об именовании и <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span><span class="sxs-lookup"><span data-stu-id="23438-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-366">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-366">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-367">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23438-368">Следующий пример получает метаданные по умолчанию из различных полей свойств зависимости, запрашивает значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойств в нем и использует эти сведения для заполнения таблицы для реализации "браузера метаданных".</span><span class="sxs-lookup"><span data-stu-id="23438-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-369">Получает или задает значение, которое указывает, поддерживает ли свойство зависимостей привязку данных.</span><span class="sxs-lookup"><span data-stu-id="23438-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span></span></summary>
        <value><span data-ttu-id="23438-370">Значение <see langword="true" />, если свойство не поддерживает привязку данных; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-370"><see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-371">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-371">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-372">Обратите внимание, что это свойство метаданных `true` имеет значение исключительно для свойств, которые не должны поддерживать привязку данных, несмотря на свойства, доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="23438-373">Ожидание заключается в том, что в большинстве случаев, когда объявляется свойство зависимости, требуется привязка данных, поскольку привязка данных является одним из ключевых сценариев, в которых свойство зависимостей полезно.</span><span class="sxs-lookup"><span data-stu-id="23438-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="23438-374">В отличие <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>от этого, это не просто изменяет значение по умолчанию, которое впоследствии может быть изменено в конкретной привязке.</span><span class="sxs-lookup"><span data-stu-id="23438-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="23438-375">Задание этого свойства `true` в метаданных для метаданных свойства зависимости приведет к отключению всех привязок к применению их значений через выражения к этому свойству зависимостей.</span><span class="sxs-lookup"><span data-stu-id="23438-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="23438-376">Свойства зависимостей только для чтения не поддерживают привязку данных (так как они не имеют метода задания, который может применить измененные значения), но `false` по <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>-прежнему будет сообщать о.</span><span class="sxs-lookup"><span data-stu-id="23438-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="23438-377">Это связано с тем, что свойства, <xref:System.Windows.FrameworkPropertyMetadataOptions> соответствующие значениям, будут сообщать о том, как метаданные фактически были установлены, а не всегда сообщать о поведении, которое может предположить именование свойства.</span><span class="sxs-lookup"><span data-stu-id="23438-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="23438-378">Чтобы определить, допускает ли данное свойство зависимости привязку данных, обычно следует <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> проверять.</span><span class="sxs-lookup"><span data-stu-id="23438-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="23438-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>является удобным для проверки <xref:System.Windows.DependencyProperty.ReadOnly%2A> и <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> в качестве одной операции, выдавая ожидаемый результат.</span><span class="sxs-lookup"><span data-stu-id="23438-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="23438-380">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-381">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-382">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-383">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-384">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-384">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-385">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-386">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-387">Получает или задает значение, указывающее, содержит ли это свойство сведения о ведении журнала, которые приложения могут или должны хранить как часть реализации процесса ведения журнала.</span><span class="sxs-lookup"><span data-stu-id="23438-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span></span></summary>
        <value><span data-ttu-id="23438-388">Значение <see langword="true" />, если ведение журнала должно быть выполнено для свойства зависимостей, к которому применяются эти метаданные; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-388"><see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-389">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-389">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-390">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-391">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-392">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-393">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-394">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-394">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-395">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-396">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata"><span data-ttu-id="23438-397">Базовые метаданные для слияния.</span><span class="sxs-lookup"><span data-stu-id="23438-397">The base metadata to merge.</span></span></param>
        <param name="dp"><span data-ttu-id="23438-398">Свойство зависимостей, к которому применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="23438-398">The dependency property this metadata is being applied to.</span></span></param>
        <summary><span data-ttu-id="23438-399">Обеспечивает слияние исходных метаданных с базовыми.</span><span class="sxs-lookup"><span data-stu-id="23438-399">Enables a merge of the source metadata with base metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-400">Этот метод используется внутренне при переопределении метаданных.</span><span class="sxs-lookup"><span data-stu-id="23438-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23438-401">Классы, производные от <see cref="T:System.Windows.PropertyMetadata" /> (или особенно), должны переопределять этот метод, чтобы учитывать все свойства метаданных, добавленные в их реализациях.</span><span class="sxs-lookup"><span data-stu-id="23438-401">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span></span> <span data-ttu-id="23438-402">Например, ваша реализация может добавить новое значение перечисления флагового, а <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> реализация должна иметь возможность правильно сочетать эти флаги.</span><span class="sxs-lookup"><span data-stu-id="23438-402">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span></span>  
  
<span data-ttu-id="23438-403">Всегда вызывайте базовую реализацию перед собственной реализацией, так как базовая реализация выполняет слияние всех свойств, уже определенных в предыдущих типах в иерархии.</span><span class="sxs-lookup"><span data-stu-id="23438-403">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span></span>  
  
<span data-ttu-id="23438-404">Поведение, добавленное <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> реализацией в <see cref="T:System.Windows.FrameworkPropertyMetadata" /> , заключается в том, что определенные свойства уровня среды WPF в метаданных <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> , такие как, объединяются в битовой операции или.</span><span class="sxs-lookup"><span data-stu-id="23438-404">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span></span>  
  
<span data-ttu-id="23438-405">Поведение также реализует поведение при переопределении метаданных свойства в существующем свойстве зависимости путем вызова <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, с использованием метаданных переопределения, которые имеют значение <see cref="T:System.Windows.FrameworkPropertyMetadata" />. <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /></span><span class="sxs-lookup"><span data-stu-id="23438-405">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="23438-406">Свойство зависимостей, к которому были применены эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="23438-406">The dependency property to which the metadata has been applied.</span></span></param>
        <param name="targetType"><span data-ttu-id="23438-407">Тип, связанный с этими метаданными, если это метаданные зависящие от типа.</span><span class="sxs-lookup"><span data-stu-id="23438-407">The type associated with this metadata if this is type-specific metadata.</span></span> <span data-ttu-id="23438-408">В случае с метаданными по умолчанию, значение может быть <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="23438-408">If this is default metadata, this value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="23438-409">Вызывается после применения данных метаданных к свойству, указывая на запечатывание метаданных.</span><span class="sxs-lookup"><span data-stu-id="23438-409">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-410">При вызове этого метода все изменяемые <xref:System.Windows.FrameworkPropertyMetadata> структуры данных экземпляра должны быть помечены как неизменные.</span><span class="sxs-lookup"><span data-stu-id="23438-410">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="23438-411"><see cref="T:System.Windows.FrameworkPropertyMetadata" /> Реализация этого метода не делает ничего, кроме вызова базовой реализации.</span><span class="sxs-lookup"><span data-stu-id="23438-411">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-412">Возвращает или задает значение, указывающее, должно ли вычисление наследования значения свойства охватывать определенные границы содержимого в логическом дереве элементов.</span><span class="sxs-lookup"><span data-stu-id="23438-412">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span></span></summary>
        <value><span data-ttu-id="23438-413">Значение <see langword="true" />, если наследование значения свойства должно охватывать определенные границы содержимого; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-413"><see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-414">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-414">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-415">Эти метаданные сообщают о нередком изменении поведения наследования значений свойств через специальные границы родительского элемента-потомков.</span><span class="sxs-lookup"><span data-stu-id="23438-415">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="23438-416">Каноническим примером такой границы является содержимое <xref:System.Windows.Controls.Frame>, <xref:System.Windows.Controls.Frame> где содержимое может быть перезагружено независимо от существования <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="23438-416">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="23438-417">Требуемое поведение системы свойств заключается в том, что наследование значения свойства не должно передаваться <xref:System.Windows.Controls.Frame>в содержимое, поскольку это содержимое может быть элементом, который приложение, в котором размещается кадр, не владеет и не контролируется.</span><span class="sxs-lookup"><span data-stu-id="23438-417">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="23438-418">Указание метаданных с <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> `true`параметром, равным, а <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> также `true`с указанием AS, приведет к тому, что свойство, к которому применяются метаданные, будет <xref:System.Windows.Controls.Frame> наследоваться даже через границы или аналогичные границы.</span><span class="sxs-lookup"><span data-stu-id="23438-418">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="23438-419">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-419">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-420">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-420">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-421">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-421">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-422">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-422">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-423">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-423">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-424">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-424">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-425">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-425">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23438-426">Возвращает или задает значение, указывающее, влияют ли подсвойства свойства зависимостей на отрисовку вмещающего объекта.</span><span class="sxs-lookup"><span data-stu-id="23438-426">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span></span></summary>
        <value><span data-ttu-id="23438-427">Значение <see langword="true" />, если изменения значений подсвойств не влияют на отрисовку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-427"><see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="23438-428">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23438-428">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23438-429">Этот параметр метаданных имеет отношение к свойствам зависимостей, которые являются ссылочными типами, где у этого типа есть собственные значения свойств.</span><span class="sxs-lookup"><span data-stu-id="23438-429">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="23438-430">Как правило, логика системы макета предполагает, что любое свойство зависимости с подсвойствами может повлиять на макет, так как проверка всех подсвойств для изменений занимает больше времени, чем фактическое выполнение другого прохода визуализации.</span><span class="sxs-lookup"><span data-stu-id="23438-430">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="23438-431">Установка этого параметра в `true` применяется для оптимизации производительности реализации системы макета на уровне платформы WPF.</span><span class="sxs-lookup"><span data-stu-id="23438-431">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="23438-432">Свойства в производных классах <xref:System.Windows.PropertyMetadata> обычно определяются в объектной модели как доступные для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="23438-432">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="23438-433">Это значит, что их можно скорректировать после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="23438-433">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="23438-434">Однако после того, как метаданные будут потреблены как часть вызова метода <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств зазапечатана, что экземпляр метаданных и свойства, передающие особенности метаданных, теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="23438-434">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="23438-435">Попытка установить это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> `true` в этом экземпляре метаданных вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="23438-435">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="23438-436">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="23438-436">XAML Text Usage</span></span>  
 <span data-ttu-id="23438-437">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="23438-437">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23438-438">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span><span class="sxs-lookup"><span data-stu-id="23438-438">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>
