<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50919b4b6c3b6707d5830ddef58a2ce821e29187" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64190272" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d"><span data-ttu-id="79cea-101">Объект, содержащий свойство.</span><span class="sxs-lookup"><span data-stu-id="79cea-101">The object that the property exists on.</span></span> <span data-ttu-id="79cea-102">При вызове ответа, система свойств передает это значение.</span><span class="sxs-lookup"><span data-stu-id="79cea-102">When the callback is invoked, the property system will pass this value.</span></span></param>
    <param name="baseValue"><span data-ttu-id="79cea-103">Новое значение свойства до применения операции запрета изменения значения.</span><span class="sxs-lookup"><span data-stu-id="79cea-103">The new value of the property, prior to any coercion attempt.</span></span></param>
    <summary><span data-ttu-id="79cea-104">Предоставляет шаблон для метода, вызываемого при оценке значения свойства зависимостей и запросе запрета изменения значения.</span><span class="sxs-lookup"><span data-stu-id="79cea-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span></span></summary>
    <returns><span data-ttu-id="79cea-105">Запрещенное значение (с соответствующим типом).</span><span class="sxs-lookup"><span data-stu-id="79cea-105">The coerced value (with appropriate type).</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79cea-106">На основе обратных вызовов <xref:System.Windows.CoerceValueCallback> можно назначить свойству зависимостей через несколькими способами.</span><span class="sxs-lookup"><span data-stu-id="79cea-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="79cea-107">Каждый из этих способов необходимо сначала создать объект метаданных свойств (<xref:System.Windows.PropertyMetadata>, или производного класса, например <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="79cea-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="79cea-108">Создать объект метаданных, используя подпись конструктор, принимающий `coerceValueCallback` параметра и назначить этому параметру в обработчике обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79cea-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="79cea-109">Или создать метаданные любые подписи, причем <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> свойство до помещения метаданных используется.</span><span class="sxs-lookup"><span data-stu-id="79cea-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="79cea-110">Если у вас есть эти метаданные, вы можете:</span><span class="sxs-lookup"><span data-stu-id="79cea-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="79cea-111">Определение нового свойства зависимости на новый класс, используя либо подпись <xref:System.Windows.DependencyProperty.Register%2A>, предоставляя метаданные в виде `typeMetadata` значение.</span><span class="sxs-lookup"><span data-stu-id="79cea-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="79cea-112">Переопределить метаданные (вызвать <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) для существующего свойства зависимости, при наследовании от класса, которому принадлежит свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="79cea-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="79cea-113">Добавление существующего свойства зависимостей в новый <xref:System.Windows.DependencyObject> класса, с помощью новых метаданных путем вызова <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="79cea-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="79cea-114">Реализации данного ответа следует проверить значение `baseValue` и определить на основе значения или тип ли это значение необходимо для дальнейшей привести.</span><span class="sxs-lookup"><span data-stu-id="79cea-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="79cea-115"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Зависимости свойство вызывается каждый раз, когда система свойств или любой вызывающий объект вызывает <xref:System.Windows.DependencyObject.CoerceValue%2A> на <xref:System.Windows.DependencyObject> экземпляр, указав идентификатор этого свойства как `dp`.</span><span class="sxs-lookup"><span data-stu-id="79cea-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="79cea-116">Изменение значения свойства могут поступать любого из членов системы свойств.</span><span class="sxs-lookup"><span data-stu-id="79cea-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="79cea-117">Это включает стили, изначальную, триггеры, наследование значения свойства и локальное значение параметра.</span><span class="sxs-lookup"><span data-stu-id="79cea-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="79cea-118">Обычно следует избегать, указание более одного <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> для любого заданного свойства зависимостей (переопределения или добавления новых метаданных свойства зависимости, которое уже есть <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span><span class="sxs-lookup"><span data-stu-id="79cea-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="79cea-119">Только один из обратных вызовов, будет действовать. Действующим ответом будет тот, который был применен к наиболее производного класса в наследовании по сравнению с <xref:System.Windows.DependencyObject> вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="79cea-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="79cea-120">При переопределении метаданных, заменяются другие обратные вызовы, связанные с метаданными для свойства зависимостей, существовавшего выше в иерархии владельцев.</span><span class="sxs-lookup"><span data-stu-id="79cea-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79cea-121">Следующий пример содержит реализацию этого обратного вызова для запрета хранимого значения свойства зависимостей на основе других входных данных, например значение другого свойства.</span><span class="sxs-lookup"><span data-stu-id="79cea-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="79cea-122">В этом случае обратный вызов проверяет, ли `ShirtType` свойства соответствует типу объекта, содержащего кнопки; Если Да, она устанавливает начальный цвет по умолчанию для `ButtonColor`, если кнопки не типа "рубашка", он преобразует `ButtonColor` значение к начальному значению, что вызывает [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (не показано) для удаления выпадающего меню из эффективных выборов.</span><span class="sxs-lookup"><span data-stu-id="79cea-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>