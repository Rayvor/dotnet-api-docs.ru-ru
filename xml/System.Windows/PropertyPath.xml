<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4329e496700e4e34a463e39da3ce24baafeb38d2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444300" /></Metadata><TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет структуру данных для описания свойства как подпути иного свойства или типа владельца. Пути свойств используются в объектах для привязки данных, в раскадровках и графиках для анимации.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс содержит строку <xref:System.Windows.PropertyPath.Path%2A>и список свойств зависимостей, которые <xref:System.Windows.PropertyPath.PathParameters%2A> являются строкой <xref:System.Windows.PropertyPath.Path%2A>.  
  
 <xref:System.Windows.PropertyPath>поддерживает два режима поведения:  
  
 **Режим исходного кода** описывает путь к свойству, которое используется в качестве источника для некоторой другой операции. Этот режим используется <xref:System.Windows.Data.Binding> классом для поддержки привязки данных.  
  
 **Целевой режим** описывает путь к свойству, которое будет задано в качестве целевого свойства. Этот режим используется анимацией для поддержки методов задания раскадровки и временной шкалы.  
  
 Например, `Background.Opacity` — это двухэтапный путь. Этот путь подразумевает следующее: сначала найдите `Background` свойство объекта, получите объект `Background` значения, для которого задано свойство, а затем `Opacity` получите значение свойства для этого объекта.  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *propertyPath*  
 Строка, которая вычисляется как простой или сложный путь к свойству. Синтаксис для установки <xref:System.Windows.PropertyPath> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] является универсальным, но сложным и описывается в отдельном разделе синтаксиса [PropertyPath XAML](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/056aee79-7cdd-434f-8174-dfc856cad343">Расширение разметки x:Static</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.PropertyPath" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Путь свойства, описывающий путь к свойству [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)], или же единому свойству зависимостей.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.PropertyPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор имеет два совершенно разных способа использования в зависимости от того, используется ли он для пути к свойству в исходном режиме для привязки или для одношагового свойства в целевом режиме для цели раскадровки.  
  
 При использовании этого <xref:System.Windows.PropertyPath> режима в исходном режиме для `parameter` привязки — это строка, представляющая имя свойства, или строка, которая описывает пошаговый путь [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] к свойству в объектной модели объекта, используемого в качестве источника. для привязки. Для пути свойства привязки символ, определяющий "Step", представляет собой точку (.). Также поддерживаются ссылки на индексаторы (включая несколько индексаторов и различий типов). Дополнительные сведения о синтаксисе строки, специально используемом <xref:System.Windows.Data.Binding> объектом, см. в разделе. <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType> Свойство, используемое в качестве источника привязки, не должно быть свойством зависимостей. Если привязка обновляется двумя способами, то свойство, на которое указывает ссылка, должно быть доступно для чтения и записи. Также обратите внимание, что целевой объект привязки должен быть свойством зависимостей. Дополнительные сведения см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 При использовании этого <xref:System.Windows.PropertyPath> режима в целевом режиме для одношагового пути для `parameter` цели раскадровки обычно предоставляется как тип <xref:System.Windows.DependencyProperty>. Можно также указать строку, которая является <xref:System.Windows.DependencyProperty.Name%2A>. Один из них имеет один и тот же результат, так как он хранится внутренне как строка. Предоставленный <xref:System.Windows.DependencyProperty> объект преобразуется в строку с <xref:System.Windows.Markup.DependencyPropertyConverter>помощью. Поддерживает полный формат имен для свойств зависимостей, поэтому можно указать *имя типа.* <xref:System.Windows.Markup.DependencyPropertyConverter>  *PropertyName* строка <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> имени квалифицированного свойства зависимостей в конструкторе в коде. Полный путь к идентификатору свойства зависимости отличается от понятия сложного пути. Вместо этого следует создавать <xref:System.Windows.PropertyPath> сложный путь <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> с помощью конструктора.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">Строка, указывающая <see cref="P:System.Windows.PropertyPath.Path" />, в размеченном формате.</param>
        <param name="pathParameters">Массив объектов, задающий <see cref="P:System.Windows.PropertyPath.PathParameters" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.PropertyPath" /> с заданной строкой пути и внутренним и параметрами.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта сигнатура обычно используется только для целевого режима <xref:System.Windows.PropertyPath> использования с сложными путями.  
  
 Этот конструктор поддерживает `params` `pathParameters` аргумент конструктора. Таким образом, можно указать содержимое `pathParameters` в виде последовательности аргументов конструктора с разделителями-запятыми, заполняющих массив, вместо того, чтобы использовать измерение массива, а затем заполнить его `pathParameters` элементами. Каждый заданный элемент должен иметь один из следующих типов: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo>, <xref:System.ComponentModel.PropertyDescriptor>.  
  
 Дополнительные сведения о требованиях к параметрам см <xref:System.Windows.PropertyPath.Path%2A> . в статьях и. <xref:System.Windows.PropertyPath.PathParameters%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает строку, описывающую путь.</summary>
        <value>Строка, описывающая путь.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка, содержащаяся в этом свойстве, имеет три совершенно разные значения в зависимости от <xref:System.Windows.PropertyPath> того, используется ли объект для пути к свойству в исходном режиме для привязки, для одношагового пути к свойству одноэтапного режима для цели раскадровки или для сложного путь для цели раскадровки.  
  
 При использовании этого <xref:System.Windows.PropertyPath> режима в исходном режиме для <xref:System.Windows.PropertyPath.Path%2A> привязки — это строка, представляющая имя свойства, или строка, которая описывает пошаговый путь [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] к свойству в объектной модели объекта, используемого в качестве источника. для привязки. Для пути свойства привязки символ, определяющий "Step", представляет собой точку (.). Также поддерживаются ссылки на индексаторы (включая несколько индексаторов и различий типов). Дополнительные сведения о синтаксисе строки, специально используемом <xref:System.Windows.Data.Binding> объектом, см. в разделе. <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType> Свойство, используемое в качестве источника привязки, не должно быть свойством зависимостей. Если привязка обновляется двумя способами, источник свойства должен быть доступен для чтения и записи. Также обратите внимание, что целевой объект привязки должен быть свойством зависимостей. Дополнительные сведения см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 При использовании этого <xref:System.Windows.PropertyPath> режима в целевом режиме для одношагового пути для <xref:System.Windows.PropertyPath> цели раскадровки — это строка, которая является *именем typeName*. *propertyName* строка имени уточненного свойства зависимостей.  
  
 При использовании этого <xref:System.Windows.PropertyPath> параметра для сложного пути для <xref:System.Windows.PropertyPath.Path%2A> цели раскадровки — это строковый формат с маркерами, описывающий связи различных объектов, <xref:System.Windows.PropertyPath.PathParameters%2A>заданных в.  
  
-   Каждый элемент массива задается в этом формате индексом массива для элемента, заключенного в круглые скобки. Например, чтобы указать первый элемент в массиве, строковый токен имеет `(0)`значение.  
  
-   Связи между элементами ("шаги" в пути) указываются точкой (.). Свойство Forward точки — это первый шаг в пути, свойство после — второй шаг и т. д. (можно указать шаги, которые выходят за два). Последний шаг в цепочке всегда представляет свойство, которое анимируется.  
  
-   Доступ к элементам в свойствах коллекции осуществляется с помощью синтаксиса индексатора с индексом в квадратных скобках ([и]). Индексатор является аддитивным по отношению к маркеру, представляющему свойство. Например, следующий путь состоит из двух шагов с сочетанием токенов на первом шаге, задающим второй элемент из коллекции этого свойства: `(0)[1].(1)` . Нельзя использовать индексатор для последнего свойства в цепочке; нельзя анимировать фактическую позицией коллекции, необходимо анимировать свойство этого объекта.  
  
 Строка пути для, <xref:System.Windows.PropertyPath> как правило, устанавливается через конструкторы <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> : сигнатура для привязок или <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> Одношаговая раскадровка, подпись для многошаговых целей раскадровки.  
  
 **КОДА** При использовании <xref:System.Windows.PropertyPath> для описания ссылки на свойство в в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]качестве значения атрибута указанная строка сначала обрабатывается преобразователем типов (<xref:System.Windows.PropertyPathConverter>). Затем этот преобразователь типов обрабатывает строку и, в зависимости от ее синтаксиса, вызовет одну из <xref:System.Windows.PropertyPath> подписей конструктора. Это косвенное обращение с помощью преобразователя типов, <xref:System.Windows.PropertyPath> обрабатывающего значение атрибута, обычно используется в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.PropertyPath> вместо объявления элемента объекта и применения конкретных значений к атрибутам, таким как <xref:System.Windows.PropertyPath.Path%2A> и <xref:System.Windows.PropertyPath.PathParameters%2A>. Дополнительные сведения см. в разделе [синтаксис языка XAML PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
 Члены типа обычно не задаются в виде прямого [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса. <xref:System.Windows.PropertyPath> См. заметки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает список параметров для использования, когда путь относится к индексированным параметрам.</summary>
        <value>Список параметров.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойства для <xref:System.Windows.PropertyPath> , как правило, устанавливаются с помощью конструкторов. Для параметра <xref:System.Windows.PropertyPath.PathParameters%2A> <xref:System.Windows.PropertyPath.%23ctor%2A> конструктор особенно удобен, так как `pathParameters` аргумент конструктора обозначен как `params`, то есть вам не нужно создавать массив или изменять размер массива для построения. Вы просто указываете каждый элемент массива как дополнительный параметр.  
  
 Если конечное свойство, которое является целевым объектом, <xref:System.Windows.Freezable> имеет тип, это значение будет клонировано. Дополнительные сведения см. в разделе [Общие сведения о раскадровках](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 Фактическое вычисление цепочки свойств выполняется механизмами анимации раскадровки. <xref:System.Windows.PropertyPath> На уровне проверка не выполняется, чтобы убедиться в том, что шаги пути подключаются вообще. Например, можно создать путь к свойству, который имеет <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> в качестве первого шага, а <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> также как второй шаг. Но такой путь к свойству будет неудачным, если фактически применяется в качестве целевого объекта, так <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> как тип кисти, <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> заполняемый, не имеет свойства. Недопустимые пути свойств не проходят автоматическую установку. Дополнительные сведения см. в разделе [Общие сведения о Storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 **КОДА** При использовании <xref:System.Windows.PropertyPath> для описания ссылки на свойство в в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]качестве значения атрибута указанная строка сначала обрабатывается преобразователем типов (<xref:System.Windows.PropertyPathConverter>). Затем этот преобразователь типов обрабатывает строку и, в зависимости от ее синтаксиса, вызовет одну из <xref:System.Windows.PropertyPath> подписей конструктора. Это косвенное обращение с помощью преобразователя типов, <xref:System.Windows.PropertyPath> обрабатывающего значение атрибута, обычно используется в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.PropertyPath> вместо объявления элемента объекта и применения конкретных значений к атрибутам, таким как <xref:System.Windows.PropertyPath.Path%2A> и <xref:System.Windows.PropertyPath.PathParameters%2A>. Дополнительные сведения см. в разделе [синтаксис языка XAML PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
 Члены типа обычно не задаются в виде прямого [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса. <xref:System.Windows.PropertyPath> См. заметки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
