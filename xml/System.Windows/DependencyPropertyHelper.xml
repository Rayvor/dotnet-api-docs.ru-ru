<Type Name="DependencyPropertyHelper" FullName="System.Windows.DependencyPropertyHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14591b9b83491e97344755ebccdb56f526ed742a" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75179841" /></Metadata><TypeSignature Language="C#" Value="public static class DependencyPropertyHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DependencyPropertyHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyPropertyHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет один вспомогательный метод (<see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />), который сообщает данные об источнике свойства системы для действительного значения свойства зависимостей.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Система свойств[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] довольно сложная, и полагается на рационализацию значений, которые потенциально поступают из множества входных данных на основе установленного приоритета определения значения. Поскольку эти источники потенциально поступают из кода времени выполнения, из скомпилированной разметки или даже из параметров пользователя во время выполнения, может быть полезно знать, какой именно участник в системе значений свойств зависимостей установил значение, которое вы получаете при вызове <xref:System.Windows.DependencyObject.GetValue%2A> во время выполнения для этого свойства. Если значение получено из другого источника, чем планировалось, может потребоваться изменить некоторые аспекты приложения. Источником значения может быть стиль, тема, локальное значение, анимация, привязка или значение на основе времени выполнения, например системные настройки с помощью тем или системных ресурсов. Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 Другой механизм, сообщающий о свойстве в целом, а не на конкретном экземпляре свойства объекта, — это метаданные свойства. Метаданные свойства можно найти путем вызова <xref:System.Windows.DependencyProperty.GetMetadata%2A> и проверки возвращаемого <xref:System.Windows.PropertyMetadata> (или одного из нескольких возможных производных классов, к которым можно привести возвращаемые метаданные свойства).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetValueSource">
      <MemberSignature Language="C#" Value="public static System.Windows.ValueSource GetValueSource (System.Windows.DependencyObject dependencyObject, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.ValueSource GetValueSource(class System.Windows.DependencyObject dependencyObject, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::ValueSource GetValueSource(System::Windows::DependencyObject ^ dependencyObject, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member GetValueSource : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.ValueSource" Usage="System.Windows.DependencyPropertyHelper.GetValueSource (dependencyObject, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValueSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">Элемент, содержащий объект <paramref name="dependencyProperty" />, сведения для которого требуется сообщить.</param>
        <param name="dependencyProperty">Идентификатор свойства зависимостей, сведения для которого требуется сообщить.</param>
        <summary>Возвращает структуру, сообщающую различные метаданные и характеристики системы свойств указанного свойства зависимостей в конкретном <see cref="T:System.Windows.DependencyObject" />.</summary>
        <returns>Структура <see cref="T:System.Windows.ValueSource" />, которая сообщает определенные сведения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод следует вызывать в контексте, чтобы последние участники в определении значения свойства могли действовать со свойством. Например, привязки не могут быть активными для свойства, пока не будут загружены все элементы участника в дереве элементов и не будет распространена асинхронная привязка, а объект источника привязки будет подключен. Аналогичным образом должны быть доступны ресурсы, включая все необходимые словари темы.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsTemplatedValueDynamic">
      <MemberSignature Language="C#" Value="public static bool IsTemplatedValueDynamic (System.Windows.DependencyObject elementInTemplate, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTemplatedValueDynamic(class System.Windows.DependencyObject elementInTemplate, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTemplatedValueDynamic(System::Windows::DependencyObject ^ elementInTemplate, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member IsTemplatedValueDynamic : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic (elementInTemplate, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInTemplate" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="elementInTemplate">Элемент, который относится к экземпляру шаблона.</param>
        <param name="dependencyProperty">Свойство зависимостей.</param>
        <summary>Указывает, относится ли указанный элемент к экземпляру шаблона, определяющего значение для указанного свойства, которое может изменяться во время выполнения на основе изменений в другом месте.</summary>
        <returns><see langword="true" />, если <paramref name="elementInTemplate" /> относится к экземпляру шаблона, определяющего значение для указанного свойства, которое может изменяться во время выполнения на основе изменений в другом месте; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Примеры значений, которые могут изменяться во время выполнения в зависимости от изменений в других местах — это значения, заданные <xref:System.Windows.Data.Binding>, <xref:System.Windows.TemplateBindingExtension> и <xref:System.Windows.DynamicResourceExtension> объектов.

Этот метод предоставляет более подробные сведения в случаях, когда значение свойства <xref:System.Windows.ValueSource.BaseValueSource?displayProperty=nameWithType> <xref:System.Windows.BaseValueSource.ParentTemplate?displayProperty=nameWithType>.
Эта информация в основном используется для средств диагностики.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
