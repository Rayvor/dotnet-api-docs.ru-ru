<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0ea4471d2a29b70a6214ef483c4841369c1364f" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70659706" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет статические вспомогательные методы для запроса объектов в логическом дереве.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper> Класс предоставляет методы, которые можно использовать для возврата дочерних коллекций объектов или конкретных объектов из подузлов логического дерева. Однако большинство операций в дереве объектов, которые обычно выполняются, также предоставляются аналогичными методами или свойствами в <xref:System.Windows.FrameworkElement> или. <xref:System.Windows.FrameworkContentElement> Например, попробуйте выполнить следующие действия.  
  
-   Вместо вызова статического <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> метода, который возвращает перечислитель для логических дочерних объектов, используйте выделенную коллекцию, доступную в модели содержимого для этого объекта. Почти все объекты, поддерживающие модель содержимого, предоставляют некоторое свойство, содержащее коллекцию дочерних объектов, и предоставляет поддержку интерфейса коллекции непосредственно в этой коллекции.  
  
-   Вместо вызова статического <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> метода для получения дочернего объекта путем указания его имени <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> вызовите метод или <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> для конкретных объектов.  
  
 <xref:System.Windows.LogicalTreeHelper>наиболее удобен в сценариях анализа, когда логическое дерево перемещается вверх или вниз по нескольким уровням и требуется использовать единообразный подход для проверки различных родительских или дочерних объектов. В этом случае вы можете получить доступ к сочетаниям моделей содержимого, а использование других интерфейсов API для модели содержимого будет слишком сложным.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Элемент пользовательского интерфейса, который требуется сделать видимым.</param>
        <summary>Пытается сделать видимым запрошенный элемент пользовательского интерфейса и порождает событие <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> для целевого объекта, чтобы сообщить результаты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, более удобно вызывать методы <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> экземпляра или <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> , а не статический служебный метод. Поведение методов экземпляра эквивалентно поведению статического метода.  
  
 Даже если `current` предоставленным элементом пользовательского интерфейса является <xref:System.Windows.FrameworkContentElement>, полученное событие по-прежнему будет <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> иметь то же самое событие с <xref:System.Windows.FrameworkContentElement> источником, идентифицируемым путем проверки данных события события.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Объект, с которого должен начаться поиск. Этот объект должен принадлежать к типу <see cref="T:System.Windows.FrameworkElement" /> или <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <param name="elementName">Имя искомого объекта.</param>
        <summary>Пытается найти и возвратить объект с заданным именем. Поиск начинается с заданного объекта, после чего переходит в подузлы логического дерева.</summary>
        <returns>Объект с соответствующим именем (в случае нахождения); значение <see langword="null" />, если соответствующее имя в логическом дереве не обнаружено.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Методы <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>и <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> внешне похожи на, но работают с другой логикой:  
  
-   Направление поиска для <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> — дочерние объекты (вниз по дереву); направление поиска `FindName` для методов приближается к родительским объектам (вверх по дереву).  
  
-   `FindName` Методы определяются концепцией области имен XAML. С `FindName` помощью вы гарантируете, что существует только один объект с таким именем, так как области имен XAML обеспечивают уникальность. В отличие от <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> них, не учитывает область имен XAML и может пересекать границы области имен XAML во время поиска. Таким образом, уникальность `elementName` имени не гарантируется после того, как границы будут перепутаны. Дополнительные сведения об областях имен XAML см. в разделе [области имен XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта путем обработки логического дерева.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Объект, с которого должна начинаться обработка логического дерева. Предполагается, что данный объект будет <see cref="T:System.Windows.FrameworkElement" /> или <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта путем обработки логического дерева.</summary>
        <returns>Перечисляемая коллекция непосредственных дочерних объектов из логического дерева указанного объекта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте эту сигнатуру и вспомогательный метод, в основном, если `current` вы не <xref:System.Windows.FrameworkElement> уверены <xref:System.Windows.FrameworkContentElement> , что является или и не уверены, поддерживает ли класс этого объекта собственную коллекцию моделей содержимого. Если вы можете определить тип объекта, для которого выполняется запрос, проверьте конкретное свойство содержимого, которое вы уже определили для этого типа. Например, если известно, что запрашиваемый объект является <xref:System.Windows.Controls.ItemsControl>, <xref:System.Windows.Controls.ItemsControl.Items%2A> проверьте свойство, чтобы получить строго типизированную коллекцию, которая имеет поддержку интерфейса коллекции и, вероятно, более полезна, чем перечислитель.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Объект, с которого должна начинаться обработка логического дерева.</param>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта <see cref="T:System.Windows.FrameworkContentElement" /> путем обработки логического дерева.</summary>
        <returns>Перечисляемая коллекция непосредственных дочерних объектов в логическом дереве, начиная с объекта в параметре <paramref name="current" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Объект, с которого должна начинаться обработка логического дерева.</param>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта <see cref="T:System.Windows.FrameworkElement" /> путем обработки логического дерева.</summary>
        <returns>Перечисляемая коллекция непосредственных дочерних объектов в логическом дереве, начиная с объекта в параметре <paramref name="current" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Объект, для которого требуется найти родительский объект. Предполагается, что этот объект будет принадлежать к типу <see cref="T:System.Windows.FrameworkElement" /> или типу <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Возвращает родительский объект заданного объекта путем обработки логического дерева.</summary>
        <returns>Запрошенный родительский объект.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод является просто оболочкой, которая получает соответствующую версию типа (<xref:System.Windows.FrameworkElement> или <xref:System.Windows.FrameworkContentElement>) <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> свойства или <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> ; поэтому, если не удается определить `current` тип, может потребоваться проверить соответствующий Вместо этого следует использовать свойства экземпляра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
