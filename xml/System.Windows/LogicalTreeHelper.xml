<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b687beab6de52a0f10dd5f6c73d526bc11521043" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64185405" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет статические вспомогательные методы для запроса объектов в логическом дереве.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper> Класс предоставляет методы, которые можно использовать для возврата коллекции дочерних объектов или определенных объектов из в подузлы логического дерева. Однако большинство операций дерева объектов, обычно выполняемые также доступ к которым предоставляет аналогичные методы или свойства на <xref:System.Windows.FrameworkElement> или <xref:System.Windows.FrameworkContentElement>. Например попробуйте сделайте следующее:  
  
-   Вместо вызова статического <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> метод, который возвращает перечислитель для логических дочерних объектов, используйте отдельную коллекцию, представленные в модели содержимого для этого объекта. Почти все объекты, которые поддерживают модель содержимого предоставляют некоторые свойство, которое содержит коллекцию дочерних объектов, а также предоставляет непосредственную поддержку интерфейса в этой коллекции.  
  
-   Вместо вызова статического <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> метод для получения дочернего объекта, указав его имя, вызов <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> или <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> метод применительно к конкретным объектам.  
  
 <xref:System.Windows.LogicalTreeHelper> наиболее полезен для анализа сценариев, где вы являются вверх или вниз в логическом дереве рекурсивно через несколько уровней, а для последовательного подхода к анализу различных родительских и дочерних объектов. В этом случае доступа сочетание моделей содержимого, и с помощью модели содержания конкретные API будет слишком сложным.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Элемент пользовательского интерфейса, который требуется сделать видимым.</param>
        <summary>Пытается сделать видимым запрошенный элемент пользовательского интерфейса и порождает событие <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> для целевого объекта, чтобы сообщить результаты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, более удобным для вызова экземплярных методов <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> или <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> вместо того, чтобы этот метод статические Служебные. Поведение методов экземпляра является эквивалентом поведение статический метод.  
  
 Даже если `current` заданный элемент пользовательского интерфейса был <xref:System.Windows.FrameworkContentElement>, результирующее событие остается неизменным <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> событие, с адресом отправителя <xref:System.Windows.FrameworkContentElement> понятны проверки событий данных события.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Объект, с которого должен начаться поиск. Этот объект должен принадлежать к типу <see cref="T:System.Windows.FrameworkElement" /> или <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <param name="elementName">Имя искомого объекта.</param>
        <summary>Пытается найти и возвратить объект с заданным именем. Поиск начинается с заданного объекта, после чего переходит в подузлы логического дерева.</summary>
        <returns>Объект с соответствующим именем (в случае нахождения); значение <see langword="null" />, если соответствующее имя в логическом дереве не обнаружено.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Методы <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> и <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> внешне похожи на <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, но будет работать с другой логикой:  
  
-   Направление поиска для <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> находится ближе к дочерним объектам (вниз по дереву); Направление поиска для `FindName` методы она обращена к родительским объектам (вверх по дереву).  
  
-   `FindName` Методы управляются концепцию области видимости имен XAML. С помощью `FindName` можно гарантировать, что только один объекта с данным именем существует, так как области видимости имен XAML уникальности. Напротив <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> игнорирует области видимости имен XAML и, возможно, кросс-границы области видимости имен XAML во время поиска. Таким образом, не гарантируется уникальность `elementName` имя границ гарантироваться. Дополнительные сведения об области видимости имен XAML, см. в разделе [области видимости имен XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта путем обработки логического дерева.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Объект, с которого должна начинаться обработка логического дерева. Предполагается, что данный объект будет <see cref="T:System.Windows.FrameworkElement" /> или <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта путем обработки логического дерева.</summary>
        <returns>Перечисляемая коллекция непосредственных дочерних объектов из логического дерева указанного объекта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, сигнатура, а также вспомогательные главным образом в том случае, если вы не уверены ли `current` — <xref:System.Windows.FrameworkElement> или <xref:System.Windows.FrameworkContentElement> , а также являются уверены, поддерживает ли этот объект класса свою собственную коллекцию модели содержимого. Можно определить тип объекта, которую запрашиваете, проверьте наличие определенного свойства содержимого, которые известны как с этим типом. Например, если вы знаете, что объект запрашивается — <xref:System.Windows.Controls.ItemsControl>, проверьте <xref:System.Windows.Controls.ItemsControl.Items%2A> свойство для получения строго типизированную коллекцию, которая имеет поддержку интерфейса и, возможно, удобнее, чем перечислитель.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Объект, с которого должна начинаться обработка логического дерева.</param>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта <see cref="T:System.Windows.FrameworkContentElement" /> путем обработки логического дерева.</summary>
        <returns>Перечисляемая коллекция непосредственных дочерних объектов в логическом дереве, начиная с объекта в параметре <paramref name="current" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Объект, с которого должна начинаться обработка логического дерева.</param>
        <summary>Возвращает коллекцию непосредственных дочерних объектов заданного объекта <see cref="T:System.Windows.FrameworkElement" /> путем обработки логического дерева.</summary>
        <returns>Перечисляемая коллекция непосредственных дочерних объектов в логическом дереве, начиная с объекта в параметре <paramref name="current" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Объект, для которого требуется найти родительский объект. Предполагается, что этот объект будет принадлежать к типу <see cref="T:System.Windows.FrameworkElement" /> или типу <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Возвращает родительский объект заданного объекта путем обработки логического дерева.</summary>
        <returns>Запрошенный родительский объект.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод является просто оболочку, которая получает версию соответствующего типа (<xref:System.Windows.FrameworkElement> или <xref:System.Windows.FrameworkContentElement>) из <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> или <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> свойство, так что если вы не сможете определить `current` тип, может понадобиться проверить соответствующие Вместо этого свойства экземпляра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>