<Type Name="ExportAttribute" FullName="System.Composition.ExportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c54ed27a174da1d0722cdaa812608e2966097692" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63897066" /></Metadata><TypeSignature Language="C#" Value="public class ExportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Composition.ExportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class ExportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type ExportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.AttributedModel</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.1;netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Property, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cc552-101">Указывает, что типом, свойством, полем или методом предоставляется определенный экспорт.</span><span class="sxs-lookup"><span data-stu-id="cc552-101">Specifies that a type, property, field, or method provides a particular export.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="cc552-102">В атрибутивной модели программирования, ExportAttribute атрибут объявляет, что экспортирует часть, или предоставляет контейнер композиции, объект, который выполняет определенный контракт.</span><span class="sxs-lookup"><span data-stu-id="cc552-102">In the attributed programming model, the ExportAttribute attribute declares that a part exports, or provides to the composition container, an object that fulfills a particular contract.</span></span> <span data-ttu-id="cc552-103">Во время компоновки части с импортами, которым соответствуют контракты имеют эти зависимости заполняются экспортированного объекта.</span><span class="sxs-lookup"><span data-stu-id="cc552-103">During composition, parts with imports that have matching contracts have those dependencies filled by the exported object.</span></span>

<span data-ttu-id="cc552-104">Атрибут ExportAttribute можно применить к всему классу или свойству, полю или методу класса.</span><span class="sxs-lookup"><span data-stu-id="cc552-104">The ExportAttribute attribute can apply to either an entire class, or a property, field, or method of a class.</span></span> <span data-ttu-id="cc552-105">Он применяется для всего класса, является ли экземпляр класса экспортированного объекта.</span><span class="sxs-lookup"><span data-stu-id="cc552-105">If it's applied to the entire class, an instance of the class is the exported object.</span></span> <span data-ttu-id="cc552-106">Если он применен к члену класса, экспортируемого объекта будет значение этого члена.</span><span class="sxs-lookup"><span data-stu-id="cc552-106">If it's applied to a member of a class, the exported object will be the value of that member.</span></span>

<span data-ttu-id="cc552-107">Ли соответствующий контракт определяется в первую очередь имя контракта и тип контракта.</span><span class="sxs-lookup"><span data-stu-id="cc552-107">Whether or not a contract matches is determined primarily by the contract name and the contract type.</span></span> <span data-ttu-id="cc552-108">Дополнительные сведения см. в разделе <xref:System.Composition.ImportAttribute> ссылки.</span><span class="sxs-lookup"><span data-stu-id="cc552-108">For more information, see the <xref:System.Composition.ImportAttribute> reference.</span></span> 



## Examples  
 <span data-ttu-id="cc552-109">В следующем примере показано ExportAttribute, применяется к три класса и три импорты, соответствующие их.</span><span class="sxs-lookup"><span data-stu-id="cc552-109">The following example shows ExportAttribute being applied to three classes, and three imports that match them.</span></span>  

```csharp
//Default export infers type and contract name from the
//exported type.  This is the preferred method.
[Export]
public class MyExport1
{
    public String data = "Test Data 1.";
}

public class MyImporter1
{
    [Import]
    public MyExport1 importedMember { get; set; }
}

public interface MyInterface
{

}

//Specifying the contract type may be important if
//you want to export a type other then the base type,
//such as an interface.
[Export(typeof(MyInterface))]
public class MyExport2 : MyInterface
{
    public String data = "Test Data 2.";
}

public class MyImporter2
{
    //The import must match the contract type!
    [Import(typeof(MyInterface))]
    public MyExport2 importedMember { get; set; }
}

//Specifying a contract name should only be 
//needed in rare cases. Usually, using metadata
//is a better approach.
[Export("MyContractName", typeof(MyInterface))]
public class MyExport3 : MyInterface
{
    public String data = "Test Data 3.";
}

public class MyImporter3
{
    //Both contract name and type must match!
    [Import("MyContractName", typeof(MyInterface))]
    public MyExport3 importedMember { get; set; }
}

class Program
{      

    static void Main(string[] args)
    {
        AggregateCatalog catalog = new AggregateCatalog();
        catalog.Catalogs.Add(new AssemblyCatalog(typeof(MyExport1).Assembly));
        CompositionContainer _container = new CompositionContainer(catalog);
        MyImporter1 test1 = new MyImporter1();
        MyImporter2 test2 = new MyImporter2();
        MyImporter3 test3 = new MyImporter3();
        _container.SatisfyImportsOnce(test1);
        _container.SatisfyImportsOnce(test2);
        _container.SatisfyImportsOnce(test3);
        Console.WriteLine(test1.importedMember.data);
        Console.WriteLine(test2.importedMember.data);
        Console.WriteLine(test3.importedMember.data);
        Console.ReadLine();

    }
}
```

```vb
'Default export infers type and contract name from the
'exported type.  This is the preferred method.
<Export()>
Public Class MyExport1
    Public ReadOnly Property data As String
        Get
            Return "Test Data 1."
        End Get
    End Property
End Class

Public Class MyImporter1

    <Import()>
    Public Property ImportedMember As MyExport1

End Class

Public Interface MyInterface

End Interface

'Specifying the contract type may be important if
'you want to export a type other then the base type,
'such as an interface.
<Export(GetType(MyInterface))>
Public Class MyExport2
    Implements MyInterface
    Public ReadOnly Property data As String
        Get
            Return "Test Data 2."
        End Get
    End Property
End Class

Public Class MyImporter2
    'The import must match the contract type!
    <Import(GetType(MyInterface))>
    Public Property ImportedMember As MyExport2
End Class

'Specifying a contract name should only be 
'needed in rare cases. Usually, using metadata
'is a better approach.
<Export("MyContractName", GetType(MyInterface))>
Public Class MyExport3
    Implements MyInterface
    Public ReadOnly Property data As String
        Get
            Return "Test Data 3."
        End Get
    End Property
End Class

Public Class MyImporter3
    'Both contract name and type must match!
    <Import("MyContractName", GetType(MyInterface))>
    Public Property ImportedMember As MyExport3
End Class



Sub Main()
    Dim catalog As AggregateCatalog = New AggregateCatalog()
    catalog.Catalogs.Add(New AssemblyCatalog(GetType(MyExport1).Assembly))
    Dim container As CompositionContainer = New CompositionContainer(catalog)
    Dim test1 As MyImporter1 = New MyImporter1()
    Dim test2 As MyImporter2 = New MyImporter2()
    Dim test3 As MyImporter3 = New MyImporter3()
    container.SatisfyImportsOnce(test1)
    container.SatisfyImportsOnce(test2)
    container.SatisfyImportsOnce(test3)
    Console.WriteLine(test1.ImportedMember.data)
    Console.WriteLine(test2.ImportedMember.data)
    Console.WriteLine(test3.ImportedMember.data)
    Console.ReadLine()
End Sub
```

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc552-110">Инициализирует новый экземпляр класса <see cref="T:System.Composition.ExportAttribute" />, экспортирующего тип или член, помеченный данным атрибутом, в рамках имени контракта по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="cc552-110">Initializes a new instance of the <see cref="T:System.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the default contract name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="cc552-111">Методы, помеченные с помощью этого атрибута необходимо указать имя контракта или тип, либо при помощи <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> или <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> метод.</span><span class="sxs-lookup"><span data-stu-id="cc552-111">Methods that are marked with this attribute must specify a contract name or a type by using either the <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> or the <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> method.</span></span>

<span data-ttu-id="cc552-112">Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal> свойство для сравнения с учетом регистра, лингвистическая.</span><span class="sxs-lookup"><span data-stu-id="cc552-112">The contract name is compared by using the <xref:System.StringComparer.Ordinal> property to perform a case-sensitive, non-linguistic comparison.</span></span> 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="new System.Composition.ExportAttribute : string -&gt; System.Composition.ExportAttribute" Usage="new System.Composition.ExportAttribute contractName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractName"><span data-ttu-id="cc552-113">Имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом, либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="cc552-113">The contract name that is used to export the type or member marked with this attribute, or <see langword="null" /> or an empty string ("") to use the default contract name.</span></span></param>
        <summary><span data-ttu-id="cc552-114">Инициализирует новый экземпляр класса <see cref="T:System.Composition.ExportAttribute" />, экспортирующего тип или член, помеченный данным атрибутом, в рамках заданного имени контракта.</span><span class="sxs-lookup"><span data-stu-id="cc552-114">Initializes a new instance of the <see cref="T:System.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the specified contract name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="cc552-115">Методы, помеченные с помощью этого атрибута необходимо указать имя контракта или тип, либо при помощи <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> или <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> метод.</span><span class="sxs-lookup"><span data-stu-id="cc552-115">Methods that are marked with this attribute must specify a contract name or a type by using either the <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> or the <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> method.</span></span>

<span data-ttu-id="cc552-116">Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal> свойство для сравнения с учетом регистра, лингвистическая.</span><span class="sxs-lookup"><span data-stu-id="cc552-116">The contract name is compared by using the <xref:System.StringComparer.Ordinal> property to perform a case-sensitive, non-linguistic comparison.</span></span> 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.Composition.ExportAttribute : Type -&gt; System.Composition.ExportAttribute" Usage="new System.Composition.ExportAttribute contractType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractType"><span data-ttu-id="cc552-117">Тип, от которого наследуется имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом, или значение <see langword="null" /> для использования имени контракта по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="cc552-117">A type from which to derive the contract name that is used to export the type or member marked with this attribute, or <see langword="null" /> to use the default contract name.</span></span></param>
        <summary><span data-ttu-id="cc552-118">Инициализирует новый экземпляр класса <see cref="T:System.Composition.ExportAttribute" />, экспортирующего тип или член, помеченный данным атрибутом, в рамках имени контракта, производного от заданного типа.</span><span class="sxs-lookup"><span data-stu-id="cc552-118">Initializes a new instance of the <see cref="T:System.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under a contract name derived from the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="cc552-119">Методы, помеченные с помощью этого атрибута необходимо указать имя контракта или тип, либо при помощи <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> или <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> метод.</span><span class="sxs-lookup"><span data-stu-id="cc552-119">Methods that are marked with this attribute must specify a contract name or a type by using either the <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> or the <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> method.</span></span>

<span data-ttu-id="cc552-120">Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal> свойство для сравнения с учетом регистра, лингвистическая.</span><span class="sxs-lookup"><span data-stu-id="cc552-120">The contract name is compared by using the <xref:System.StringComparer.Ordinal> property to perform a case-sensitive, non-linguistic comparison.</span></span> 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string contractName, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String, contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(System::String ^ contractName, Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.Composition.ExportAttribute : string * Type -&gt; System.Composition.ExportAttribute" Usage="new System.Composition.ExportAttribute (contractName, contractType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractName"><span data-ttu-id="cc552-121">Имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом, либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="cc552-121">The contract name that is used to export the type or member marked with this attribute, or <see langword="null" /> or an empty string ("") to use the default contract name.</span></span></param>
        <param name="contractType"><span data-ttu-id="cc552-122">Экспортируемый тип.</span><span class="sxs-lookup"><span data-stu-id="cc552-122">The type to export.</span></span></param>
        <summary><span data-ttu-id="cc552-123">Инициализирует новый экземпляр класса <see cref="T:System.Composition.ExportAttribute" />, экспортирующего указанный тип в рамках заданного имени контракта.</span><span class="sxs-lookup"><span data-stu-id="cc552-123">Initializes a new instance of the <see cref="T:System.Composition.ExportAttribute" /> class, exporting the specified type under the specified contract name.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractName">
      <MemberSignature Language="C#" Value="public string ContractName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContractName" />
      <MemberSignature Language="DocId" Value="P:System.Composition.ExportAttribute.ContractName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContractName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContractName : string" Usage="System.Composition.ExportAttribute.ContractName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc552-124">Получает имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом.</span><span class="sxs-lookup"><span data-stu-id="cc552-124">Gets the contract name that is used to export the type or member marked with this attribute.</span></span></summary>
        <value><span data-ttu-id="cc552-125">Имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом.</span><span class="sxs-lookup"><span data-stu-id="cc552-125">The contract name that is used to export the type or member marked with this attribute.</span></span> <span data-ttu-id="cc552-126">Значением по умолчанию является пустая строка ("").</span><span class="sxs-lookup"><span data-stu-id="cc552-126">The default value is an empty string ("").</span></span></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractType">
      <MemberSignature Language="C#" Value="public Type ContractType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContractType" />
      <MemberSignature Language="DocId" Value="P:System.Composition.ExportAttribute.ContractType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ContractType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContractType : Type" Usage="System.Composition.ExportAttribute.ContractType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc552-127">Получает тип контракта, экспортируемый членом, который помечен данным атрибутом.</span><span class="sxs-lookup"><span data-stu-id="cc552-127">Gets the contract type that is exported by the member that is marked by this attribute.</span></span></summary>
        <value><span data-ttu-id="cc552-128">Тип предоставляемого экспорта.</span><span class="sxs-lookup"><span data-stu-id="cc552-128">The type of export to be provided.</span></span> <span data-ttu-id="cc552-129">Значение по умолчанию — <see langword="null" />, означающее, что тип будет получен путем определения типа члена, к которому прикреплен данный экспорт.</span><span class="sxs-lookup"><span data-stu-id="cc552-129">The default value is <see langword="null" />, which means that the type will be obtained by looking at the type on the member that this export is attached to.</span></span></value>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>