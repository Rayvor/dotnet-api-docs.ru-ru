<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26a36d6ca3c407e95c528c3b81560263c0067a80" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70604246" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowPersistenceService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Абстрактный базовый класс, производными которого являются все службы постоянного хранения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 При возникновении определенных условий во время выполнения рабочего процесса подсистема среды выполнения рабочих процессов сохраняет сведения о состоянии экземпляра рабочего процесса. Постоянное хранение может возникнуть, например, при завершении атомарной транзакции при освобождении экземпляра рабочего процесса, когда ведущее приложение вызывает <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> в экземпляре рабочего процесса или при прерывании или завершении экземпляра рабочего процесса. Когда семантика подсистемы среды выполнения рабочих процессов предписывает необходимость появления постоянного хранения, подсистема среды выполнения рабочих процессов вызывает методы, предоставленные службой постоянного хранения для сохранения сведений о состоянии экземпляра рабочего процесса. Подобным образом, когда подсистеме среды выполнения рабочих процессов необходимо восстановить ранее сохраненный экземпляр рабочего процесса, она вызывает методы, предоставленные службой постоянного хранения для загрузки этих сведений о состоянии. Подсистема среды выполнения рабочих процессов обрабатывает всю семантику относительно времени выполнения сохранения. Служба постоянного хранения обрабатывает фактически сохранение и загрузку сведений о состоянии рабочего процесса в хранилище данных или из него.  
  
 Службу постоянного хранения можно создать путем наследования класса от класса <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>.  Службу постоянного хранения можно добавить в подсистему среды выполнения рабочих процессов путем вызова метода <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> или путем создания соответствующей записи в файле конфигурации приложения. В классе <xref:System.Workflow.Runtime.WorkflowRuntime> должна содержаться только одна служба постоянного хранения. Windows Workflow Foundation предоставляет класс <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, готовую службу постоянного хранения, которую можно использовать как есть или же ее можно расширить.  
  
 Подсистема среды выполнения рабочих процессов имеет семантику для блокировки сведений о состоянии рабочего процесса для использования в средах, где службы постоянного хранения, выполняемые в разных процессах, могут иметь доступ к одному хранилищу данных. Класс <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> предоставляет возможность поддержки этой функциональной возможности подсистемы среды выполнения рабочих процессов, предоставляя параметр для <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>, который указывает, должны ли сведения о состоянии экземпляра рабочего процесса быть разблокированы в хранилище данных, или предоставляя метод <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> для разблокирования ранее заблокированных сведений о состоянии рабочего процесса. В службе постоянного хранения, реализующей блокировку, вызов <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> должен заблокировать сведения о состоянии для экземпляра рабочего процесса.  
  
 Служба постоянного хранения должна вызвать исключение <xref:System.Workflow.Runtime.Hosting.PersistenceException>, если ей не удается сохранить сведения о состоянии в хранилище данных или загрузить сведения о состоянии из хранилища данных. Подсистема среды выполнения рабочих процессов предполагает следующее поведение.  
  
 Механизм пакетирования предоставляется для служб, использующих постоянное хранилище для хранения сведений о состоянии рабочего процесса. В таких случаях часто бывает важным обеспечение согласованности между постоянным хранилищем, используемым службой постоянного хранения, и внутренним состоянием подсистемы среды выполнения рабочих процессов. Можно добавить функциональные возможности, определенные интерфейсом <xref:System.Workflow.Runtime.IPendingWork> для службы, а затем принять участие в пакетировании транзакции рабочего процесса, предоставленном <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, путем добавления изменения в хранилище данных в качестве рабочих элементов в <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. Само постоянное хранилище должно реализовать интерфейс <xref:System.Transactions.IEnlistmentNotification>, так что сведения о рабочем процессе не сохраняются неправильным образом в событии отката транзакции. Дополнительные сведения см. в разделе <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> или <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Если реализован в производном классе, инициализирует новый экземпляр класса <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано создание экземпляра класса `SqlWorkflowPersistenceService` (производного от `WorkflowPersistenceService`). Данный пример является частью образца SDK «Nested Exception Handlers» из класса Program.cs.  Дополнительные сведения см. в разделе [пример вложенных обработчиков исключений](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetDefaultSerializedForm : System.Workflow.ComponentModel.Activity -&gt; byte[]" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">Тип <see cref="T:System.Workflow.ComponentModel.Activity" />, сериализованная форма которого запрашивается.</param>
        <summary>Получает сериализованную форму по умолчанию <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <returns>Сериализованная форма по умолчанию <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetIsBlocked : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Корневое действие экземпляра рабочего процесса.</param>
        <summary>Указывает, является ли данное действие заблокированным.</summary>
        <returns><see langword="true" />, если данное действие является заблокированным; в противном случае — <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetSuspendOrTerminateInfo : System.Workflow.ComponentModel.Activity -&gt; string" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Корневое действие экземпляра рабочего процесса.</param>
        <summary>Получает сведения о прекращении или приостановке данного действия.</summary>
        <returns>Тип <see cref="T:System.String" />, который содержит сведения о прекращении или приостановке.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowStatus : System.Workflow.ComponentModel.Activity -&gt; System.Workflow.Runtime.WorkflowStatus" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Корневое действие экземпляра рабочего процесса.</param>
        <summary>Получает состояние рабочего процесса.</summary>
        <returns>Значение перечисления <see cref="T:System.Workflow.Runtime.WorkflowStatus" />, обозначающее состояние рабочего процесса.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="abstract member LoadCompletedContextActivity : Guid * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadCompletedContextActivity (scopeId, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId">Тип <see cref="T:System.Guid" /> завершенной области.</param>
        <param name="outerActivity">Тип <see cref="T:System.Workflow.ComponentModel.Activity" />, представляющий действие, заключающее завершенную область.</param>
        <summary>При реализации в производном классе загружает заданную завершенную область обратно в память.</summary>
        <returns>Тип <see cref="T:System.Workflow.ComponentModel.Activity" />, представляющий завершенную область.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подсистема среды выполнения рабочих процессов использует <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> для реализации компенсации. Необходимо восстановить идентичную копию завершенной области. Для этого необходимо восстановить допустимый тип <xref:System.IO.Stream> из представления завершенной области в хранилище данных. Затем необходимо передать этот тип <xref:System.IO.Stream> одному из перегруженных методов <xref:System.Workflow.ComponentModel.Activity.Load%2A> для выполнения десериализации области.  
  
 Если служба постоянного хранения не может загрузить завершенную область из хранилища данных, необходимо вызывать исключение <xref:System.Workflow.Runtime.Hosting.PersistenceException> с помощью соответствующего сообщения.  
  
   
  
## Examples  
 В следующем примере показана реализация метода `LoadCompletedContextActivity`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberSignature Language="F#" Value="abstract member LoadWorkflowInstanceState : Guid -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadWorkflowInstanceState instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><see cref="T:System.Guid" /> корневого действия экземпляра рабочего процесса.</param>
        <summary>При реализации в производном классе загружает заданное состояние экземпляра рабочего процесса обратно в память.</summary>
        <returns>Объект класса <see cref="T:System.Workflow.ComponentModel.Activity" />, представляющий корневое действие экземпляра рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Необходимо восстановить идентичную копию действия. Для этого необходимо восстановить допустимый тип <xref:System.IO.Stream> из представления экземпляра рабочего процесса в хранилище данных; затем необходимо передать этот тип <xref:System.IO.Stream> одному из перегруженных методов <xref:System.Workflow.ComponentModel.Activity.Load%2A> для десериализации состояния экземпляра рабочего процесса. Если служба постоянного хранения не может загрузить состояние экземпляра рабочего процесса из хранилища данных, необходимо вызвать исключение <xref:System.Workflow.Runtime.Hosting.PersistenceException> с помощью соответствующего сообщения.  
  
 Подсистема среды выполнения рабочих процессов реализует семантику блокировки для ограничения доступа к состоянию экземпляра рабочего процесса, сохраненного в хранилище данных. К нему можно получить доступ с помощью служб постоянного хранения, выполняемых в нескольких процессах. Семантика блокировки разработана, чтобы предотвратить службы постоянного хранения, выполняемых в двух разных процессах, от одновременной загрузки одного экземпляра рабочего процесса в память. В зависимости от типа среды, для поддержки которой разработана служба постоянного хранения, можно выбрать, поддерживать ли эту функциональную возможность. При выборе поддержки семантики блокировки среды выполнения, если данное состояние экземпляра рабочего процесса было ранее заблокировано другим процессом, необходимо вызвать исключение <xref:System.Workflow.Runtime.WorkflowOwnershipException>. В противном случае необходимо заблокировать доступ к состоянию экземпляра рабочего процесса в хранилище данных. Состояние экземпляра рабочего процесса может быть разблокировано путем вызова <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> или вызова <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> с параметром разблокировки с заданным значением `true`.  
  
   
  
## Examples  
 В следующем примере показана реализация метода `LoadWorkflowInstanceState`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="static member RestoreFromDefaultSerializedForm : byte[] * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm (activityBytes, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes">Сериализованная форма <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
        <param name="outerActivity">Внешний класс <see cref="T:System.Workflow.ComponentModel.Activity" />, содержащий <see cref="T:System.Workflow.ComponentModel.Activity" /> для восстановления.</param>
        <summary>Восстанавливает <see cref="T:System.Workflow.ComponentModel.Activity" /> из сериализованной формы.</summary>
        <returns>Восстановленный класс <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показана реализация метода `RestoreFromDefaultSerializedForm`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member SaveCompletedContextActivity : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.SaveCompletedContextActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">Тип <see cref="T:System.Workflow.ComponentModel.Activity" />, представляющий завершенную область.</param>
        <summary>При реализации в производном классе сохраняет заданную завершенную область в хранилище данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подсистема среды выполнения рабочих процессов сохраняет состояние действий завершенной области для реализации компенсации. Необходимо вызвать один из перегруженных методов <xref:System.Workflow.ComponentModel.Activity.Save%2A> для сериализации `activity` в <xref:System.IO.Stream>; затем можно выбрать дополнительную обработку <xref:System.IO.Stream> перед записью в хранилище данных. Однако при вызове <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> подсистемой среды выполнения рабочих процессов необходимо восстановить идентичную копию действия.  
  
 Необходимо иметь возможность связать завершенную область с включающим экземпляром рабочего процесса для отметки области в качестве ненужной в хранилище данных при завершении или прерывании экземпляра рабочего процесса. Поэтому также необходимо сохранить тип <xref:System.Guid> экземпляра рабочего процесса, связанный с завершенной областью; это можно сделать из свойства <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> типа <xref:System.Workflow.Runtime.WorkflowInstance>, связанного с `activity`.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> принимает <xref:System.Guid> завершенной области в качестве параметра. Поэтому также необходимо сохранить свойство <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A>, связанное с `activity`. На это свойство можно указать ссылкой через поле <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty>`activity`.  
  
 При реализации службы постоянного хранения, использующей постоянное хранилище, для поддержки целостности с внутренним состоянием подсистемы среды выполнения рабочих процессов необходимо принять участие в пакетировании транзакции рабочего процесса, чтобы отложить фактическую запись в постоянное хранилище до точки фиксации рабочего процесса. Для принятия участия в пакетировании добавьте рабочий элемент в свойство <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>, представляющее ожидающие изменения, в базу данных и реализуйте интерфейс <xref:System.Workflow.Runtime.IPendingWork> в службе постоянного хранения.  
  
 Если завершенную область невозможно сохранить в хранилище данных, необходимо вызвать исключение <xref:System.Workflow.Runtime.Hosting.PersistenceException> с соответствующим сообщением об ошибке.  
  
   
  
## Examples  
 В следующем примере показана реализация метода `SaveCompletedContextActivity`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberSignature Language="F#" Value="abstract member SaveWorkflowInstanceState : System.Workflow.ComponentModel.Activity * bool -&gt; unit" Usage="workflowPersistenceService.SaveWorkflowInstanceState (rootActivity, unlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Корневое действие экземпляра рабочего процесса.</param>
        <param name="unlock"><see langword="true" />, если экземпляр рабочего процесса не должен быть заблокирован; <see langword="false" />, если экземпляр рабочего процесса должен быть заблокирован.</param>
        <summary>При реализации в производном классе сохраняет состояние экземпляра рабочего процесса в хранилище данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Необходимо вызвать один из перегруженных методов <xref:System.Workflow.ComponentModel.Activity.Save%2A> для сериализации `rootActivity` в <xref:System.IO.Stream>. Затем можно выбрать дополнительную обработку <xref:System.IO.Stream> перед записью в хранилище данных. Однако при вызове <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> подсистемой среды выполнения рабочих процессов необходимо восстановить идентичную копию корневого действия. Если состояние экземпляра рабочего процесса невозможно сохранить в хранилище данных, необходимо вызвать исключение <xref:System.Workflow.Runtime.Hosting.PersistenceException> с соответствующим сообщением об ошибке.  
  
 Подсистема среды выполнения рабочих процессов обеспечивает семантику блокировки для ограничения доступа к состоянию экземпляра рабочего процесса, сохраненного в хранилище данных. К нему можно получить доступ с помощью служб постоянного хранения, выполняемых в разных ведущих приложениях и указывающих на одно хранилище данных. Семантика блокировки разработана, чтобы предотвратить службы постоянного хранения, выполняемых в двух разных средах выполнения рабочих процессов, от одновременной загрузки одного экземпляра рабочего процесса в память. В зависимости от типа среды, для поддержки которой разработана служба постоянного хранения, можно выбрать, поддерживать ли эту функциональную возможность. При выборе поддержки семантики блокировки среды выполнения, если служба постоянного хранения пытается сохранить экземпляр рабочего процесса, который ранее был заблокирован другой службой постоянного хранения, необходимо вызвать исключение <xref:System.Workflow.Runtime.WorkflowOwnershipException>. Если для `unlock` задано значение `true`, необходимо разблокировать доступ к состоянию экземпляра рабочего процесса после его сохранения.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> принимает <xref:System.Guid> экземпляра рабочего процесса в качестве параметра. Поэтому необходимо сохранить <xref:System.Guid>. Также можно использовать этот тип <xref:System.Guid>, чтобы связать экземпляр рабочего процесса с сохраненными состояниями завершенных областей. Это необходимо сделать, поскольку необходимо иметь возможность пометить эти завершенные области в качестве ненужных при завершении экземпляра рабочего процесса.  
  
 Подсистема среды выполнения рабочих процессов вызывает <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> в последний раз при завершении или прерывании экземпляра рабочего процесса. Поэтому если <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> равно <xref:System.Workflow.Runtime.WorkflowStatus.Completed> или <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, можно безопасно удалить экземпляр рабочего процесса и все связанные завершенные области из хранилища данных. В качестве альтернативы можно подписаться на события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> или <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>, чтобы определить, когда можно безопасно удалить записи, связанные с экземпляром рабочего процесса. Фактическое удаление записей из хранилища данных зависит от реализации.  
  
 При реализации службы постоянного хранения, использующей постоянное хранилище, для поддержки целостности с внутренним состоянием подсистемы среды выполнения рабочих процессов необходимо принять участие в пакетировании транзакции рабочего процесса, чтобы отложить фактическую запись в постоянное хранилище до точки фиксации рабочего процесса. Для принятия участия в пакетировании добавьте рабочий элемент, представляющий ожидающие изменения, в постоянное хранилище в свойство <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> и реализуйте интерфейс <xref:System.Workflow.Runtime.IPendingWork> в службе постоянного хранения.  
  
   
  
## Examples  
 В следующем примере показана реализация метода `SaveWorkflowInstanceState`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member UnloadOnIdle : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="workflowPersistenceService.UnloadOnIdle activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">Тип <see cref="T:System.Workflow.ComponentModel.Activity" />, представляющий завершенную область.</param>
        <summary>Определяет, необходима ли выгрузка незанятого рабочего процесса.</summary>
        <returns>Если <see langword="true" />, подсистема среды выполнения рабочих процессов выгружает заданный рабочий процесс при его освобождении.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показана реализация метода `UnloadOnIdle`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="abstract member UnlockWorkflowInstanceState : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.UnlockWorkflowInstanceState rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Корневое действие экземпляра рабочего процесса.</param>
        <summary>При переопределении в производном классе разблокирует состояние экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный метод является абстрактным, так что он не содержит реализации по умолчанию для блокировки и разблокировки.  
  
 При реализации пользовательской службы постоянного хранения при необходимости реализовать схему блокировки необходимо переопределить данный метод и предоставить механизм блокировки-разблокировки в методе <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>, основанном на значении параметра разблокировки.  
  
   
  
## Examples  
 В следующем примере показана реализация метода `UnlockWorkflowInstanceState`. Данный пример кода является частью примера «Custom Persistence Service» из файла FilePersistenceService.cs. Дополнительные сведения см. в разделе [Образец настраиваемой службы сохраняемости](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
